
STM32_LL_basics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fa4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800416c  0800416c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800416c  0800416c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800416c  0800416c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000068  080041dc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  080041dc  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007094  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a40  00000000  00000000  00027124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  00028b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  00029468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175d9  00000000  00000000  00029c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007490  00000000  00000000  00041259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000763cb  00000000  00000000  000486e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000beab4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f4  00000000  00000000  000beb04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004048 	.word	0x08004048

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08004048 	.word	0x08004048

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	0002      	movs	r2, r0
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b7f      	cmp	r3, #127	; 0x7f
 8000242:	d809      	bhi.n	8000258 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000244:	1dfb      	adds	r3, r7, #7
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	001a      	movs	r2, r3
 800024a:	231f      	movs	r3, #31
 800024c:	401a      	ands	r2, r3
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <__NVIC_EnableIRQ+0x30>)
 8000250:	2101      	movs	r1, #1
 8000252:	4091      	lsls	r1, r2
 8000254:	000a      	movs	r2, r1
 8000256:	601a      	str	r2, [r3, #0]
  }
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	b002      	add	sp, #8
 800025e:	bd80      	pop	{r7, pc}
 8000260:	e000e100 	.word	0xe000e100

08000264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	0002      	movs	r2, r0
 800026c:	6039      	str	r1, [r7, #0]
 800026e:	1dfb      	adds	r3, r7, #7
 8000270:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000272:	1dfb      	adds	r3, r7, #7
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b7f      	cmp	r3, #127	; 0x7f
 8000278:	d828      	bhi.n	80002cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800027a:	4a2f      	ldr	r2, [pc, #188]	; (8000338 <__NVIC_SetPriority+0xd4>)
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	b25b      	sxtb	r3, r3
 8000282:	089b      	lsrs	r3, r3, #2
 8000284:	33c0      	adds	r3, #192	; 0xc0
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	589b      	ldr	r3, [r3, r2]
 800028a:	1dfa      	adds	r2, r7, #7
 800028c:	7812      	ldrb	r2, [r2, #0]
 800028e:	0011      	movs	r1, r2
 8000290:	2203      	movs	r2, #3
 8000292:	400a      	ands	r2, r1
 8000294:	00d2      	lsls	r2, r2, #3
 8000296:	21ff      	movs	r1, #255	; 0xff
 8000298:	4091      	lsls	r1, r2
 800029a:	000a      	movs	r2, r1
 800029c:	43d2      	mvns	r2, r2
 800029e:	401a      	ands	r2, r3
 80002a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	019b      	lsls	r3, r3, #6
 80002a6:	22ff      	movs	r2, #255	; 0xff
 80002a8:	401a      	ands	r2, r3
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	0018      	movs	r0, r3
 80002b0:	2303      	movs	r3, #3
 80002b2:	4003      	ands	r3, r0
 80002b4:	00db      	lsls	r3, r3, #3
 80002b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	481f      	ldr	r0, [pc, #124]	; (8000338 <__NVIC_SetPriority+0xd4>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	b25b      	sxtb	r3, r3
 80002c0:	089b      	lsrs	r3, r3, #2
 80002c2:	430a      	orrs	r2, r1
 80002c4:	33c0      	adds	r3, #192	; 0xc0
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002ca:	e031      	b.n	8000330 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002cc:	4a1b      	ldr	r2, [pc, #108]	; (800033c <__NVIC_SetPriority+0xd8>)
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	0019      	movs	r1, r3
 80002d4:	230f      	movs	r3, #15
 80002d6:	400b      	ands	r3, r1
 80002d8:	3b08      	subs	r3, #8
 80002da:	089b      	lsrs	r3, r3, #2
 80002dc:	3306      	adds	r3, #6
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	18d3      	adds	r3, r2, r3
 80002e2:	3304      	adds	r3, #4
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	1dfa      	adds	r2, r7, #7
 80002e8:	7812      	ldrb	r2, [r2, #0]
 80002ea:	0011      	movs	r1, r2
 80002ec:	2203      	movs	r2, #3
 80002ee:	400a      	ands	r2, r1
 80002f0:	00d2      	lsls	r2, r2, #3
 80002f2:	21ff      	movs	r1, #255	; 0xff
 80002f4:	4091      	lsls	r1, r2
 80002f6:	000a      	movs	r2, r1
 80002f8:	43d2      	mvns	r2, r2
 80002fa:	401a      	ands	r2, r3
 80002fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	019b      	lsls	r3, r3, #6
 8000302:	22ff      	movs	r2, #255	; 0xff
 8000304:	401a      	ands	r2, r3
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	0018      	movs	r0, r3
 800030c:	2303      	movs	r3, #3
 800030e:	4003      	ands	r3, r0
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000314:	4809      	ldr	r0, [pc, #36]	; (800033c <__NVIC_SetPriority+0xd8>)
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	001c      	movs	r4, r3
 800031c:	230f      	movs	r3, #15
 800031e:	4023      	ands	r3, r4
 8000320:	3b08      	subs	r3, #8
 8000322:	089b      	lsrs	r3, r3, #2
 8000324:	430a      	orrs	r2, r1
 8000326:	3306      	adds	r3, #6
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	18c3      	adds	r3, r0, r3
 800032c:	3304      	adds	r3, #4
 800032e:	601a      	str	r2, [r3, #0]
}
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	b003      	add	sp, #12
 8000336:	bd90      	pop	{r4, r7, pc}
 8000338:	e000e100 	.word	0xe000e100
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000348:	4b07      	ldr	r3, [pc, #28]	; (8000368 <LL_AHB1_GRP1_EnableClock+0x28>)
 800034a:	6959      	ldr	r1, [r3, #20]
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <LL_AHB1_GRP1_EnableClock+0x28>)
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	430a      	orrs	r2, r1
 8000352:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	4013      	ands	r3, r2
 800035c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800035e:	68fb      	ldr	r3, [r7, #12]
}
 8000360:	46c0      	nop			; (mov r8, r8)
 8000362:	46bd      	mov	sp, r7
 8000364:	b004      	add	sp, #16
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40021000 	.word	0x40021000

0800036c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 8000376:	4a0f      	ldr	r2, [pc, #60]	; (80003b4 <LL_SYSCFG_SetEXTISource+0x48>)
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	21ff      	movs	r1, #255	; 0xff
 800037c:	400b      	ands	r3, r1
 800037e:	3302      	adds	r3, #2
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	589b      	ldr	r3, [r3, r2]
 8000384:	683a      	ldr	r2, [r7, #0]
 8000386:	0c12      	lsrs	r2, r2, #16
 8000388:	210f      	movs	r1, #15
 800038a:	4091      	lsls	r1, r2
 800038c:	000a      	movs	r2, r1
 800038e:	43d2      	mvns	r2, r2
 8000390:	401a      	ands	r2, r3
 8000392:	0011      	movs	r1, r2
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	0c1b      	lsrs	r3, r3, #16
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	409a      	lsls	r2, r3
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <LL_SYSCFG_SetEXTISource+0x48>)
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	24ff      	movs	r4, #255	; 0xff
 80003a2:	4023      	ands	r3, r4
 80003a4:	430a      	orrs	r2, r1
 80003a6:	3302      	adds	r3, #2
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	501a      	str	r2, [r3, r0]
}
 80003ac:	46c0      	nop			; (mov r8, r8)
 80003ae:	46bd      	mov	sp, r7
 80003b0:	b003      	add	sp, #12
 80003b2:	bd90      	pop	{r4, r7, pc}
 80003b4:	40010000 	.word	0x40010000

080003b8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	6819      	ldr	r1, [r3, #0]
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	435b      	muls	r3, r3
 80003cc:	001a      	movs	r2, r3
 80003ce:	0013      	movs	r3, r2
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	189b      	adds	r3, r3, r2
 80003d4:	43db      	mvns	r3, r3
 80003d6:	400b      	ands	r3, r1
 80003d8:	001a      	movs	r2, r3
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	435b      	muls	r3, r3
 80003de:	6879      	ldr	r1, [r7, #4]
 80003e0:	434b      	muls	r3, r1
 80003e2:	431a      	orrs	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	601a      	str	r2, [r3, #0]
}
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	b004      	add	sp, #16
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	60f8      	str	r0, [r7, #12]
 80003f8:	60b9      	str	r1, [r7, #8]
 80003fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	68d9      	ldr	r1, [r3, #12]
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	435b      	muls	r3, r3
 8000404:	001a      	movs	r2, r3
 8000406:	0013      	movs	r3, r2
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	189b      	adds	r3, r3, r2
 800040c:	43db      	mvns	r3, r3
 800040e:	400b      	ands	r3, r1
 8000410:	001a      	movs	r2, r3
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	435b      	muls	r3, r3
 8000416:	6879      	ldr	r1, [r7, #4]
 8000418:	434b      	muls	r3, r1
 800041a:	431a      	orrs	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	60da      	str	r2, [r3, #12]
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b004      	add	sp, #16
 8000426:	bd80      	pop	{r7, pc}

08000428 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800042e:	003b      	movs	r3, r7
 8000430:	0018      	movs	r0, r3
 8000432:	2308      	movs	r3, #8
 8000434:	001a      	movs	r2, r3
 8000436:	2100      	movs	r1, #0
 8000438:	f002 fc70 	bl	8002d1c <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	031b      	lsls	r3, r3, #12
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff ff7d 	bl	8000340 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	03db      	lsls	r3, r3, #15
 800044a:	0018      	movs	r0, r3
 800044c:	f7ff ff78 	bl	8000340 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	029b      	lsls	r3, r3, #10
 8000454:	0018      	movs	r0, r3
 8000456:	f7ff ff73 	bl	8000340 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <MX_GPIO_Init+0x90>)
 800045c:	0019      	movs	r1, r3
 800045e:	2002      	movs	r0, #2
 8000460:	f7ff ff84 	bl	800036c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000464:	2380      	movs	r3, #128	; 0x80
 8000466:	019b      	lsls	r3, r3, #6
 8000468:	4814      	ldr	r0, [pc, #80]	; (80004bc <MX_GPIO_Init+0x94>)
 800046a:	2200      	movs	r2, #0
 800046c:	0019      	movs	r1, r3
 800046e:	f7ff ffbf 	bl	80003f0 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000472:	2380      	movs	r3, #128	; 0x80
 8000474:	019b      	lsls	r3, r3, #6
 8000476:	4811      	ldr	r0, [pc, #68]	; (80004bc <MX_GPIO_Init+0x94>)
 8000478:	2200      	movs	r2, #0
 800047a:	0019      	movs	r1, r3
 800047c:	f7ff ff9c 	bl	80003b8 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000480:	003b      	movs	r3, r7
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	0192      	lsls	r2, r2, #6
 8000486:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000488:	003b      	movs	r3, r7
 800048a:	2201      	movs	r2, #1
 800048c:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800048e:	003b      	movs	r3, r7
 8000490:	2200      	movs	r2, #0
 8000492:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000494:	003b      	movs	r3, r7
 8000496:	2202      	movs	r2, #2
 8000498:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 800049a:	003b      	movs	r3, r7
 800049c:	0018      	movs	r0, r3
 800049e:	f001 fbc5 	bl	8001c2c <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 80004a2:	2100      	movs	r1, #0
 80004a4:	2007      	movs	r0, #7
 80004a6:	f7ff fedd 	bl	8000264 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004aa:	2007      	movs	r0, #7
 80004ac:	f7ff fec0 	bl	8000230 <__NVIC_EnableIRQ>

}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b002      	add	sp, #8
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	00040003 	.word	0x00040003
 80004bc:	48000800 	.word	0x48000800

080004c0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004c4:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <LL_RCC_HSI_Enable+0x18>)
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <LL_RCC_HSI_Enable+0x18>)
 80004ca:	2101      	movs	r1, #1
 80004cc:	430a      	orrs	r2, r1
 80004ce:	601a      	str	r2, [r3, #0]
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	40021000 	.word	0x40021000

080004dc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <LL_RCC_HSI_IsReady+0x1c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2202      	movs	r2, #2
 80004e6:	4013      	ands	r3, r2
 80004e8:	3b02      	subs	r3, #2
 80004ea:	425a      	negs	r2, r3
 80004ec:	4153      	adcs	r3, r2
 80004ee:	b2db      	uxtb	r3, r3
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	40021000 	.word	0x40021000

080004fc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	22f8      	movs	r2, #248	; 0xf8
 800050a:	4393      	bics	r3, r2
 800050c:	0019      	movs	r1, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	00da      	lsls	r2, r3, #3
 8000512:	4b03      	ldr	r3, [pc, #12]	; (8000520 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000514:	430a      	orrs	r2, r1
 8000516:	601a      	str	r2, [r3, #0]
}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b002      	add	sp, #8
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40021000 	.word	0x40021000

08000524 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <LL_RCC_SetSysClkSource+0x24>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	2203      	movs	r2, #3
 8000532:	4393      	bics	r3, r2
 8000534:	0019      	movs	r1, r3
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <LL_RCC_SetSysClkSource+0x24>)
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	430a      	orrs	r2, r1
 800053c:	605a      	str	r2, [r3, #4]
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b002      	add	sp, #8
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	40021000 	.word	0x40021000

0800054c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <LL_RCC_GetSysClkSource+0x14>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	220c      	movs	r2, #12
 8000556:	4013      	ands	r3, r2
}
 8000558:	0018      	movs	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40021000 	.word	0x40021000

08000564 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <LL_RCC_SetAHBPrescaler+0x24>)
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	22f0      	movs	r2, #240	; 0xf0
 8000572:	4393      	bics	r3, r2
 8000574:	0019      	movs	r1, r3
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <LL_RCC_SetAHBPrescaler+0x24>)
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	430a      	orrs	r2, r1
 800057c:	605a      	str	r2, [r3, #4]
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b002      	add	sp, #8
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	40021000 	.word	0x40021000

0800058c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <LL_RCC_SetAPB1Prescaler+0x28>)
 800059a:	4013      	ands	r3, r2
 800059c:	0019      	movs	r1, r3
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	430a      	orrs	r2, r1
 80005a4:	605a      	str	r2, [r3, #4]
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b002      	add	sp, #8
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	40021000 	.word	0x40021000
 80005b4:	fffff8ff 	.word	0xfffff8ff

080005b8 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <LL_RCC_SetUSARTClockSource+0x30>)
 80005c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	0e12      	lsrs	r2, r2, #24
 80005c8:	2103      	movs	r1, #3
 80005ca:	4091      	lsls	r1, r2
 80005cc:	000a      	movs	r2, r1
 80005ce:	43d2      	mvns	r2, r2
 80005d0:	401a      	ands	r2, r3
 80005d2:	0011      	movs	r1, r2
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	021b      	lsls	r3, r3, #8
 80005d8:	0a1a      	lsrs	r2, r3, #8
 80005da:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <LL_RCC_SetUSARTClockSource+0x30>)
 80005dc:	430a      	orrs	r2, r1
 80005de:	631a      	str	r2, [r3, #48]	; 0x30
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b002      	add	sp, #8
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000

080005ec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <LL_RCC_PLL_Enable+0x18>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <LL_RCC_PLL_Enable+0x18>)
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	0449      	lsls	r1, r1, #17
 80005fa:	430a      	orrs	r2, r1
 80005fc:	601a      	str	r2, [r3, #0]
}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000

08000608 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <LL_RCC_PLL_IsReady+0x24>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	049b      	lsls	r3, r3, #18
 8000614:	4013      	ands	r3, r2
 8000616:	22fe      	movs	r2, #254	; 0xfe
 8000618:	0612      	lsls	r2, r2, #24
 800061a:	4694      	mov	ip, r2
 800061c:	4463      	add	r3, ip
 800061e:	425a      	negs	r2, r3
 8000620:	4153      	adcs	r3, r2
 8000622:	b2db      	uxtb	r3, r3
}
 8000624:	0018      	movs	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	40021000 	.word	0x40021000

08000630 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8000642:	4013      	ands	r3, r2
 8000644:	0019      	movs	r1, r3
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	431a      	orrs	r2, r3
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800064e:	430a      	orrs	r2, r1
 8000650:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000656:	220f      	movs	r2, #15
 8000658:	4393      	bics	r3, r2
 800065a:	0019      	movs	r1, r3
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	430a      	orrs	r2, r1
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b004      	add	sp, #16
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40021000 	.word	0x40021000
 8000670:	ffc27fff 	.word	0xffc27fff

08000674 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <LL_APB1_GRP1_EnableClock+0x28>)
 800067e:	69d9      	ldr	r1, [r3, #28]
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <LL_APB1_GRP1_EnableClock+0x28>)
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	430a      	orrs	r2, r1
 8000686:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <LL_APB1_GRP1_EnableClock+0x28>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4013      	ands	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000692:	68fb      	ldr	r3, [r7, #12]
}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b004      	add	sp, #16
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000

080006a0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <LL_APB1_GRP2_EnableClock+0x28>)
 80006aa:	6999      	ldr	r1, [r3, #24]
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <LL_APB1_GRP2_EnableClock+0x28>)
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	430a      	orrs	r2, r1
 80006b2:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <LL_APB1_GRP2_EnableClock+0x28>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	4013      	ands	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006be:	68fb      	ldr	r3, [r7, #12]
}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b004      	add	sp, #16
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000

080006cc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <LL_FLASH_SetLatency+0x24>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2201      	movs	r2, #1
 80006da:	4393      	bics	r3, r2
 80006dc:	0019      	movs	r1, r3
 80006de:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <LL_FLASH_SetLatency+0x24>)
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	430a      	orrs	r2, r1
 80006e4:	601a      	str	r2, [r3, #0]
}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b002      	add	sp, #8
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40022000 	.word	0x40022000

080006f4 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <LL_FLASH_GetLatency+0x14>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2201      	movs	r2, #1
 80006fe:	4013      	ands	r3, r2
}
 8000700:	0018      	movs	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	40022000 	.word	0x40022000

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8000712:	2001      	movs	r0, #1
 8000714:	f7ff ffc4 	bl	80006a0 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	055b      	lsls	r3, r3, #21
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff ffa9 	bl	8000674 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000722:	f000 f82d 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000726:	f7ff fe7f 	bl	8000428 <MX_GPIO_Init>
  MX_TIM2_Init();
 800072a:	f000 fb22 	bl	8000d72 <MX_TIM2_Init>
  MX_TIM6_Init();
 800072e:	f000 fbaf 	bl	8000e90 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000732:	f000 fecf 	bl	80014d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000736:	f000 ff53 	bl	80015e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_init();
 800073a:	f001 f8bb 	bl	80018b4 <uart_init>
  tim_init();
 800073e:	f000 fbdf 	bl	8000f00 <tim_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("===== This is LL basic =====\r\n");
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <main+0x6c>)
 8000744:	0018      	movs	r0, r3
 8000746:	f002 fb91 	bl	8002e6c <puts>
  uint16_t time_delay = 0;
 800074a:	1dbb      	adds	r3, r7, #6
 800074c:	2200      	movs	r2, #0
 800074e:	801a      	strh	r2, [r3, #0]
  while (1)
  {
	  uart_idle();
 8000750:	f001 f828 	bl	80017a4 <uart_idle>
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    printf("time %d s \r\n", time_delay++);
 8000754:	1dbb      	adds	r3, r7, #6
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	1dba      	adds	r2, r7, #6
 800075a:	1c59      	adds	r1, r3, #1
 800075c:	8011      	strh	r1, [r2, #0]
 800075e:	001a      	movs	r2, r3
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <main+0x70>)
 8000762:	0011      	movs	r1, r2
 8000764:	0018      	movs	r0, r3
 8000766:	f002 fae1 	bl	8002d2c <iprintf>
    tim_delay_ms(1000);
 800076a:	23fa      	movs	r3, #250	; 0xfa
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fbd6 	bl	8000f20 <tim_delay_ms>
	  uart_idle();
 8000774:	e7ec      	b.n	8000750 <main+0x44>
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	08004060 	.word	0x08004060
 800077c:	08004080 	.word	0x08004080

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff ffa1 	bl	80006cc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	f7ff ffb2 	bl	80006f4 <LL_FLASH_GetLatency>
 8000790:	0003      	movs	r3, r0
 8000792:	2b01      	cmp	r3, #1
 8000794:	d1fa      	bne.n	800078c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000796:	f7ff fe93 	bl	80004c0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	f7ff fe9e 	bl	80004dc <LL_RCC_HSI_IsReady>
 80007a0:	0003      	movs	r3, r0
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d1fa      	bne.n	800079c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80007a6:	2010      	movs	r0, #16
 80007a8:	f7ff fea8 	bl	80004fc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_12, LL_RCC_PREDIV_DIV_2);
 80007ac:	23a0      	movs	r3, #160	; 0xa0
 80007ae:	0399      	lsls	r1, r3, #14
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	2201      	movs	r2, #1
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff ff3a 	bl	8000630 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80007bc:	f7ff ff16 	bl	80005ec <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	f7ff ff21 	bl	8000608 <LL_RCC_PLL_IsReady>
 80007c6:	0003      	movs	r3, r0
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d1fa      	bne.n	80007c2 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fec9 	bl	8000564 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff feda 	bl	800058c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80007d8:	2002      	movs	r0, #2
 80007da:	f7ff fea3 	bl	8000524 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	f7ff feb4 	bl	800054c <LL_RCC_GetSysClkSource>
 80007e4:	0003      	movs	r3, r0
 80007e6:	2b08      	cmp	r3, #8
 80007e8:	d1fa      	bne.n	80007e0 <SystemClock_Config+0x60>
  {

  }
  LL_Init1msTick(48000000);
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <SystemClock_Config+0x90>)
 80007ec:	0018      	movs	r0, r3
 80007ee:	f002 fa4d 	bl	8002c8c <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <SystemClock_Config+0x90>)
 80007f4:	0018      	movs	r0, r3
 80007f6:	f002 fa59 	bl	8002cac <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff fedc 	bl	80005b8 <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	055b      	lsls	r3, r3, #21
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff fed7 	bl	80005b8 <LL_RCC_SetUSARTClockSource>
}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	02dc6c00 	.word	0x02dc6c00

08000814 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <LL_EXTI_IsActiveFlag_0_31+0x24>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	4013      	ands	r3, r2
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	425a      	negs	r2, r3
 800082a:	4153      	adcs	r3, r2
 800082c:	b2db      	uxtb	r3, r3
}
 800082e:	0018      	movs	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	b002      	add	sp, #8
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40010400 	.word	0x40010400

0800083c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <LL_EXTI_ClearFlag_0_31+0x18>)
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	615a      	str	r2, [r3, #20]
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40010400 	.word	0x40010400

08000858 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2202      	movs	r2, #2
 8000864:	4252      	negs	r2, r2
 8000866:	611a      	str	r2, [r3, #16]
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}

08000870 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	691b      	ldr	r3, [r3, #16]
 800087c:	2201      	movs	r2, #1
 800087e:	4013      	ands	r3, r2
 8000880:	2b01      	cmp	r3, #1
 8000882:	d101      	bne.n	8000888 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000884:	2301      	movs	r3, #1
 8000886:	e000      	b.n	800088a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000888:	2300      	movs	r3, #0
}
 800088a:	0018      	movs	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}

08000892 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <NMI_Handler+0x4>

08000898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <HardFault_Handler+0x4>

0800089e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	019b      	lsls	r3, r3, #6
 80008c4:	0018      	movs	r0, r3
 80008c6:	f7ff ffa5 	bl	8000814 <LL_EXTI_IsActiveFlag_0_31>
 80008ca:	1e03      	subs	r3, r0, #0
 80008cc:	d004      	beq.n	80008d8 <EXTI4_15_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	019b      	lsls	r3, r3, #6
 80008d2:	0018      	movs	r0, r3
 80008d4:	f7ff ffb2 	bl	800083c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  if(LL_TIM_IsActiveFlag_UPDATE(TIM6))
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <TIM6_DAC_IRQHandler+0x28>)
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff ffbe 	bl	8000870 <LL_TIM_IsActiveFlag_UPDATE>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d007      	beq.n	8000908 <TIM6_DAC_IRQHandler+0x20>
  {
    tim_irq_callback(TIM6);
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <TIM6_DAC_IRQHandler+0x28>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fb28 	bl	8000f50 <tim_irq_callback>
    LL_TIM_ClearFlag_UPDATE(TIM6);
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <TIM6_DAC_IRQHandler+0x28>)
 8000902:	0018      	movs	r0, r3
 8000904:	f7ff ffa8 	bl	8000858 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40001000 	.word	0x40001000

08000914 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uart_irq_rx_callback(USART1);
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <USART1_IRQHandler+0x14>)
 800091a:	0018      	movs	r0, r3
 800091c:	f001 f81c 	bl	8001958 <uart_irq_rx_callback>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	40013800 	.word	0x40013800

0800092c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  uart_irq_rx_callback(USART2);
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <USART2_IRQHandler+0x14>)
 8000932:	0018      	movs	r0, r3
 8000934:	f001 f810 	bl	8001958 <uart_irq_rx_callback>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40004400 	.word	0x40004400

08000944 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	e00a      	b.n	800096c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000956:	e000      	b.n	800095a <_read+0x16>
 8000958:	bf00      	nop
 800095a:	0001      	movs	r1, r0
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	1c5a      	adds	r2, r3, #1
 8000960:	60ba      	str	r2, [r7, #8]
 8000962:	b2ca      	uxtb	r2, r1
 8000964:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	3301      	adds	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	429a      	cmp	r2, r3
 8000972:	dbf0      	blt.n	8000956 <_read+0x12>
	}

return len;
 8000974:	687b      	ldr	r3, [r7, #4]
}
 8000976:	0018      	movs	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	b006      	add	sp, #24
 800097c:	bd80      	pop	{r7, pc}

0800097e <_close>:
	}
	return len;
}

int _close(int file)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
	return -1;
 8000986:	2301      	movs	r3, #1
 8000988:	425b      	negs	r3, r3
}
 800098a:	0018      	movs	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}

08000992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	0192      	lsls	r2, r2, #6
 80009a2:	605a      	str	r2, [r3, #4]
	return 0;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	0018      	movs	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b002      	add	sp, #8
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_isatty>:

int _isatty(int file)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
	return 1;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}

080009c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	0018      	movs	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b004      	add	sp, #16
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e0:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <_sbrk+0x5c>)
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <_sbrk+0x60>)
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <_sbrk+0x64>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <_sbrk+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	18d3      	adds	r3, r2, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d207      	bcs.n	8000a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a08:	f002 f95e 	bl	8002cc8 <__errno>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	220c      	movs	r2, #12
 8000a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	425b      	negs	r3, r3
 8000a16:	e009      	b.n	8000a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	18d2      	adds	r2, r2, r3
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <_sbrk+0x64>)
 8000a28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b006      	add	sp, #24
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20008000 	.word	0x20008000
 8000a38:	00000400 	.word	0x00000400
 8000a3c:	20000084 	.word	0x20000084
 8000a40:	200003b0 	.word	0x200003b0

08000a44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <__NVIC_EnableIRQ>:
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	0002      	movs	r2, r0
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b7f      	cmp	r3, #127	; 0x7f
 8000a62:	d809      	bhi.n	8000a78 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	001a      	movs	r2, r3
 8000a6a:	231f      	movs	r3, #31
 8000a6c:	401a      	ands	r2, r3
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <__NVIC_EnableIRQ+0x30>)
 8000a70:	2101      	movs	r1, #1
 8000a72:	4091      	lsls	r1, r2
 8000a74:	000a      	movs	r2, r1
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b002      	add	sp, #8
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b7f      	cmp	r3, #127	; 0x7f
 8000a98:	d828      	bhi.n	8000aec <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9a:	4a2f      	ldr	r2, [pc, #188]	; (8000b58 <__NVIC_SetPriority+0xd4>)
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	33c0      	adds	r3, #192	; 0xc0
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	589b      	ldr	r3, [r3, r2]
 8000aaa:	1dfa      	adds	r2, r7, #7
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	0011      	movs	r1, r2
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	400a      	ands	r2, r1
 8000ab4:	00d2      	lsls	r2, r2, #3
 8000ab6:	21ff      	movs	r1, #255	; 0xff
 8000ab8:	4091      	lsls	r1, r2
 8000aba:	000a      	movs	r2, r1
 8000abc:	43d2      	mvns	r2, r2
 8000abe:	401a      	ands	r2, r3
 8000ac0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	019b      	lsls	r3, r3, #6
 8000ac6:	22ff      	movs	r2, #255	; 0xff
 8000ac8:	401a      	ands	r2, r3
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	0018      	movs	r0, r3
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	4003      	ands	r3, r0
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad8:	481f      	ldr	r0, [pc, #124]	; (8000b58 <__NVIC_SetPriority+0xd4>)
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	33c0      	adds	r3, #192	; 0xc0
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	501a      	str	r2, [r3, r0]
}
 8000aea:	e031      	b.n	8000b50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <__NVIC_SetPriority+0xd8>)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	0019      	movs	r1, r3
 8000af4:	230f      	movs	r3, #15
 8000af6:	400b      	ands	r3, r1
 8000af8:	3b08      	subs	r3, #8
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	3306      	adds	r3, #6
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	18d3      	adds	r3, r2, r3
 8000b02:	3304      	adds	r3, #4
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	1dfa      	adds	r2, r7, #7
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	400a      	ands	r2, r1
 8000b10:	00d2      	lsls	r2, r2, #3
 8000b12:	21ff      	movs	r1, #255	; 0xff
 8000b14:	4091      	lsls	r1, r2
 8000b16:	000a      	movs	r2, r1
 8000b18:	43d2      	mvns	r2, r2
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	019b      	lsls	r3, r3, #6
 8000b22:	22ff      	movs	r2, #255	; 0xff
 8000b24:	401a      	ands	r2, r3
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	4003      	ands	r3, r0
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <__NVIC_SetPriority+0xd8>)
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	001c      	movs	r4, r3
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	4023      	ands	r3, r4
 8000b40:	3b08      	subs	r3, #8
 8000b42:	089b      	lsrs	r3, r3, #2
 8000b44:	430a      	orrs	r2, r1
 8000b46:	3306      	adds	r3, #6
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	18c3      	adds	r3, r0, r3
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	601a      	str	r2, [r3, #0]
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b003      	add	sp, #12
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <LL_AHB1_GRP1_EnableClock>:
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000b6a:	6959      	ldr	r1, [r3, #20]
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	430a      	orrs	r2, r1
 8000b72:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b004      	add	sp, #16
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40021000 	.word	0x40021000

08000b8c <LL_APB1_GRP1_EnableClock>:
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000b96:	69d9      	ldr	r1, [r3, #28]
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b004      	add	sp, #16
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <LL_TIM_EnableCounter>:
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	601a      	str	r2, [r3, #0]
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <LL_TIM_EnableARRPreload>:
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2280      	movs	r2, #128	; 0x80
 8000be2:	431a      	orrs	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	601a      	str	r2, [r3, #0]
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <LL_TIM_OC_DisableFast>:
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d01e      	beq.n	8000c3e <LL_TIM_OC_DisableFast+0x4e>
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d019      	beq.n	8000c3a <LL_TIM_OC_DisableFast+0x4a>
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2b10      	cmp	r3, #16
 8000c0a:	d014      	beq.n	8000c36 <LL_TIM_OC_DisableFast+0x46>
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2b40      	cmp	r3, #64	; 0x40
 8000c10:	d00f      	beq.n	8000c32 <LL_TIM_OC_DisableFast+0x42>
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d008      	beq.n	8000c2e <LL_TIM_OC_DisableFast+0x3e>
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d101      	bne.n	8000c2a <LL_TIM_OC_DisableFast+0x3a>
 8000c26:	2305      	movs	r3, #5
 8000c28:	e00a      	b.n	8000c40 <LL_TIM_OC_DisableFast+0x50>
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	e008      	b.n	8000c40 <LL_TIM_OC_DisableFast+0x50>
 8000c2e:	2304      	movs	r3, #4
 8000c30:	e006      	b.n	8000c40 <LL_TIM_OC_DisableFast+0x50>
 8000c32:	2303      	movs	r3, #3
 8000c34:	e004      	b.n	8000c40 <LL_TIM_OC_DisableFast+0x50>
 8000c36:	2302      	movs	r3, #2
 8000c38:	e002      	b.n	8000c40 <LL_TIM_OC_DisableFast+0x50>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e000      	b.n	8000c40 <LL_TIM_OC_DisableFast+0x50>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	200f      	movs	r0, #15
 8000c42:	183a      	adds	r2, r7, r0
 8000c44:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3318      	adds	r3, #24
 8000c4a:	0019      	movs	r1, r3
 8000c4c:	183b      	adds	r3, r7, r0
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <LL_TIM_OC_DisableFast+0x8c>)
 8000c52:	5cd3      	ldrb	r3, [r2, r3]
 8000c54:	18cb      	adds	r3, r1, r3
 8000c56:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	183a      	adds	r2, r7, r0
 8000c5e:	7812      	ldrb	r2, [r2, #0]
 8000c60:	4907      	ldr	r1, [pc, #28]	; (8000c80 <LL_TIM_OC_DisableFast+0x90>)
 8000c62:	5c8a      	ldrb	r2, [r1, r2]
 8000c64:	0011      	movs	r1, r2
 8000c66:	2204      	movs	r2, #4
 8000c68:	408a      	lsls	r2, r1
 8000c6a:	43d2      	mvns	r2, r2
 8000c6c:	401a      	ands	r2, r3
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	601a      	str	r2, [r3, #0]
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b004      	add	sp, #16
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	080040c4 	.word	0x080040c4
 8000c80:	080040cc 	.word	0x080040cc

08000c84 <LL_TIM_OC_EnablePreload>:
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d01e      	beq.n	8000cd2 <LL_TIM_OC_EnablePreload+0x4e>
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	d019      	beq.n	8000cce <LL_TIM_OC_EnablePreload+0x4a>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	2b10      	cmp	r3, #16
 8000c9e:	d014      	beq.n	8000cca <LL_TIM_OC_EnablePreload+0x46>
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2b40      	cmp	r3, #64	; 0x40
 8000ca4:	d00f      	beq.n	8000cc6 <LL_TIM_OC_EnablePreload+0x42>
 8000ca6:	683a      	ldr	r2, [r7, #0]
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d008      	beq.n	8000cc2 <LL_TIM_OC_EnablePreload+0x3e>
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d101      	bne.n	8000cbe <LL_TIM_OC_EnablePreload+0x3a>
 8000cba:	2305      	movs	r3, #5
 8000cbc:	e00a      	b.n	8000cd4 <LL_TIM_OC_EnablePreload+0x50>
 8000cbe:	2306      	movs	r3, #6
 8000cc0:	e008      	b.n	8000cd4 <LL_TIM_OC_EnablePreload+0x50>
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	e006      	b.n	8000cd4 <LL_TIM_OC_EnablePreload+0x50>
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e004      	b.n	8000cd4 <LL_TIM_OC_EnablePreload+0x50>
 8000cca:	2302      	movs	r3, #2
 8000ccc:	e002      	b.n	8000cd4 <LL_TIM_OC_EnablePreload+0x50>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <LL_TIM_OC_EnablePreload+0x50>
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	200f      	movs	r0, #15
 8000cd6:	183a      	adds	r2, r7, r0
 8000cd8:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3318      	adds	r3, #24
 8000cde:	0019      	movs	r1, r3
 8000ce0:	183b      	adds	r3, r7, r0
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <LL_TIM_OC_EnablePreload+0x88>)
 8000ce6:	5cd3      	ldrb	r3, [r2, r3]
 8000ce8:	18cb      	adds	r3, r1, r3
 8000cea:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	183b      	adds	r3, r7, r0
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4906      	ldr	r1, [pc, #24]	; (8000d10 <LL_TIM_OC_EnablePreload+0x8c>)
 8000cf6:	5ccb      	ldrb	r3, [r1, r3]
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	408b      	lsls	r3, r1
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	601a      	str	r2, [r3, #0]
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b004      	add	sp, #16
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	080040c4 	.word	0x080040c4
 8000d10:	080040cc 	.word	0x080040cc

08000d14 <LL_TIM_SetTriggerOutput>:
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2270      	movs	r2, #112	; 0x70
 8000d24:	4393      	bics	r3, r2
 8000d26:	001a      	movs	r2, r3
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	605a      	str	r2, [r3, #4]
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b002      	add	sp, #8
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <LL_TIM_DisableMasterSlaveMode>:
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	2280      	movs	r2, #128	; 0x80
 8000d46:	4393      	bics	r3, r2
 8000d48:	001a      	movs	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b002      	add	sp, #8
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	2201      	movs	r2, #1
 8000d64:	431a      	orrs	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60da      	str	r2, [r3, #12]
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b002      	add	sp, #8
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <MX_TIM2_Init>:
static volatile uint16_t delay_time = 0;
/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d72:	b5b0      	push	{r4, r5, r7, lr}
 8000d74:	b094      	sub	sp, #80	; 0x50
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000d78:	253c      	movs	r5, #60	; 0x3c
 8000d7a:	197b      	adds	r3, r7, r5
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	2314      	movs	r3, #20
 8000d80:	001a      	movs	r2, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	f001 ffca 	bl	8002d1c <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000d88:	241c      	movs	r4, #28
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	2320      	movs	r3, #32
 8000d90:	001a      	movs	r2, r3
 8000d92:	2100      	movs	r1, #0
 8000d94:	f001 ffc2 	bl	8002d1c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	2318      	movs	r3, #24
 8000d9e:	001a      	movs	r2, r3
 8000da0:	2100      	movs	r1, #0
 8000da2:	f001 ffbb 	bl	8002d1c <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f7ff fef0 	bl	8000b8c <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, 0);
 8000dac:	2100      	movs	r1, #0
 8000dae:	200f      	movs	r0, #15
 8000db0:	f7ff fe68 	bl	8000a84 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000db4:	200f      	movs	r0, #15
 8000db6:	f7ff fe4b 	bl	8000a50 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 48;
 8000dba:	197b      	adds	r3, r7, r5
 8000dbc:	2230      	movs	r2, #48	; 0x30
 8000dbe:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000dc0:	197b      	adds	r3, r7, r5
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 1000;
 8000dc6:	197b      	adds	r3, r7, r5
 8000dc8:	22fa      	movs	r2, #250	; 0xfa
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000dce:	197b      	adds	r3, r7, r5
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000dd4:	197a      	adds	r2, r7, r5
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	05db      	lsls	r3, r3, #23
 8000dda:	0011      	movs	r1, r2
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f001 fb25 	bl	800242c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	0018      	movs	r0, r3
 8000de8:	f7ff fef4 	bl	8000bd4 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	05db      	lsls	r3, r3, #23
 8000df0:	2101      	movs	r1, #1
 8000df2:	0018      	movs	r0, r3
 8000df4:	f7ff ff46 	bl	8000c84 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000df8:	0021      	movs	r1, r4
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2260      	movs	r2, #96	; 0x60
 8000dfe:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.CompareValue = 500;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	22fa      	movs	r2, #250	; 0xfa
 8000e10:	0052      	lsls	r2, r2, #1
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000e1a:	187a      	adds	r2, r7, r1
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	05db      	lsls	r3, r3, #23
 8000e20:	2101      	movs	r1, #1
 8000e22:	0018      	movs	r0, r3
 8000e24:	f001 fb84 	bl	8002530 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	05db      	lsls	r3, r3, #23
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f7ff fede 	bl	8000bf0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	05db      	lsls	r3, r3, #23
 8000e38:	2100      	movs	r1, #0
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff ff6a 	bl	8000d14 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	05db      	lsls	r3, r3, #23
 8000e44:	0018      	movs	r0, r3
 8000e46:	f7ff ff77 	bl	8000d38 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	029b      	lsls	r3, r3, #10
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff fe86 	bl	8000b60 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2220      	movs	r2, #32
 8000e58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2202      	movs	r2, #2
 8000e76:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	1d3a      	adds	r2, r7, #4
 8000e7a:	2390      	movs	r3, #144	; 0x90
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	0011      	movs	r1, r2
 8000e80:	0018      	movs	r0, r3
 8000e82:	f001 f815 	bl	8001eb0 <LL_GPIO_Init>

}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b014      	add	sp, #80	; 0x50
 8000e8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e90 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	0018      	movs	r0, r3
 8000e9a:	2314      	movs	r3, #20
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f001 ff3c 	bl	8002d1c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8000ea4:	2010      	movs	r0, #16
 8000ea6:	f7ff fe71 	bl	8000b8c <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, 0);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2011      	movs	r0, #17
 8000eae:	f7ff fde9 	bl	8000a84 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eb2:	2011      	movs	r0, #17
 8000eb4:	f7ff fdcc 	bl	8000a50 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 48;
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2230      	movs	r2, #48	; 0x30
 8000ebc:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 1000;
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	22fa      	movs	r2, #250	; 0xfa
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	609a      	str	r2, [r3, #8]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <MX_TIM6_Init+0x6c>)
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	0010      	movs	r0, r2
 8000ed4:	f001 faaa 	bl	800242c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM6);
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <MX_TIM6_Init+0x6c>)
 8000eda:	0018      	movs	r0, r3
 8000edc:	f7ff fe7a 	bl	8000bd4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_TIM6_Init+0x6c>)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff ff15 	bl	8000d14 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <MX_TIM6_Init+0x6c>)
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff ff23 	bl	8000d38 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b006      	add	sp, #24
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	40001000 	.word	0x40001000

08000f00 <tim_init>:

/* USER CODE BEGIN 1 */

void tim_init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  LL_TIM_EnableIT_UPDATE(TIM6);
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <tim_init+0x1c>)
 8000f06:	0018      	movs	r0, r3
 8000f08:	f7ff ff25 	bl	8000d56 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <tim_init+0x1c>)
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f7ff fe52 	bl	8000bb8 <LL_TIM_EnableCounter>
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	40001000 	.word	0x40001000

08000f20 <tim_delay_ms>:

void tim_delay_ms(uint16_t delay_ms)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	0002      	movs	r2, r0
 8000f28:	1dbb      	adds	r3, r7, #6
 8000f2a:	801a      	strh	r2, [r3, #0]
  delay_time = 0;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <tim_delay_ms+0x2c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	801a      	strh	r2, [r3, #0]
  while (delay_ms > delay_time);
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <tim_delay_ms+0x2c>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	1dba      	adds	r2, r7, #6
 8000f3c:	8812      	ldrh	r2, [r2, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d8f8      	bhi.n	8000f34 <tim_delay_ms+0x14>
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b002      	add	sp, #8
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000088 	.word	0x20000088

08000f50 <tim_irq_callback>:

void tim_irq_callback(TIM_TypeDef *TIMx)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if (TIMx == TIM6)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <tim_irq_callback+0x28>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d106      	bne.n	8000f6e <tim_irq_callback+0x1e>
  {
    // 1ms
    delay_time++;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <tim_irq_callback+0x2c>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	3301      	adds	r3, #1
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <tim_irq_callback+0x2c>)
 8000f6c:	801a      	strh	r2, [r3, #0]
  }
}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	40001000 	.word	0x40001000
 8000f7c:	20000088 	.word	0x20000088

08000f80 <__NVIC_EnableIRQ>:
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	0002      	movs	r2, r0
 8000f88:	1dfb      	adds	r3, r7, #7
 8000f8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b7f      	cmp	r3, #127	; 0x7f
 8000f92:	d809      	bhi.n	8000fa8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f94:	1dfb      	adds	r3, r7, #7
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	001a      	movs	r2, r3
 8000f9a:	231f      	movs	r3, #31
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_EnableIRQ+0x30>)
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	4091      	lsls	r1, r2
 8000fa4:	000a      	movs	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b002      	add	sp, #8
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	0002      	movs	r2, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8000fc8:	d828      	bhi.n	800101c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fca:	4a2f      	ldr	r2, [pc, #188]	; (8001088 <__NVIC_SetPriority+0xd4>)
 8000fcc:	1dfb      	adds	r3, r7, #7
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	33c0      	adds	r3, #192	; 0xc0
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	589b      	ldr	r3, [r3, r2]
 8000fda:	1dfa      	adds	r2, r7, #7
 8000fdc:	7812      	ldrb	r2, [r2, #0]
 8000fde:	0011      	movs	r1, r2
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	400a      	ands	r2, r1
 8000fe4:	00d2      	lsls	r2, r2, #3
 8000fe6:	21ff      	movs	r1, #255	; 0xff
 8000fe8:	4091      	lsls	r1, r2
 8000fea:	000a      	movs	r2, r1
 8000fec:	43d2      	mvns	r2, r2
 8000fee:	401a      	ands	r2, r3
 8000ff0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	019b      	lsls	r3, r3, #6
 8000ff6:	22ff      	movs	r2, #255	; 0xff
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	0018      	movs	r0, r3
 8001000:	2303      	movs	r3, #3
 8001002:	4003      	ands	r3, r0
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001008:	481f      	ldr	r0, [pc, #124]	; (8001088 <__NVIC_SetPriority+0xd4>)
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b25b      	sxtb	r3, r3
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	430a      	orrs	r2, r1
 8001014:	33c0      	adds	r3, #192	; 0xc0
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	501a      	str	r2, [r3, r0]
}
 800101a:	e031      	b.n	8001080 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <__NVIC_SetPriority+0xd8>)
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	0019      	movs	r1, r3
 8001024:	230f      	movs	r3, #15
 8001026:	400b      	ands	r3, r1
 8001028:	3b08      	subs	r3, #8
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3306      	adds	r3, #6
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	18d3      	adds	r3, r2, r3
 8001032:	3304      	adds	r3, #4
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	1dfa      	adds	r2, r7, #7
 8001038:	7812      	ldrb	r2, [r2, #0]
 800103a:	0011      	movs	r1, r2
 800103c:	2203      	movs	r2, #3
 800103e:	400a      	ands	r2, r1
 8001040:	00d2      	lsls	r2, r2, #3
 8001042:	21ff      	movs	r1, #255	; 0xff
 8001044:	4091      	lsls	r1, r2
 8001046:	000a      	movs	r2, r1
 8001048:	43d2      	mvns	r2, r2
 800104a:	401a      	ands	r2, r3
 800104c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	019b      	lsls	r3, r3, #6
 8001052:	22ff      	movs	r2, #255	; 0xff
 8001054:	401a      	ands	r2, r3
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	0018      	movs	r0, r3
 800105c:	2303      	movs	r3, #3
 800105e:	4003      	ands	r3, r0
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <__NVIC_SetPriority+0xd8>)
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	001c      	movs	r4, r3
 800106c:	230f      	movs	r3, #15
 800106e:	4023      	ands	r3, r4
 8001070:	3b08      	subs	r3, #8
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	430a      	orrs	r2, r1
 8001076:	3306      	adds	r3, #6
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	18c3      	adds	r3, r0, r3
 800107c:	3304      	adds	r3, #4
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b003      	add	sp, #12
 8001086:	bd90      	pop	{r4, r7, pc}
 8001088:	e000e100 	.word	0xe000e100
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <LL_AHB1_GRP1_EnableClock>:
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <LL_AHB1_GRP1_EnableClock+0x28>)
 800109a:	6959      	ldr	r1, [r3, #20]
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <LL_AHB1_GRP1_EnableClock+0x28>)
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	4013      	ands	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b004      	add	sp, #16
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021000 	.word	0x40021000

080010bc <LL_APB1_GRP1_EnableClock>:
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <LL_APB1_GRP1_EnableClock+0x28>)
 80010c6:	69d9      	ldr	r1, [r3, #28]
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <LL_APB1_GRP1_EnableClock+0x28>)
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <LL_APB1_GRP1_EnableClock+0x28>)
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	4013      	ands	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b004      	add	sp, #16
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40021000 	.word	0x40021000

080010e8 <LL_APB1_GRP2_EnableClock>:
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <LL_APB1_GRP2_EnableClock+0x28>)
 80010f2:	6999      	ldr	r1, [r3, #24]
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <LL_APB1_GRP2_EnableClock+0x28>)
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	430a      	orrs	r2, r1
 80010fa:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <LL_APB1_GRP2_EnableClock+0x28>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	4013      	ands	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b004      	add	sp, #16
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40021000 	.word	0x40021000

08001114 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2201      	movs	r2, #1
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	601a      	str	r2, [r3, #0]
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b002      	add	sp, #8
 800112e:	bd80      	pop	{r7, pc}

08001130 <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2201      	movs	r2, #1
 800113e:	4393      	bics	r3, r2
 8001140:	001a      	movs	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  - LINEN (if LIN feature is supported), CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard feature is supported), IREN (if Irda feature is supported)
    and HDSEL bits in the USART_CR3 register.
  */
#if defined(USART_LIN_SUPPORT)
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <LL_USART_ConfigAsyncMode+0x2c>)
 800115e:	401a      	ands	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
#endif /* USART_LIN_SUPPORT */
#if defined(USART_SMARTCARD_SUPPORT)
#if defined(USART_IRDA_SUPPORT)
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	222a      	movs	r2, #42	; 0x2a
 800116a:	4393      	bics	r3, r2
 800116c:	001a      	movs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
#else
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
#endif /* USART_IRDA_SUPPORT */
#endif /* USART_SMARTCARD_SUPPORT */
}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	ffffb7ff 	.word	0xffffb7ff

08001180 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	2202      	movs	r2, #2
 800118e:	4013      	ands	r3, r2
 8001190:	2b02      	cmp	r3, #2
 8001192:	d101      	bne.n	8001198 <LL_USART_IsActiveFlag_FE+0x18>
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <LL_USART_IsActiveFlag_FE+0x1a>
 8001198:	2300      	movs	r3, #0
}
 800119a:	0018      	movs	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	2204      	movs	r2, #4
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d101      	bne.n	80011ba <LL_USART_IsActiveFlag_NE+0x18>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <LL_USART_IsActiveFlag_NE+0x1a>
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	b002      	add	sp, #8
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	2208      	movs	r2, #8
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d101      	bne.n	80011dc <LL_USART_IsActiveFlag_ORE+0x18>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <LL_USART_IsActiveFlag_ORE+0x1a>
 80011dc:	2300      	movs	r3, #0
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	2210      	movs	r2, #16
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d101      	bne.n	80011fe <LL_USART_IsActiveFlag_IDLE+0x18>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <LL_USART_IsActiveFlag_IDLE+0x1a>
 80011fe:	2300      	movs	r3, #0
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	b002      	add	sp, #8
 8001206:	bd80      	pop	{r7, pc}

08001208 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	2220      	movs	r2, #32
 8001216:	4013      	ands	r3, r2
 8001218:	2b20      	cmp	r3, #32
 800121a:	d101      	bne.n	8001220 <LL_USART_IsActiveFlag_RXNE+0x18>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001220:	2300      	movs	r3, #0
}
 8001222:	0018      	movs	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	b002      	add	sp, #8
 8001228:	bd80      	pop	{r7, pc}

0800122a <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	2240      	movs	r2, #64	; 0x40
 8001238:	4013      	ands	r3, r2
 800123a:	2b40      	cmp	r3, #64	; 0x40
 800123c:	d101      	bne.n	8001242 <LL_USART_IsActiveFlag_TC+0x18>
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <LL_USART_IsActiveFlag_TC+0x1a>
 8001242:	2300      	movs	r3, #0
}
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}

0800124c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	2280      	movs	r2, #128	; 0x80
 800125a:	4013      	ands	r3, r2
 800125c:	2b80      	cmp	r3, #128	; 0x80
 800125e:	d101      	bne.n	8001264 <LL_USART_IsActiveFlag_TXE+0x18>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <LL_USART_IsActiveFlag_TXE+0x1a>
 8001264:	2300      	movs	r3, #0
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}

0800126e <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2202      	movs	r2, #2
 800127a:	621a      	str	r2, [r3, #32]
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}

08001284 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NCF           LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2204      	movs	r2, #4
 8001290:	621a      	str	r2, [r3, #32]
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}

0800129a <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2208      	movs	r2, #8
 80012a6:	621a      	str	r2, [r3, #32]
}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b002      	add	sp, #8
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2210      	movs	r2, #16
 80012bc:	621a      	str	r2, [r3, #32]
}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2240      	movs	r2, #64	; 0x40
 80012d2:	621a      	str	r2, [r3, #32]
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}

080012dc <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012e4:	f3ef 8310 	mrs	r3, PRIMASK
 80012e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80012ea:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	2301      	movs	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f383 8810 	msr	PRIMASK, r3
}
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2210      	movs	r2, #16
 8001300:	431a      	orrs	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	f383 8810 	msr	PRIMASK, r3
}
 8001310:	46c0      	nop			; (mov r8, r8)
}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	b006      	add	sp, #24
 8001318:	bd80      	pop	{r7, pc}

0800131a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001322:	f3ef 8310 	mrs	r3, PRIMASK
 8001326:	60bb      	str	r3, [r7, #8]
  return(result);
 8001328:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	2301      	movs	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f383 8810 	msr	PRIMASK, r3
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2220      	movs	r2, #32
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f383 8810 	msr	PRIMASK, r3
}
 800134e:	46c0      	nop			; (mov r8, r8)
}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b006      	add	sp, #24
 8001356:	bd80      	pop	{r7, pc}

08001358 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001360:	f3ef 8310 	mrs	r3, PRIMASK
 8001364:	60bb      	str	r3, [r7, #8]
  return(result);
 8001366:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	2301      	movs	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f383 8810 	msr	PRIMASK, r3
}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2201      	movs	r2, #1
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	f383 8810 	msr	PRIMASK, r3
}
 800138c:	46c0      	nop			; (mov r8, r8)
}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b006      	add	sp, #24
 8001394:	bd80      	pop	{r7, pc}

08001396 <LL_USART_DisableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800139e:	f3ef 8310 	mrs	r3, PRIMASK
 80013a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80013a4:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	2301      	movs	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f383 8810 	msr	PRIMASK, r3
}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2210      	movs	r2, #16
 80013ba:	4393      	bics	r3, r2
 80013bc:	001a      	movs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	f383 8810 	msr	PRIMASK, r3
}
 80013cc:	46c0      	nop			; (mov r8, r8)
}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b006      	add	sp, #24
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013de:	f3ef 8310 	mrs	r3, PRIMASK
 80013e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80013e4:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	2301      	movs	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f383 8810 	msr	PRIMASK, r3
}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2220      	movs	r2, #32
 80013fa:	4393      	bics	r3, r2
 80013fc:	001a      	movs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	f383 8810 	msr	PRIMASK, r3
}
 800140c:	46c0      	nop			; (mov r8, r8)
}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b006      	add	sp, #24
 8001414:	bd80      	pop	{r7, pc}

08001416 <LL_USART_DisableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800141e:	f3ef 8310 	mrs	r3, PRIMASK
 8001422:	60bb      	str	r3, [r7, #8]
  return(result);
 8001424:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	2301      	movs	r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f383 8810 	msr	PRIMASK, r3
}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2201      	movs	r2, #1
 800143a:	4393      	bics	r3, r2
 800143c:	001a      	movs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	f383 8810 	msr	PRIMASK, r3
}
 800144c:	46c0      	nop			; (mov r8, r8)
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b006      	add	sp, #24
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001460:	f3ef 8310 	mrs	r3, PRIMASK
 8001464:	60bb      	str	r3, [r7, #8]
  return(result);
 8001466:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	2301      	movs	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f383 8810 	msr	PRIMASK, r3
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4a07      	ldr	r2, [pc, #28]	; (8001498 <LL_USART_DisableIT_CTS+0x40>)
 800147c:	401a      	ands	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	f383 8810 	msr	PRIMASK, r3
}
 800148c:	46c0      	nop			; (mov r8, r8)
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b006      	add	sp, #24
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	fffffbff 	.word	0xfffffbff

0800149c <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b002      	add	sp, #8
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	000a      	movs	r2, r1
 80014be:	1cfb      	adds	r3, r7, #3
 80014c0:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 80014c2:	1cfb      	adds	r3, r7, #3
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80014cc:	46c0      	nop			; (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b002      	add	sp, #8
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b08f      	sub	sp, #60	; 0x3c
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80014da:	241c      	movs	r4, #28
 80014dc:	193b      	adds	r3, r7, r4
 80014de:	0018      	movs	r0, r3
 80014e0:	231c      	movs	r3, #28
 80014e2:	001a      	movs	r2, r3
 80014e4:	2100      	movs	r1, #0
 80014e6:	f001 fc19 	bl	8002d1c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	0018      	movs	r0, r3
 80014ee:	2318      	movs	r3, #24
 80014f0:	001a      	movs	r2, r3
 80014f2:	2100      	movs	r1, #0
 80014f4:	f001 fc12 	bl	8002d1c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	01db      	lsls	r3, r3, #7
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff fdf3 	bl	80010e8 <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	029b      	lsls	r3, r3, #10
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff fdc2 	bl	8001090 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2280      	movs	r2, #128	; 0x80
 8001510:	0092      	lsls	r2, r2, #2
 8001512:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2202      	movs	r2, #2
 8001518:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2203      	movs	r2, #3
 800151e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2201      	movs	r2, #1
 8001530:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	1d3a      	adds	r2, r7, #4
 8001534:	2390      	movs	r3, #144	; 0x90
 8001536:	05db      	lsls	r3, r3, #23
 8001538:	0011      	movs	r1, r2
 800153a:	0018      	movs	r0, r3
 800153c:	f000 fcb8 	bl	8001eb0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2280      	movs	r2, #128	; 0x80
 8001544:	00d2      	lsls	r2, r2, #3
 8001546:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2202      	movs	r2, #2
 800154c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2203      	movs	r2, #3
 8001552:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2201      	movs	r2, #1
 8001564:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	1d3a      	adds	r2, r7, #4
 8001568:	2390      	movs	r3, #144	; 0x90
 800156a:	05db      	lsls	r3, r3, #23
 800156c:	0011      	movs	r1, r2
 800156e:	0018      	movs	r0, r3
 8001570:	f000 fc9e 	bl	8001eb0 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 8001574:	2100      	movs	r1, #0
 8001576:	201b      	movs	r0, #27
 8001578:	f7ff fd1c 	bl	8000fb4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800157c:	201b      	movs	r0, #27
 800157e:	f7ff fcff 	bl	8000f80 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001582:	193b      	adds	r3, r7, r4
 8001584:	22e1      	movs	r2, #225	; 0xe1
 8001586:	0252      	lsls	r2, r2, #9
 8001588:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800158a:	0021      	movs	r1, r4
 800158c:	187b      	adds	r3, r7, r1
 800158e:	2200      	movs	r2, #0
 8001590:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001592:	187b      	adds	r3, r7, r1
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001598:	187b      	adds	r3, r7, r1
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	220c      	movs	r2, #12
 80015a2:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <MX_USART1_UART_Init+0x108>)
 80015b4:	0019      	movs	r1, r3
 80015b6:	0010      	movs	r0, r2
 80015b8:	f001 fa92 	bl	8002ae0 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <MX_USART1_UART_Init+0x108>)
 80015be:	0018      	movs	r0, r3
 80015c0:	f7ff ff4a 	bl	8001458 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <MX_USART1_UART_Init+0x108>)
 80015c6:	0018      	movs	r0, r3
 80015c8:	f7ff fdc2 	bl	8001150 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <MX_USART1_UART_Init+0x108>)
 80015ce:	0018      	movs	r0, r3
 80015d0:	f7ff fda0 	bl	8001114 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b00f      	add	sp, #60	; 0x3c
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	40013800 	.word	0x40013800

080015e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b08f      	sub	sp, #60	; 0x3c
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80015e6:	241c      	movs	r4, #28
 80015e8:	193b      	adds	r3, r7, r4
 80015ea:	0018      	movs	r0, r3
 80015ec:	231c      	movs	r3, #28
 80015ee:	001a      	movs	r2, r3
 80015f0:	2100      	movs	r1, #0
 80015f2:	f001 fb93 	bl	8002d1c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	0018      	movs	r0, r3
 80015fa:	2318      	movs	r3, #24
 80015fc:	001a      	movs	r2, r3
 80015fe:	2100      	movs	r1, #0
 8001600:	f001 fb8c 	bl	8002d1c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	029b      	lsls	r3, r3, #10
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff fd57 	bl	80010bc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	029b      	lsls	r3, r3, #10
 8001612:	0018      	movs	r0, r3
 8001614:	f7ff fd3c 	bl	8001090 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2204      	movs	r2, #4
 800161c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2202      	movs	r2, #2
 8001622:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2201      	movs	r2, #1
 800163a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 800163c:	1d3a      	adds	r2, r7, #4
 800163e:	2390      	movs	r3, #144	; 0x90
 8001640:	05db      	lsls	r3, r3, #23
 8001642:	0011      	movs	r1, r2
 8001644:	0018      	movs	r0, r3
 8001646:	f000 fc33 	bl	8001eb0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2208      	movs	r2, #8
 800164e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2202      	movs	r2, #2
 8001654:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2201      	movs	r2, #1
 800166c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800166e:	1d3a      	adds	r2, r7, #4
 8001670:	2390      	movs	r3, #144	; 0x90
 8001672:	05db      	lsls	r3, r3, #23
 8001674:	0011      	movs	r1, r2
 8001676:	0018      	movs	r0, r3
 8001678:	f000 fc1a 	bl	8001eb0 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 800167c:	2100      	movs	r1, #0
 800167e:	201c      	movs	r0, #28
 8001680:	f7ff fc98 	bl	8000fb4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001684:	201c      	movs	r0, #28
 8001686:	f7ff fc7b 	bl	8000f80 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800168a:	193b      	adds	r3, r7, r4
 800168c:	22e1      	movs	r2, #225	; 0xe1
 800168e:	0252      	lsls	r2, r2, #9
 8001690:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001692:	0021      	movs	r1, r4
 8001694:	187b      	adds	r3, r7, r1
 8001696:	2200      	movs	r2, #0
 8001698:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	220c      	movs	r2, #12
 80016aa:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80016ac:	187b      	adds	r3, r7, r1
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <MX_USART2_UART_Init+0x104>)
 80016bc:	0019      	movs	r1, r3
 80016be:	0010      	movs	r0, r2
 80016c0:	f001 fa0e 	bl	8002ae0 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <MX_USART2_UART_Init+0x104>)
 80016c6:	0018      	movs	r0, r3
 80016c8:	f7ff fec6 	bl	8001458 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <MX_USART2_UART_Init+0x104>)
 80016ce:	0018      	movs	r0, r3
 80016d0:	f7ff fd3e 	bl	8001150 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <MX_USART2_UART_Init+0x104>)
 80016d6:	0018      	movs	r0, r3
 80016d8:	f7ff fd1c 	bl	8001114 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	b00f      	add	sp, #60	; 0x3c
 80016e2:	bd90      	pop	{r4, r7, pc}
 80016e4:	40004400 	.word	0x40004400

080016e8 <process_cmd>:

/* USER CODE BEGIN 1 */
static bool process_cmd(uint8_t cmd_ch)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	0002      	movs	r2, r0
 80016f0:	1dfb      	adds	r3, r7, #7
 80016f2:	701a      	strb	r2, [r3, #0]
  /* check if valid character */
  if ((cmd_ch >= ' ') && (cmd_ch <= '~'))
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b1f      	cmp	r3, #31
 80016fa:	d914      	bls.n	8001726 <process_cmd+0x3e>
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b7e      	cmp	r3, #126	; 0x7e
 8001702:	d810      	bhi.n	8001726 <process_cmd+0x3e>
  {
      cmd[cmd_idx++] = cmd_ch;
 8001704:	4b23      	ldr	r3, [pc, #140]	; (8001794 <process_cmd+0xac>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	b2d1      	uxtb	r1, r2
 800170e:	4a21      	ldr	r2, [pc, #132]	; (8001794 <process_cmd+0xac>)
 8001710:	7011      	strb	r1, [r2, #0]
 8001712:	0019      	movs	r1, r3
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <process_cmd+0xb0>)
 8001716:	1dfa      	adds	r2, r7, #7
 8001718:	7812      	ldrb	r2, [r2, #0]
 800171a:	545a      	strb	r2, [r3, r1]
      printf("%c", cmd_ch);
 800171c:	1dfb      	adds	r3, r7, #7
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	0018      	movs	r0, r3
 8001722:	f001 fb1d 	bl	8002d60 <putchar>
      // printf("a");
      // LL_USART_TransmitData8(DEBUG_USART, cmd_ch);
  }

  /* delete if back space is pressed */
  if (cmd_ch == '\b')
 8001726:	1dfb      	adds	r3, r7, #7
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b08      	cmp	r3, #8
 800172c:	d113      	bne.n	8001756 <process_cmd+0x6e>
  {
    if (cmd_idx)
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <process_cmd+0xac>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00e      	beq.n	8001756 <process_cmd+0x6e>
    {
      cmd[--cmd_idx] = 0;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <process_cmd+0xac>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	3b01      	subs	r3, #1
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <process_cmd+0xac>)
 8001744:	1c11      	adds	r1, r2, #0
 8001746:	7019      	strb	r1, [r3, #0]
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <process_cmd+0xb0>)
 800174a:	2100      	movs	r1, #0
 800174c:	5499      	strb	r1, [r3, r2]
      printf("\b\x1B[K");
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <process_cmd+0xb4>)
 8001750:	0018      	movs	r0, r3
 8001752:	f001 faeb 	bl	8002d2c <iprintf>
    }
  }
  /* do parsing command if input is enter key */
  if ((cmd_ch == '\r') || (cmd_ch == '\n'))
 8001756:	1dfb      	adds	r3, r7, #7
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b0d      	cmp	r3, #13
 800175c:	d003      	beq.n	8001766 <process_cmd+0x7e>
 800175e:	1dfb      	adds	r3, r7, #7
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b0a      	cmp	r3, #10
 8001764:	d111      	bne.n	800178a <process_cmd+0xa2>
  {
    cmd[cmd_idx++] = cmd_ch;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <process_cmd+0xac>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	b2d1      	uxtb	r1, r2
 8001770:	4a08      	ldr	r2, [pc, #32]	; (8001794 <process_cmd+0xac>)
 8001772:	7011      	strb	r1, [r2, #0]
 8001774:	0019      	movs	r1, r3
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <process_cmd+0xb0>)
 8001778:	1dfa      	adds	r2, r7, #7
 800177a:	7812      	ldrb	r2, [r2, #0]
 800177c:	545a      	strb	r2, [r3, r1]
    printf("\r\n");
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <process_cmd+0xb8>)
 8001780:	0018      	movs	r0, r3
 8001782:	f001 fb73 	bl	8002e6c <puts>
    return true;
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <process_cmd+0xa4>
  }

  return false;
 800178a:	2300      	movs	r3, #0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000294 	.word	0x20000294
 8001798:	20000194 	.word	0x20000194
 800179c:	08004090 	.word	0x08004090
 80017a0:	08004098 	.word	0x08004098

080017a4 <uart_idle>:


void uart_idle(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	if (uart1_idle)
 80017a8:	4b35      	ldr	r3, [pc, #212]	; (8001880 <uart_idle+0xdc>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d036      	beq.n	8001820 <uart_idle+0x7c>
	{
		LL_USART_DisableIT_RXNE(USART1);
 80017b2:	4b34      	ldr	r3, [pc, #208]	; (8001884 <uart_idle+0xe0>)
 80017b4:	0018      	movs	r0, r3
 80017b6:	f7ff fe0e 	bl	80013d6 <LL_USART_DisableIT_RXNE>

    while (uart1_rx_idx != uart1_read_idx)
 80017ba:	e024      	b.n	8001806 <uart_idle+0x62>
    {
      if (process_cmd(uart1_rx_buf[uart1_read_idx++ & (UART_RX_BUF_SIZE-1)]))
 80017bc:	4b32      	ldr	r3, [pc, #200]	; (8001888 <uart_idle+0xe4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	1c59      	adds	r1, r3, #1
 80017c2:	4a31      	ldr	r2, [pc, #196]	; (8001888 <uart_idle+0xe4>)
 80017c4:	6011      	str	r1, [r2, #0]
 80017c6:	22ff      	movs	r2, #255	; 0xff
 80017c8:	4013      	ands	r3, r2
 80017ca:	4a30      	ldr	r2, [pc, #192]	; (800188c <uart_idle+0xe8>)
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7ff ff8a 	bl	80016e8 <process_cmd>
 80017d4:	1e03      	subs	r3, r0, #0
 80017d6:	d016      	beq.n	8001806 <uart_idle+0x62>
      {
        printf(" cmd : %s \r\n", cmd);
 80017d8:	4a2d      	ldr	r2, [pc, #180]	; (8001890 <uart_idle+0xec>)
 80017da:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <uart_idle+0xf0>)
 80017dc:	0011      	movs	r1, r2
 80017de:	0018      	movs	r0, r3
 80017e0:	f001 faa4 	bl	8002d2c <iprintf>
        while (cmd_idx)
 80017e4:	e00a      	b.n	80017fc <uart_idle+0x58>
        {
          cmd[--cmd_idx] = 0;
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <uart_idle+0xf4>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <uart_idle+0xf4>)
 80017f2:	1c11      	adds	r1, r2, #0
 80017f4:	7019      	strb	r1, [r3, #0]
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <uart_idle+0xec>)
 80017f8:	2100      	movs	r1, #0
 80017fa:	5499      	strb	r1, [r3, r2]
        while (cmd_idx)
 80017fc:	4b26      	ldr	r3, [pc, #152]	; (8001898 <uart_idle+0xf4>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ef      	bne.n	80017e6 <uart_idle+0x42>
    while (uart1_rx_idx != uart1_read_idx)
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <uart_idle+0xf8>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <uart_idle+0xe4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d1d4      	bne.n	80017bc <uart_idle+0x18>
        }
      }
    }      

    LL_USART_EnableIT_RXNE(USART1);
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <uart_idle+0xe0>)
 8001814:	0018      	movs	r0, r3
 8001816:	f7ff fd80 	bl	800131a <LL_USART_EnableIT_RXNE>

		uart1_idle = 0;
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <uart_idle+0xdc>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
	}

	if (uart2_idle)
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <uart_idle+0xfc>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d026      	beq.n	8001878 <uart_idle+0xd4>
	{
		LL_USART_DisableIT_RXNE(USART2);
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <uart_idle+0x100>)
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff fdd2 	bl	80013d6 <LL_USART_DisableIT_RXNE>

		while (uart2_rx_idx != uart2_read_idx)
 8001832:	e014      	b.n	800185e <uart_idle+0xba>
    {
      while(!LL_USART_IsActiveFlag_TXE(USART2));
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <uart_idle+0x100>)
 8001838:	0018      	movs	r0, r3
 800183a:	f7ff fd07 	bl	800124c <LL_USART_IsActiveFlag_TXE>
 800183e:	1e03      	subs	r3, r0, #0
 8001840:	d0f9      	beq.n	8001836 <uart_idle+0x92>
      LL_USART_TransmitData8(USART2, uart2_rx_buf[uart2_read_idx++ & (UART_RX_BUF_SIZE-1)]);
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <uart_idle+0x104>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	1c59      	adds	r1, r3, #1
 8001848:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <uart_idle+0x104>)
 800184a:	6011      	str	r1, [r2, #0]
 800184c:	22ff      	movs	r2, #255	; 0xff
 800184e:	4013      	ands	r3, r2
 8001850:	4a16      	ldr	r2, [pc, #88]	; (80018ac <uart_idle+0x108>)
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	4a13      	ldr	r2, [pc, #76]	; (80018a4 <uart_idle+0x100>)
 8001856:	0019      	movs	r1, r3
 8001858:	0010      	movs	r0, r2
 800185a:	f7ff fe2b 	bl	80014b4 <LL_USART_TransmitData8>
		while (uart2_rx_idx != uart2_read_idx)
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <uart_idle+0x10c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <uart_idle+0x104>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d1e4      	bne.n	8001834 <uart_idle+0x90>
    }

    LL_USART_EnableIT_RXNE(USART2);
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <uart_idle+0x100>)
 800186c:	0018      	movs	r0, r3
 800186e:	f7ff fd54 	bl	800131a <LL_USART_EnableIT_RXNE>

		uart2_idle = 0;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <uart_idle+0xfc>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
	}
}
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	2000008a 	.word	0x2000008a
 8001884:	40013800 	.word	0x40013800
 8001888:	20000190 	.word	0x20000190
 800188c:	2000008c 	.word	0x2000008c
 8001890:	20000194 	.word	0x20000194
 8001894:	0800409c 	.word	0x0800409c
 8001898:	20000294 	.word	0x20000294
 800189c:	2000018c 	.word	0x2000018c
 80018a0:	20000295 	.word	0x20000295
 80018a4:	40004400 	.word	0x40004400
 80018a8:	2000039c 	.word	0x2000039c
 80018ac:	20000298 	.word	0x20000298
 80018b0:	20000398 	.word	0x20000398

080018b4 <uart_init>:

void uart_init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  LL_USART_EnableIT_RXNE(USART1);
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <uart_init+0x48>)
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7ff fd2d 	bl	800131a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_IDLE(USART1);
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <uart_init+0x48>)
 80018c2:	0018      	movs	r0, r3
 80018c4:	f7ff fd0a 	bl	80012dc <LL_USART_EnableIT_IDLE>
  LL_USART_EnableIT_ERROR(USART1);
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <uart_init+0x48>)
 80018ca:	0018      	movs	r0, r3
 80018cc:	f7ff fd44 	bl	8001358 <LL_USART_EnableIT_ERROR>
  
  LL_USART_EnableIT_RXNE(USART2);
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <uart_init+0x4c>)
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7ff fd21 	bl	800131a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_IDLE(USART2);
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <uart_init+0x4c>)
 80018da:	0018      	movs	r0, r3
 80018dc:	f7ff fcfe 	bl	80012dc <LL_USART_EnableIT_IDLE>
  LL_USART_EnableIT_ERROR(USART2);
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <uart_init+0x4c>)
 80018e2:	0018      	movs	r0, r3
 80018e4:	f7ff fd38 	bl	8001358 <LL_USART_EnableIT_ERROR>

  setbuf(stdout, NULL);
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <uart_init+0x50>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2100      	movs	r1, #0
 80018f0:	0018      	movs	r0, r3
 80018f2:	f001 fac5 	bl	8002e80 <setbuf>
}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40013800 	.word	0x40013800
 8001900:	40004400 	.word	0x40004400
 8001904:	20000004 	.word	0x20000004

08001908 <uart_error_callback>:


void uart_error_callback(USART_TypeDef *USARTx)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  LL_USART_DisableIT_RXNE(USARTx);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	0018      	movs	r0, r3
 8001914:	f7ff fd5f 	bl	80013d6 <LL_USART_DisableIT_RXNE>
  LL_USART_DisableIT_IDLE(USARTx);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	0018      	movs	r0, r3
 800191c:	f7ff fd3b 	bl	8001396 <LL_USART_DisableIT_IDLE>
  LL_USART_DisableIT_ERROR(USARTx);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0018      	movs	r0, r3
 8001924:	f7ff fd77 	bl	8001416 <LL_USART_DisableIT_ERROR>

  // LL_USART_ClearFlag_RXNE(USARTx);
  LL_USART_ClearFlag_IDLE(USARTx);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	0018      	movs	r0, r3
 800192c:	f7ff fcc0 	bl	80012b0 <LL_USART_ClearFlag_IDLE>
  LL_USART_ClearFlag_FE(USARTx);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	0018      	movs	r0, r3
 8001934:	f7ff fc9b 	bl	800126e <LL_USART_ClearFlag_FE>
  LL_USART_ClearFlag_ORE(USARTx);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	0018      	movs	r0, r3
 800193c:	f7ff fcad 	bl	800129a <LL_USART_ClearFlag_ORE>
  LL_USART_ClearFlag_NE(USARTx);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	0018      	movs	r0, r3
 8001944:	f7ff fc9e 	bl	8001284 <LL_USART_ClearFlag_NE>

  LL_USART_Disable(USARTx);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	0018      	movs	r0, r3
 800194c:	f7ff fbf0 	bl	8001130 <LL_USART_Disable>

  //add your error handling here
}
 8001950:	46c0      	nop			; (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}

08001958 <uart_irq_rx_callback>:

void uart_irq_rx_callback(USART_TypeDef *USARTx)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if (USARTx == USART1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a38      	ldr	r2, [pc, #224]	; (8001a44 <uart_irq_rx_callback+0xec>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d123      	bne.n	80019b0 <uart_irq_rx_callback+0x58>
  {
    //read data register not exmpty
    if(LL_USART_IsActiveFlag_RXNE(USART1))
 8001968:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <uart_irq_rx_callback+0xec>)
 800196a:	0018      	movs	r0, r3
 800196c:	f7ff fc4c 	bl	8001208 <LL_USART_IsActiveFlag_RXNE>
 8001970:	1e03      	subs	r3, r0, #0
 8001972:	d00f      	beq.n	8001994 <uart_irq_rx_callback+0x3c>
    {
      uart1_rx_buf[uart1_rx_idx++ & (UART_RX_BUF_SIZE-1)] = LL_USART_ReceiveData8(USART1);
 8001974:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <uart_irq_rx_callback+0xf0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	1c59      	adds	r1, r3, #1
 800197a:	4a33      	ldr	r2, [pc, #204]	; (8001a48 <uart_irq_rx_callback+0xf0>)
 800197c:	6011      	str	r1, [r2, #0]
 800197e:	22ff      	movs	r2, #255	; 0xff
 8001980:	4013      	ands	r3, r2
 8001982:	001c      	movs	r4, r3
 8001984:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <uart_irq_rx_callback+0xec>)
 8001986:	0018      	movs	r0, r3
 8001988:	f7ff fd88 	bl	800149c <LL_USART_ReceiveData8>
 800198c:	0003      	movs	r3, r0
 800198e:	001a      	movs	r2, r3
 8001990:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <uart_irq_rx_callback+0xf4>)
 8001992:	551a      	strb	r2, [r3, r4]
      // LL_USART_ClearFlag_RXNE(USART2);
    }

    //idle
    if(LL_USART_IsActiveFlag_IDLE(USART1))
 8001994:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <uart_irq_rx_callback+0xec>)
 8001996:	0018      	movs	r0, r3
 8001998:	f7ff fc25 	bl	80011e6 <LL_USART_IsActiveFlag_IDLE>
 800199c:	1e03      	subs	r3, r0, #0
 800199e:	d02e      	beq.n	80019fe <uart_irq_rx_callback+0xa6>
    {
      uart1_idle = 1;
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <uart_irq_rx_callback+0xf8>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
      LL_USART_ClearFlag_IDLE(USART1);
 80019a6:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <uart_irq_rx_callback+0xec>)
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7ff fc81 	bl	80012b0 <LL_USART_ClearFlag_IDLE>
 80019ae:	e026      	b.n	80019fe <uart_irq_rx_callback+0xa6>
    }
  }
  else if (USARTx == USART2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a28      	ldr	r2, [pc, #160]	; (8001a54 <uart_irq_rx_callback+0xfc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d122      	bne.n	80019fe <uart_irq_rx_callback+0xa6>
  {
    //read data register not exmpty
    if(LL_USART_IsActiveFlag_RXNE(USART2))
 80019b8:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <uart_irq_rx_callback+0xfc>)
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7ff fc24 	bl	8001208 <LL_USART_IsActiveFlag_RXNE>
 80019c0:	1e03      	subs	r3, r0, #0
 80019c2:	d00f      	beq.n	80019e4 <uart_irq_rx_callback+0x8c>
    {
      uart2_rx_buf[uart2_rx_idx++ & (UART_RX_BUF_SIZE-1)] = LL_USART_ReceiveData8(USART2);
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <uart_irq_rx_callback+0x100>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	1c59      	adds	r1, r3, #1
 80019ca:	4a23      	ldr	r2, [pc, #140]	; (8001a58 <uart_irq_rx_callback+0x100>)
 80019cc:	6011      	str	r1, [r2, #0]
 80019ce:	22ff      	movs	r2, #255	; 0xff
 80019d0:	4013      	ands	r3, r2
 80019d2:	001c      	movs	r4, r3
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <uart_irq_rx_callback+0xfc>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f7ff fd60 	bl	800149c <LL_USART_ReceiveData8>
 80019dc:	0003      	movs	r3, r0
 80019de:	001a      	movs	r2, r3
 80019e0:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <uart_irq_rx_callback+0x104>)
 80019e2:	551a      	strb	r2, [r3, r4]
      // LL_USART_ClearFlag_RXNE(USART2);
    }

    //idle
    if(LL_USART_IsActiveFlag_IDLE(USART2))
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <uart_irq_rx_callback+0xfc>)
 80019e6:	0018      	movs	r0, r3
 80019e8:	f7ff fbfd 	bl	80011e6 <LL_USART_IsActiveFlag_IDLE>
 80019ec:	1e03      	subs	r3, r0, #0
 80019ee:	d006      	beq.n	80019fe <uart_irq_rx_callback+0xa6>
    {
      uart2_idle = 1;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <uart_irq_rx_callback+0x108>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
      LL_USART_ClearFlag_IDLE(USART2);
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <uart_irq_rx_callback+0xfc>)
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7ff fc59 	bl	80012b0 <LL_USART_ClearFlag_IDLE>
    }
  }


  // frame error
  if(LL_USART_IsActiveFlag_FE(USARTx))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff fbbd 	bl	8001180 <LL_USART_IsActiveFlag_FE>
 8001a06:	1e03      	subs	r3, r0, #0
 8001a08:	d003      	beq.n	8001a12 <uart_irq_rx_callback+0xba>
  {
    uart_error_callback(USARTx);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff ff7b 	bl	8001908 <uart_error_callback>
  }

  // overrun error
  if(LL_USART_IsActiveFlag_ORE(USARTx))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7ff fbd5 	bl	80011c4 <LL_USART_IsActiveFlag_ORE>
 8001a1a:	1e03      	subs	r3, r0, #0
 8001a1c:	d003      	beq.n	8001a26 <uart_irq_rx_callback+0xce>
  {
    uart_error_callback(USARTx);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff ff71 	bl	8001908 <uart_error_callback>
  }

  // noise error
  if(LL_USART_IsActiveFlag_NE(USARTx))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f7ff fbba 	bl	80011a2 <LL_USART_IsActiveFlag_NE>
 8001a2e:	1e03      	subs	r3, r0, #0
 8001a30:	d003      	beq.n	8001a3a <uart_irq_rx_callback+0xe2>
  {
    uart_error_callback(USARTx);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff ff67 	bl	8001908 <uart_error_callback>
  }
}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b003      	add	sp, #12
 8001a40:	bd90      	pop	{r4, r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	40013800 	.word	0x40013800
 8001a48:	2000018c 	.word	0x2000018c
 8001a4c:	2000008c 	.word	0x2000008c
 8001a50:	2000008a 	.word	0x2000008a
 8001a54:	40004400 	.word	0x40004400
 8001a58:	20000398 	.word	0x20000398
 8001a5c:	20000298 	.word	0x20000298
 8001a60:	20000295 	.word	0x20000295

08001a64 <_write>:



#if 1
int _write(int file, char* p, int len)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  for (int i=0; i<len; i++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e016      	b.n	8001aa4 <_write+0x40>
  {
    while(!LL_USART_IsActiveFlag_TXE(DEBUG_USART));
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <_write+0x60>)
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7ff fbe6 	bl	800124c <LL_USART_IsActiveFlag_TXE>
 8001a80:	1e03      	subs	r3, r0, #0
 8001a82:	d0f9      	beq.n	8001a78 <_write+0x14>
    LL_USART_ClearFlag_TC(DEBUG_USART);
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <_write+0x60>)
 8001a86:	0018      	movs	r0, r3
 8001a88:	f7ff fc1d 	bl	80012c6 <LL_USART_ClearFlag_TC>
    LL_USART_TransmitData8(DEBUG_USART, *(p+i));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	18d3      	adds	r3, r2, r3
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <_write+0x60>)
 8001a96:	0019      	movs	r1, r3
 8001a98:	0010      	movs	r0, r2
 8001a9a:	f7ff fd0b 	bl	80014b4 <LL_USART_TransmitData8>
  for (int i=0; i<len; i++)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dbe4      	blt.n	8001a76 <_write+0x12>
  }
  while (LL_USART_IsActiveFlag_TC(DEBUG_USART));
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <_write+0x60>)
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff fbba 	bl	800122a <LL_USART_IsActiveFlag_TC>
 8001ab6:	1e03      	subs	r3, r0, #0
 8001ab8:	d1f9      	bne.n	8001aae <_write+0x4a>

  return len;
 8001aba:	687b      	ldr	r3, [r7, #4]
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b006      	add	sp, #24
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40013800 	.word	0x40013800

08001ac8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001acc:	f7fe ffba 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ad2:	490d      	ldr	r1, [pc, #52]	; (8001b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <LoopForever+0xe>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad8:	e002      	b.n	8001ae0 <LoopCopyDataInit>

08001ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ade:	3304      	adds	r3, #4

08001ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae4:	d3f9      	bcc.n	8001ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ae8:	4c0a      	ldr	r4, [pc, #40]	; (8001b14 <LoopForever+0x16>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aec:	e001      	b.n	8001af2 <LoopFillZerobss>

08001aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af0:	3204      	adds	r2, #4

08001af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af4:	d3fb      	bcc.n	8001aee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001af6:	f001 f8ed 	bl	8002cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001afa:	f7fe fe07 	bl	800070c <main>

08001afe <LoopForever>:

LoopForever:
    b LoopForever
 8001afe:	e7fe      	b.n	8001afe <LoopForever>
  ldr   r0, =_estack
 8001b00:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b08:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b0c:	08004174 	.word	0x08004174
  ldr r2, =_sbss
 8001b10:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b14:	200003b0 	.word	0x200003b0

08001b18 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b18:	e7fe      	b.n	8001b18 <ADC1_COMP_IRQHandler>
	...

08001b1c <LL_EXTI_EnableIT_0_31>:
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <LL_EXTI_EnableIT_0_31+0x1c>)
 8001b26:	6819      	ldr	r1, [r3, #0]
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <LL_EXTI_EnableIT_0_31+0x1c>)
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b002      	add	sp, #8
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40010400 	.word	0x40010400

08001b3c <LL_EXTI_DisableIT_0_31>:
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <LL_EXTI_DisableIT_0_31+0x20>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <LL_EXTI_DisableIT_0_31+0x20>)
 8001b4e:	400a      	ands	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b002      	add	sp, #8
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	40010400 	.word	0x40010400

08001b60 <LL_EXTI_EnableEvent_0_31>:
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <LL_EXTI_EnableEvent_0_31+0x1c>)
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <LL_EXTI_EnableEvent_0_31+0x1c>)
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	605a      	str	r2, [r3, #4]
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40010400 	.word	0x40010400

08001b80 <LL_EXTI_DisableEvent_0_31>:
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001b92:	400a      	ands	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]
}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b002      	add	sp, #8
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	40010400 	.word	0x40010400

08001ba4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001bae:	6899      	ldr	r1, [r3, #8]
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	609a      	str	r2, [r3, #8]
}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	609a      	str	r2, [r3, #8]
}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b002      	add	sp, #8
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	40010400 	.word	0x40010400

08001be8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001bf2:	68d9      	ldr	r1, [r3, #12]
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	60da      	str	r2, [r3, #12]
}
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b002      	add	sp, #8
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40010400 	.word	0x40010400

08001c08 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	60da      	str	r2, [r3, #12]
}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b002      	add	sp, #8
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	40010400 	.word	0x40010400

08001c2c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001c34:	230f      	movs	r3, #15
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	791b      	ldrb	r3, [r3, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d100      	bne.n	8001c46 <LL_EXTI_Init+0x1a>
 8001c44:	e068      	b.n	8001d18 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d100      	bne.n	8001c50 <LL_EXTI_Init+0x24>
 8001c4e:	e06e      	b.n	8001d2e <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	795b      	ldrb	r3, [r3, #5]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d01b      	beq.n	8001c90 <LL_EXTI_Init+0x64>
 8001c58:	dc25      	bgt.n	8001ca6 <LL_EXTI_Init+0x7a>
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <LL_EXTI_Init+0x38>
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d00b      	beq.n	8001c7a <LL_EXTI_Init+0x4e>
 8001c62:	e020      	b.n	8001ca6 <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7ff ff89 	bl	8001b80 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7ff ff52 	bl	8001b1c <LL_EXTI_EnableIT_0_31>
          break;
 8001c78:	e01a      	b.n	8001cb0 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7ff ff5c 	bl	8001b3c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7ff ff69 	bl	8001b60 <LL_EXTI_EnableEvent_0_31>
          break;
 8001c8e:	e00f      	b.n	8001cb0 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7ff ff41 	bl	8001b1c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f7ff ff5e 	bl	8001b60 <LL_EXTI_EnableEvent_0_31>
          break;
 8001ca4:	e004      	b.n	8001cb0 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8001ca6:	230f      	movs	r3, #15
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
          break;
 8001cae:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	799b      	ldrb	r3, [r3, #6]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d03a      	beq.n	8001d2e <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	799b      	ldrb	r3, [r3, #6]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d01b      	beq.n	8001cf8 <LL_EXTI_Init+0xcc>
 8001cc0:	dc25      	bgt.n	8001d0e <LL_EXTI_Init+0xe2>
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d002      	beq.n	8001ccc <LL_EXTI_Init+0xa0>
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d00b      	beq.n	8001ce2 <LL_EXTI_Init+0xb6>
 8001cca:	e020      	b.n	8001d0e <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7ff ff99 	bl	8001c08 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f7ff ff62 	bl	8001ba4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001ce0:	e026      	b.n	8001d30 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f7ff ff6c 	bl	8001bc4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f7ff ff79 	bl	8001be8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001cf6:	e01b      	b.n	8001d30 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff ff51 	bl	8001ba4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0018      	movs	r0, r3
 8001d08:	f7ff ff6e 	bl	8001be8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001d0c:	e010      	b.n	8001d30 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8001d0e:	230f      	movs	r3, #15
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
            break;
 8001d16:	e00b      	b.n	8001d30 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7ff ff0d 	bl	8001b3c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7ff ff2a 	bl	8001b80 <LL_EXTI_DisableEvent_0_31>
 8001d2c:	e000      	b.n	8001d30 <LL_EXTI_Init+0x104>
      }
 8001d2e:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8001d30:	230f      	movs	r3, #15
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	781b      	ldrb	r3, [r3, #0]
}
 8001d36:	0018      	movs	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b004      	add	sp, #16
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <LL_GPIO_SetPinMode>:
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	435b      	muls	r3, r3
 8001d52:	001a      	movs	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	189b      	adds	r3, r3, r2
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	400b      	ands	r3, r1
 8001d5e:	001a      	movs	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	435b      	muls	r3, r3
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	434b      	muls	r3, r1
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	601a      	str	r2, [r3, #0]
}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b004      	add	sp, #16
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <LL_GPIO_SetPinOutputType>:
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	43d2      	mvns	r2, r2
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	434b      	muls	r3, r1
 8001d92:	431a      	orrs	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	605a      	str	r2, [r3, #4]
}
 8001d98:	46c0      	nop			; (mov r8, r8)
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b004      	add	sp, #16
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <LL_GPIO_SetPinSpeed>:
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6899      	ldr	r1, [r3, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	435b      	muls	r3, r3
 8001db4:	001a      	movs	r2, r3
 8001db6:	0013      	movs	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	189b      	adds	r3, r3, r2
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	400b      	ands	r3, r1
 8001dc0:	001a      	movs	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	435b      	muls	r3, r3
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	434b      	muls	r3, r1
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	609a      	str	r2, [r3, #8]
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b004      	add	sp, #16
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <LL_GPIO_SetPinPull>:
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	68d9      	ldr	r1, [r3, #12]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	435b      	muls	r3, r3
 8001dec:	001a      	movs	r2, r3
 8001dee:	0013      	movs	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	189b      	adds	r3, r3, r2
 8001df4:	43db      	mvns	r3, r3
 8001df6:	400b      	ands	r3, r1
 8001df8:	001a      	movs	r2, r3
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	435b      	muls	r3, r3
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	434b      	muls	r3, r1
 8001e02:	431a      	orrs	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	60da      	str	r2, [r3, #12]
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b004      	add	sp, #16
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6a19      	ldr	r1, [r3, #32]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	435b      	muls	r3, r3
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	4353      	muls	r3, r2
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	435a      	muls	r2, r3
 8001e2c:	0013      	movs	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	43db      	mvns	r3, r3
 8001e34:	400b      	ands	r3, r1
 8001e36:	001a      	movs	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	435b      	muls	r3, r3
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	434b      	muls	r3, r1
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	434b      	muls	r3, r1
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	434b      	muls	r3, r1
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b004      	add	sp, #16
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	0a12      	lsrs	r2, r2, #8
 8001e6e:	4353      	muls	r3, r2
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	0a12      	lsrs	r2, r2, #8
 8001e74:	4353      	muls	r3, r2
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	0a12      	lsrs	r2, r2, #8
 8001e7a:	435a      	muls	r2, r3
 8001e7c:	0013      	movs	r3, r2
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	43db      	mvns	r3, r3
 8001e84:	400b      	ands	r3, r1
 8001e86:	001a      	movs	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	0a1b      	lsrs	r3, r3, #8
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	0a09      	lsrs	r1, r1, #8
 8001e90:	434b      	muls	r3, r1
 8001e92:	68b9      	ldr	r1, [r7, #8]
 8001e94:	0a09      	lsrs	r1, r1, #8
 8001e96:	434b      	muls	r3, r1
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	0a09      	lsrs	r1, r1, #8
 8001e9c:	434b      	muls	r3, r1
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	434b      	muls	r3, r1
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b004      	add	sp, #16
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001ebe:	e048      	b.n	8001f52 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4091      	lsls	r1, r2
 8001eca:	000a      	movs	r2, r1
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d03a      	beq.n	8001f4c <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d003      	beq.n	8001ee6 <LL_GPIO_Init+0x36>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d10e      	bne.n	8001f04 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f7ff ff56 	bl	8001da0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6819      	ldr	r1, [r3, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	0018      	movs	r0, r3
 8001f00:	f7ff ff39 	bl	8001d76 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff ff63 	bl	8001dd8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d111      	bne.n	8001f3e <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2bff      	cmp	r3, #255	; 0xff
 8001f1e:	d807      	bhi.n	8001f30 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	695a      	ldr	r2, [r3, #20]
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff ff71 	bl	8001e10 <LL_GPIO_SetAFPin_0_7>
 8001f2e:	e006      	b.n	8001f3e <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7ff ff8c 	bl	8001e56 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	68b9      	ldr	r1, [r7, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	0018      	movs	r0, r3
 8001f48:	f7ff fef9 	bl	8001d3e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	40da      	lsrs	r2, r3
 8001f5a:	1e13      	subs	r3, r2, #0
 8001f5c:	d1b0      	bne.n	8001ec0 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b004      	add	sp, #16
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <LL_RCC_HSI_IsReady>:
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <LL_RCC_HSI_IsReady+0x1c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2202      	movs	r2, #2
 8001f72:	4013      	ands	r3, r2
 8001f74:	3b02      	subs	r3, #2
 8001f76:	425a      	negs	r2, r3
 8001f78:	4153      	adcs	r3, r2
 8001f7a:	b2db      	uxtb	r3, r3
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	40021000 	.word	0x40021000

08001f88 <LL_RCC_LSE_IsReady>:
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <LL_RCC_LSE_IsReady+0x1c>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	2202      	movs	r2, #2
 8001f92:	4013      	ands	r3, r2
 8001f94:	3b02      	subs	r3, #2
 8001f96:	425a      	negs	r2, r3
 8001f98:	4153      	adcs	r3, r2
 8001f9a:	b2db      	uxtb	r3, r3
}
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <LL_RCC_GetSysClkSource>:
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <LL_RCC_GetSysClkSource+0x14>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	220c      	movs	r2, #12
 8001fb2:	4013      	ands	r3, r2
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <LL_RCC_GetAHBPrescaler>:
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <LL_RCC_GetAHBPrescaler+0x14>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	22f0      	movs	r2, #240	; 0xf0
 8001fca:	4013      	ands	r3, r2
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <LL_RCC_GetAPB1Prescaler>:
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <LL_RCC_GetAPB1Prescaler+0x14>)
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	23e0      	movs	r3, #224	; 0xe0
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4013      	ands	r3, r2
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000

08001ff0 <LL_RCC_GetUSARTClockSource>:
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <LL_RCC_GetUSARTClockSource+0x24>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	2103      	movs	r1, #3
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4091      	lsls	r1, r2
 8002002:	000a      	movs	r2, r1
 8002004:	401a      	ands	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	4313      	orrs	r3, r2
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b002      	add	sp, #8
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000

08002018 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <LL_RCC_PLL_GetMainSource+0x14>)
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	23c0      	movs	r3, #192	; 0xc0
 8002022:	025b      	lsls	r3, r3, #9
 8002024:	4013      	ands	r3, r2
}
 8002026:	0018      	movs	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000

08002030 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	23f0      	movs	r3, #240	; 0xf0
 800203a:	039b      	lsls	r3, r3, #14
 800203c:	4013      	ands	r3, r2
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021000 	.word	0x40021000

08002048 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <LL_RCC_PLL_GetPrediv+0x14>)
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	220f      	movs	r2, #15
 8002052:	4013      	ands	r3, r2
}
 8002054:	0018      	movs	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	40021000 	.word	0x40021000

08002060 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002068:	f000 f8de 	bl	8002228 <RCC_GetSystemClockFreq>
 800206c:	0002      	movs	r2, r0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0018      	movs	r0, r3
 8002078:	f000 f904 	bl	8002284 <RCC_GetHCLKClockFreq>
 800207c:	0002      	movs	r2, r0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	0018      	movs	r0, r3
 8002088:	f000 f912 	bl	80022b0 <RCC_GetPCLK1ClockFreq>
 800208c:	0002      	movs	r2, r0
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	609a      	str	r2, [r3, #8]
}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d12d      	bne.n	800210a <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff ff9d 	bl	8001ff0 <LL_RCC_GetUSARTClockSource>
 80020b6:	0003      	movs	r3, r0
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d00a      	beq.n	80020d2 <LL_RCC_GetUSARTClockFreq+0x36>
 80020bc:	d818      	bhi.n	80020f0 <LL_RCC_GetUSARTClockFreq+0x54>
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d002      	beq.n	80020c8 <LL_RCC_GetUSARTClockFreq+0x2c>
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d00c      	beq.n	80020e0 <LL_RCC_GetUSARTClockFreq+0x44>
 80020c6:	e013      	b.n	80020f0 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80020c8:	f000 f8ae 	bl	8002228 <RCC_GetSystemClockFreq>
 80020cc:	0003      	movs	r3, r0
 80020ce:	60fb      	str	r3, [r7, #12]
        break;
 80020d0:	e020      	b.n	8002114 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80020d2:	f7ff ff49 	bl	8001f68 <LL_RCC_HSI_IsReady>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d019      	beq.n	800210e <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80020da:	4b4c      	ldr	r3, [pc, #304]	; (800220c <LL_RCC_GetUSARTClockFreq+0x170>)
 80020dc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80020de:	e016      	b.n	800210e <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80020e0:	f7ff ff52 	bl	8001f88 <LL_RCC_LSE_IsReady>
 80020e4:	1e03      	subs	r3, r0, #0
 80020e6:	d014      	beq.n	8002112 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	60fb      	str	r3, [r7, #12]
        }
        break;
 80020ee:	e010      	b.n	8002112 <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80020f0:	f000 f89a 	bl	8002228 <RCC_GetSystemClockFreq>
 80020f4:	0003      	movs	r3, r0
 80020f6:	0018      	movs	r0, r3
 80020f8:	f000 f8c4 	bl	8002284 <RCC_GetHCLKClockFreq>
 80020fc:	0003      	movs	r3, r0
 80020fe:	0018      	movs	r0, r3
 8002100:	f000 f8d6 	bl	80022b0 <RCC_GetPCLK1ClockFreq>
 8002104:	0003      	movs	r3, r0
 8002106:	60fb      	str	r3, [r7, #12]
        break;
 8002108:	e004      	b.n	8002114 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	e002      	b.n	8002114 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	e000      	b.n	8002114 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002112:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CFGR3_USART1SW  */

#if defined(RCC_CFGR3_USART2SW)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b10      	cmp	r3, #16
 8002118:	d132      	bne.n	8002180 <LL_RCC_GetUSARTClockFreq+0xe4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	0018      	movs	r0, r3
 800211e:	f7ff ff67 	bl	8001ff0 <LL_RCC_GetUSARTClockSource>
 8002122:	0003      	movs	r3, r0
 8002124:	4a3a      	ldr	r2, [pc, #232]	; (8002210 <LL_RCC_GetUSARTClockFreq+0x174>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00e      	beq.n	8002148 <LL_RCC_GetUSARTClockFreq+0xac>
 800212a:	4a39      	ldr	r2, [pc, #228]	; (8002210 <LL_RCC_GetUSARTClockFreq+0x174>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d81a      	bhi.n	8002166 <LL_RCC_GetUSARTClockFreq+0xca>
 8002130:	4a38      	ldr	r2, [pc, #224]	; (8002214 <LL_RCC_GetUSARTClockFreq+0x178>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d003      	beq.n	800213e <LL_RCC_GetUSARTClockFreq+0xa2>
 8002136:	4a38      	ldr	r2, [pc, #224]	; (8002218 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00c      	beq.n	8002156 <LL_RCC_GetUSARTClockFreq+0xba>
 800213c:	e013      	b.n	8002166 <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800213e:	f000 f873 	bl	8002228 <RCC_GetSystemClockFreq>
 8002142:	0003      	movs	r3, r0
 8002144:	60fb      	str	r3, [r7, #12]
        break;
 8002146:	e020      	b.n	800218a <LL_RCC_GetUSARTClockFreq+0xee>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002148:	f7ff ff0e 	bl	8001f68 <LL_RCC_HSI_IsReady>
 800214c:	1e03      	subs	r3, r0, #0
 800214e:	d019      	beq.n	8002184 <LL_RCC_GetUSARTClockFreq+0xe8>
        {
          usart_frequency = HSI_VALUE;
 8002150:	4b2e      	ldr	r3, [pc, #184]	; (800220c <LL_RCC_GetUSARTClockFreq+0x170>)
 8002152:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002154:	e016      	b.n	8002184 <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002156:	f7ff ff17 	bl	8001f88 <LL_RCC_LSE_IsReady>
 800215a:	1e03      	subs	r3, r0, #0
 800215c:	d014      	beq.n	8002188 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = LSE_VALUE;
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002164:	e010      	b.n	8002188 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002166:	f000 f85f 	bl	8002228 <RCC_GetSystemClockFreq>
 800216a:	0003      	movs	r3, r0
 800216c:	0018      	movs	r0, r3
 800216e:	f000 f889 	bl	8002284 <RCC_GetHCLKClockFreq>
 8002172:	0003      	movs	r3, r0
 8002174:	0018      	movs	r0, r3
 8002176:	f000 f89b 	bl	80022b0 <RCC_GetPCLK1ClockFreq>
 800217a:	0003      	movs	r3, r0
 800217c:	60fb      	str	r3, [r7, #12]
        break;
 800217e:	e004      	b.n	800218a <LL_RCC_GetUSARTClockFreq+0xee>
    }
  }
 8002180:	46c0      	nop			; (mov r8, r8)
 8002182:	e002      	b.n	800218a <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	e000      	b.n	800218a <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 8002188:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b12      	cmp	r3, #18
 800218e:	d132      	bne.n	80021f6 <LL_RCC_GetUSARTClockFreq+0x15a>
  {
    /* USART3CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	0018      	movs	r0, r3
 8002194:	f7ff ff2c 	bl	8001ff0 <LL_RCC_GetUSARTClockSource>
 8002198:	0003      	movs	r3, r0
 800219a:	4a20      	ldr	r2, [pc, #128]	; (800221c <LL_RCC_GetUSARTClockFreq+0x180>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00e      	beq.n	80021be <LL_RCC_GetUSARTClockFreq+0x122>
 80021a0:	4a1e      	ldr	r2, [pc, #120]	; (800221c <LL_RCC_GetUSARTClockFreq+0x180>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d81a      	bhi.n	80021dc <LL_RCC_GetUSARTClockFreq+0x140>
 80021a6:	4a1e      	ldr	r2, [pc, #120]	; (8002220 <LL_RCC_GetUSARTClockFreq+0x184>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d003      	beq.n	80021b4 <LL_RCC_GetUSARTClockFreq+0x118>
 80021ac:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <LL_RCC_GetUSARTClockFreq+0x188>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00c      	beq.n	80021cc <LL_RCC_GetUSARTClockFreq+0x130>
 80021b2:	e013      	b.n	80021dc <LL_RCC_GetUSARTClockFreq+0x140>
    {
      case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80021b4:	f000 f838 	bl	8002228 <RCC_GetSystemClockFreq>
 80021b8:	0003      	movs	r3, r0
 80021ba:	60fb      	str	r3, [r7, #12]
        break;
 80021bc:	e020      	b.n	8002200 <LL_RCC_GetUSARTClockFreq+0x164>

      case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80021be:	f7ff fed3 	bl	8001f68 <LL_RCC_HSI_IsReady>
 80021c2:	1e03      	subs	r3, r0, #0
 80021c4:	d019      	beq.n	80021fa <LL_RCC_GetUSARTClockFreq+0x15e>
        {
          usart_frequency = HSI_VALUE;
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <LL_RCC_GetUSARTClockFreq+0x170>)
 80021c8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80021ca:	e016      	b.n	80021fa <LL_RCC_GetUSARTClockFreq+0x15e>

      case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80021cc:	f7ff fedc 	bl	8001f88 <LL_RCC_LSE_IsReady>
 80021d0:	1e03      	subs	r3, r0, #0
 80021d2:	d014      	beq.n	80021fe <LL_RCC_GetUSARTClockFreq+0x162>
        {
          usart_frequency = LSE_VALUE;
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80021da:	e010      	b.n	80021fe <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80021dc:	f000 f824 	bl	8002228 <RCC_GetSystemClockFreq>
 80021e0:	0003      	movs	r3, r0
 80021e2:	0018      	movs	r0, r3
 80021e4:	f000 f84e 	bl	8002284 <RCC_GetHCLKClockFreq>
 80021e8:	0003      	movs	r3, r0
 80021ea:	0018      	movs	r0, r3
 80021ec:	f000 f860 	bl	80022b0 <RCC_GetPCLK1ClockFreq>
 80021f0:	0003      	movs	r3, r0
 80021f2:	60fb      	str	r3, [r7, #12]
        break;
 80021f4:	e004      	b.n	8002200 <LL_RCC_GetUSARTClockFreq+0x164>
    }
  }
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	e002      	b.n	8002200 <LL_RCC_GetUSARTClockFreq+0x164>
        break;
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	e000      	b.n	8002200 <LL_RCC_GetUSARTClockFreq+0x164>
        break;
 80021fe:	46c0      	nop			; (mov r8, r8)

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002200:	68fb      	ldr	r3, [r7, #12]
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b004      	add	sp, #16
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	007a1200 	.word	0x007a1200
 8002210:	10030000 	.word	0x10030000
 8002214:	10010000 	.word	0x10010000
 8002218:	10020000 	.word	0x10020000
 800221c:	120c0000 	.word	0x120c0000
 8002220:	12040000 	.word	0x12040000
 8002224:	12080000 	.word	0x12080000

08002228 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002232:	f7ff feb9 	bl	8001fa8 <LL_RCC_GetSysClkSource>
 8002236:	0003      	movs	r3, r0
 8002238:	2b0c      	cmp	r3, #12
 800223a:	d013      	beq.n	8002264 <RCC_GetSystemClockFreq+0x3c>
 800223c:	d815      	bhi.n	800226a <RCC_GetSystemClockFreq+0x42>
 800223e:	2b08      	cmp	r3, #8
 8002240:	d00b      	beq.n	800225a <RCC_GetSystemClockFreq+0x32>
 8002242:	d812      	bhi.n	800226a <RCC_GetSystemClockFreq+0x42>
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <RCC_GetSystemClockFreq+0x26>
 8002248:	2b04      	cmp	r3, #4
 800224a:	d003      	beq.n	8002254 <RCC_GetSystemClockFreq+0x2c>
 800224c:	e00d      	b.n	800226a <RCC_GetSystemClockFreq+0x42>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <RCC_GetSystemClockFreq+0x54>)
 8002250:	607b      	str	r3, [r7, #4]
      break;
 8002252:	e00d      	b.n	8002270 <RCC_GetSystemClockFreq+0x48>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <RCC_GetSystemClockFreq+0x54>)
 8002256:	607b      	str	r3, [r7, #4]
      break;
 8002258:	e00a      	b.n	8002270 <RCC_GetSystemClockFreq+0x48>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800225a:	f000 f83d 	bl	80022d8 <RCC_PLL_GetFreqDomain_SYS>
 800225e:	0003      	movs	r3, r0
 8002260:	607b      	str	r3, [r7, #4]
      break;
 8002262:	e005      	b.n	8002270 <RCC_GetSystemClockFreq+0x48>

#if defined(RCC_HSI48_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI48:/* HSI48 used as system clock  source */
      frequency = HSI48_VALUE;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <RCC_GetSystemClockFreq+0x58>)
 8002266:	607b      	str	r3, [r7, #4]
      break;
 8002268:	e002      	b.n	8002270 <RCC_GetSystemClockFreq+0x48>
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800226a:	4b04      	ldr	r3, [pc, #16]	; (800227c <RCC_GetSystemClockFreq+0x54>)
 800226c:	607b      	str	r3, [r7, #4]
      break;
 800226e:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8002270:	687b      	ldr	r3, [r7, #4]
}
 8002272:	0018      	movs	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	b002      	add	sp, #8
 8002278:	bd80      	pop	{r7, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	007a1200 	.word	0x007a1200
 8002280:	02dc6c00 	.word	0x02dc6c00

08002284 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800228c:	f7ff fe98 	bl	8001fc0 <LL_RCC_GetAHBPrescaler>
 8002290:	0003      	movs	r3, r0
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	220f      	movs	r2, #15
 8002296:	4013      	ands	r3, r2
 8002298:	4a04      	ldr	r2, [pc, #16]	; (80022ac <RCC_GetHCLKClockFreq+0x28>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	001a      	movs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	40d3      	lsrs	r3, r2
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b002      	add	sp, #8
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	080040ac 	.word	0x080040ac

080022b0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80022b8:	f7ff fe8e 	bl	8001fd8 <LL_RCC_GetAPB1Prescaler>
 80022bc:	0003      	movs	r3, r0
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <RCC_GetPCLK1ClockFreq+0x24>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	001a      	movs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	40d3      	lsrs	r3, r2
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b002      	add	sp, #8
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	080040bc 	.word	0x080040bc

080022d8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80022e6:	f7ff fe97 	bl	8002018 <LL_RCC_PLL_GetMainSource>
 80022ea:	0003      	movs	r3, r0
 80022ec:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	23c0      	movs	r3, #192	; 0xc0
 80022f2:	025b      	lsls	r3, r3, #9
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d012      	beq.n	800231e <RCC_PLL_GetFreqDomain_SYS+0x46>
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	23c0      	movs	r3, #192	; 0xc0
 80022fc:	025b      	lsls	r3, r3, #9
 80022fe:	429a      	cmp	r2, r3
 8002300:	d813      	bhi.n	800232a <RCC_PLL_GetFreqDomain_SYS+0x52>
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	429a      	cmp	r2, r3
 800230a:	d005      	beq.n	8002318 <RCC_PLL_GetFreqDomain_SYS+0x40>
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	025b      	lsls	r3, r3, #9
 8002312:	429a      	cmp	r2, r3
 8002314:	d006      	beq.n	8002324 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8002316:	e008      	b.n	800232a <RCC_PLL_GetFreqDomain_SYS+0x52>
  {
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 800231a:	607b      	str	r3, [r7, #4]
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800231c:	e008      	b.n	8002330 <RCC_PLL_GetFreqDomain_SYS+0x58>

#if defined(RCC_HSI48_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI48:     /* HSI48 used as PLL clock source */
      pllinputfreq = HSI48_VALUE;
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <RCC_PLL_GetFreqDomain_SYS+0x8c>)
 8002320:	607b      	str	r3, [r7, #4]
      break;
 8002322:	e005      	b.n	8002330 <RCC_PLL_GetFreqDomain_SYS+0x58>
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002324:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 8002326:	607b      	str	r3, [r7, #4]
      break;
 8002328:	e002      	b.n	8002330 <RCC_PLL_GetFreqDomain_SYS+0x58>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 800232c:	607b      	str	r3, [r7, #4]
#else
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800232e:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 8002330:	f7ff fe8a 	bl	8002048 <LL_RCC_PLL_GetPrediv>
 8002334:	0003      	movs	r3, r0
 8002336:	220f      	movs	r2, #15
 8002338:	4013      	ands	r3, r2
 800233a:	3301      	adds	r3, #1
 800233c:	0019      	movs	r1, r3
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7fd feea 	bl	8000118 <__udivsi3>
 8002344:	0003      	movs	r3, r0
 8002346:	001c      	movs	r4, r3
 8002348:	f7ff fe72 	bl	8002030 <LL_RCC_PLL_GetMultiplicator>
 800234c:	0003      	movs	r3, r0
 800234e:	0c9b      	lsrs	r3, r3, #18
 8002350:	220f      	movs	r2, #15
 8002352:	4013      	ands	r3, r2
 8002354:	3302      	adds	r3, #2
 8002356:	4363      	muls	r3, r4
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b003      	add	sp, #12
 800235e:	bd90      	pop	{r4, r7, pc}
 8002360:	007a1200 	.word	0x007a1200
 8002364:	02dc6c00 	.word	0x02dc6c00

08002368 <LL_TIM_SetPrescaler>:
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}

08002380 <LL_TIM_SetAutoReload>:
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b002      	add	sp, #8
 8002396:	bd80      	pop	{r7, pc}

08002398 <LL_TIM_SetRepetitionCounter>:
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <LL_TIM_OC_SetCompareCH1>:
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	635a      	str	r2, [r3, #52]	; 0x34
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <LL_TIM_OC_SetCompareCH2>:
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80023d8:	46c0      	nop			; (mov r8, r8)
 80023da:	46bd      	mov	sp, r7
 80023dc:	b002      	add	sp, #8
 80023de:	bd80      	pop	{r7, pc}

080023e0 <LL_TIM_OC_SetCompareCH3>:
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <LL_TIM_OC_SetCompareCH4>:
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b002      	add	sp, #8
 800240e:	bd80      	pop	{r7, pc}

08002410 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	2201      	movs	r2, #1
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	615a      	str	r2, [r3, #20]
}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bd80      	pop	{r7, pc}

0800242c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a35      	ldr	r2, [pc, #212]	; (8002514 <LL_TIM_Init+0xe8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d008      	beq.n	8002456 <LL_TIM_Init+0x2a>
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	05db      	lsls	r3, r3, #23
 800244a:	429a      	cmp	r2, r3
 800244c:	d003      	beq.n	8002456 <LL_TIM_Init+0x2a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a31      	ldr	r2, [pc, #196]	; (8002518 <LL_TIM_Init+0xec>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d107      	bne.n	8002466 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2270      	movs	r2, #112	; 0x70
 800245a:	4393      	bics	r3, r2
 800245c:	001a      	movs	r2, r3
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a2a      	ldr	r2, [pc, #168]	; (8002514 <LL_TIM_Init+0xe8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d018      	beq.n	80024a0 <LL_TIM_Init+0x74>
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	05db      	lsls	r3, r3, #23
 8002474:	429a      	cmp	r2, r3
 8002476:	d013      	beq.n	80024a0 <LL_TIM_Init+0x74>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a27      	ldr	r2, [pc, #156]	; (8002518 <LL_TIM_Init+0xec>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d00f      	beq.n	80024a0 <LL_TIM_Init+0x74>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a26      	ldr	r2, [pc, #152]	; (800251c <LL_TIM_Init+0xf0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00b      	beq.n	80024a0 <LL_TIM_Init+0x74>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a25      	ldr	r2, [pc, #148]	; (8002520 <LL_TIM_Init+0xf4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d007      	beq.n	80024a0 <LL_TIM_Init+0x74>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a24      	ldr	r2, [pc, #144]	; (8002524 <LL_TIM_Init+0xf8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d003      	beq.n	80024a0 <LL_TIM_Init+0x74>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a23      	ldr	r2, [pc, #140]	; (8002528 <LL_TIM_Init+0xfc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d106      	bne.n	80024ae <LL_TIM_Init+0x82>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a22      	ldr	r2, [pc, #136]	; (800252c <LL_TIM_Init+0x100>)
 80024a4:	401a      	ands	r2, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	0011      	movs	r1, r2
 80024bc:	0018      	movs	r0, r3
 80024be:	f7ff ff5f 	bl	8002380 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	001a      	movs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	0011      	movs	r1, r2
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7ff ff4b 	bl	8002368 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a0f      	ldr	r2, [pc, #60]	; (8002514 <LL_TIM_Init+0xe8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00b      	beq.n	80024f2 <LL_TIM_Init+0xc6>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a10      	ldr	r2, [pc, #64]	; (8002520 <LL_TIM_Init+0xf4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <LL_TIM_Init+0xc6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a0f      	ldr	r2, [pc, #60]	; (8002524 <LL_TIM_Init+0xf8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d003      	beq.n	80024f2 <LL_TIM_Init+0xc6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <LL_TIM_Init+0xfc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d106      	bne.n	8002500 <LL_TIM_Init+0xd4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	0011      	movs	r1, r2
 80024fa:	0018      	movs	r0, r3
 80024fc:	f7ff ff4c 	bl	8002398 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	0018      	movs	r0, r3
 8002504:	f7ff ff84 	bl	8002410 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002508:	2300      	movs	r3, #0
}
 800250a:	0018      	movs	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	b004      	add	sp, #16
 8002510:	bd80      	pop	{r7, pc}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	40012c00 	.word	0x40012c00
 8002518:	40000400 	.word	0x40000400
 800251c:	40002000 	.word	0x40002000
 8002520:	40014000 	.word	0x40014000
 8002524:	40014400 	.word	0x40014400
 8002528:	40014800 	.word	0x40014800
 800252c:	fffffcff 	.word	0xfffffcff

08002530 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800253c:	2317      	movs	r3, #23
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	015b      	lsls	r3, r3, #5
 800254a:	429a      	cmp	r2, r3
 800254c:	d036      	beq.n	80025bc <LL_TIM_OC_Init+0x8c>
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	015b      	lsls	r3, r3, #5
 8002554:	429a      	cmp	r2, r3
 8002556:	d83c      	bhi.n	80025d2 <LL_TIM_OC_Init+0xa2>
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	429a      	cmp	r2, r3
 8002560:	d021      	beq.n	80025a6 <LL_TIM_OC_Init+0x76>
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	429a      	cmp	r2, r3
 800256a:	d832      	bhi.n	80025d2 <LL_TIM_OC_Init+0xa2>
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d003      	beq.n	800257a <LL_TIM_OC_Init+0x4a>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b10      	cmp	r3, #16
 8002576:	d00b      	beq.n	8002590 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002578:	e02b      	b.n	80025d2 <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800257a:	2317      	movs	r3, #23
 800257c:	18fc      	adds	r4, r7, r3
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	0011      	movs	r1, r2
 8002584:	0018      	movs	r0, r3
 8002586:	f000 f82d 	bl	80025e4 <OC1Config>
 800258a:	0003      	movs	r3, r0
 800258c:	7023      	strb	r3, [r4, #0]
      break;
 800258e:	e021      	b.n	80025d4 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002590:	2317      	movs	r3, #23
 8002592:	18fc      	adds	r4, r7, r3
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	0011      	movs	r1, r2
 800259a:	0018      	movs	r0, r3
 800259c:	f000 f8a6 	bl	80026ec <OC2Config>
 80025a0:	0003      	movs	r3, r0
 80025a2:	7023      	strb	r3, [r4, #0]
      break;
 80025a4:	e016      	b.n	80025d4 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80025a6:	2317      	movs	r3, #23
 80025a8:	18fc      	adds	r4, r7, r3
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	0011      	movs	r1, r2
 80025b0:	0018      	movs	r0, r3
 80025b2:	f000 f925 	bl	8002800 <OC3Config>
 80025b6:	0003      	movs	r3, r0
 80025b8:	7023      	strb	r3, [r4, #0]
      break;
 80025ba:	e00b      	b.n	80025d4 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80025bc:	2317      	movs	r3, #23
 80025be:	18fc      	adds	r4, r7, r3
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	0011      	movs	r1, r2
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 f9a4 	bl	8002914 <OC4Config>
 80025cc:	0003      	movs	r3, r0
 80025ce:	7023      	strb	r3, [r4, #0]
      break;
 80025d0:	e000      	b.n	80025d4 <LL_TIM_OC_Init+0xa4>
      break;
 80025d2:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 80025d4:	2317      	movs	r3, #23
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	781b      	ldrb	r3, [r3, #0]
}
 80025da:	0018      	movs	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	b007      	add	sp, #28
 80025e0:	bd90      	pop	{r4, r7, pc}
	...

080025e4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	2201      	movs	r2, #1
 80025f4:	4393      	bics	r3, r2
 80025f6:	001a      	movs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2203      	movs	r2, #3
 8002612:	4393      	bics	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2270      	movs	r2, #112	; 0x70
 800261a:	4393      	bics	r3, r2
 800261c:	001a      	movs	r2, r3
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2202      	movs	r2, #2
 800262a:	4393      	bics	r3, r2
 800262c:	001a      	movs	r2, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2201      	movs	r2, #1
 800263a:	4393      	bics	r3, r2
 800263c:	001a      	movs	r2, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a22      	ldr	r2, [pc, #136]	; (80026d4 <OC1Config+0xf0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00b      	beq.n	8002666 <OC1Config+0x82>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a21      	ldr	r2, [pc, #132]	; (80026d8 <OC1Config+0xf4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d007      	beq.n	8002666 <OC1Config+0x82>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a20      	ldr	r2, [pc, #128]	; (80026dc <OC1Config+0xf8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d003      	beq.n	8002666 <OC1Config+0x82>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a1f      	ldr	r2, [pc, #124]	; (80026e0 <OC1Config+0xfc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d120      	bne.n	80026a8 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2208      	movs	r2, #8
 800266a:	4393      	bics	r3, r2
 800266c:	001a      	movs	r2, r3
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2204      	movs	r2, #4
 800267c:	4393      	bics	r3, r2
 800267e:	001a      	movs	r2, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4313      	orrs	r3, r2
 8002688:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4a15      	ldr	r2, [pc, #84]	; (80026e4 <OC1Config+0x100>)
 800268e:	401a      	ands	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4a13      	ldr	r2, [pc, #76]	; (80026e8 <OC1Config+0x104>)
 800269c:	401a      	ands	r2, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	0011      	movs	r1, r2
 80026bc:	0018      	movs	r0, r3
 80026be:	f7ff fe77 	bl	80023b0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b006      	add	sp, #24
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	40014000 	.word	0x40014000
 80026dc:	40014400 	.word	0x40014400
 80026e0:	40014800 	.word	0x40014800
 80026e4:	fffffeff 	.word	0xfffffeff
 80026e8:	fffffdff 	.word	0xfffffdff

080026ec <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	2210      	movs	r2, #16
 80026fc:	4393      	bics	r3, r2
 80026fe:	001a      	movs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4a31      	ldr	r2, [pc, #196]	; (80027e0 <OC2Config+0xf4>)
 800271a:	4013      	ands	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4a30      	ldr	r2, [pc, #192]	; (80027e4 <OC2Config+0xf8>)
 8002722:	401a      	ands	r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2220      	movs	r2, #32
 8002732:	4393      	bics	r3, r2
 8002734:	001a      	movs	r2, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2210      	movs	r2, #16
 8002744:	4393      	bics	r3, r2
 8002746:	001a      	movs	r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a24      	ldr	r2, [pc, #144]	; (80027e8 <OC2Config+0xfc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00b      	beq.n	8002772 <OC2Config+0x86>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a23      	ldr	r2, [pc, #140]	; (80027ec <OC2Config+0x100>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <OC2Config+0x86>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <OC2Config+0x104>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d003      	beq.n	8002772 <OC2Config+0x86>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a21      	ldr	r2, [pc, #132]	; (80027f4 <OC2Config+0x108>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d121      	bne.n	80027b6 <OC2Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2280      	movs	r2, #128	; 0x80
 8002776:	4393      	bics	r3, r2
 8002778:	001a      	movs	r2, r3
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	019b      	lsls	r3, r3, #6
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2240      	movs	r2, #64	; 0x40
 8002788:	4393      	bics	r3, r2
 800278a:	001a      	movs	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	019b      	lsls	r3, r3, #6
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <OC2Config+0x10c>)
 800279a:	401a      	ands	r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4a14      	ldr	r2, [pc, #80]	; (80027fc <OC2Config+0x110>)
 80027aa:	401a      	ands	r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	0011      	movs	r1, r2
 80027ca:	0018      	movs	r0, r3
 80027cc:	f7ff fdfc 	bl	80023c8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b006      	add	sp, #24
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	fffffcff 	.word	0xfffffcff
 80027e4:	ffff8fff 	.word	0xffff8fff
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40014000 	.word	0x40014000
 80027f0:	40014400 	.word	0x40014400
 80027f4:	40014800 	.word	0x40014800
 80027f8:	fffffbff 	.word	0xfffffbff
 80027fc:	fffff7ff 	.word	0xfffff7ff

08002800 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4a37      	ldr	r2, [pc, #220]	; (80028ec <OC3Config+0xec>)
 8002810:	401a      	ands	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2203      	movs	r2, #3
 800282c:	4393      	bics	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2270      	movs	r2, #112	; 0x70
 8002834:	4393      	bics	r3, r2
 8002836:	001a      	movs	r2, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	4a2b      	ldr	r2, [pc, #172]	; (80028f0 <OC3Config+0xf0>)
 8002844:	401a      	ands	r2, r3
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	4a26      	ldr	r2, [pc, #152]	; (80028ec <OC3Config+0xec>)
 8002854:	401a      	ands	r2, r3
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a24      	ldr	r2, [pc, #144]	; (80028f4 <OC3Config+0xf4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00b      	beq.n	8002880 <OC3Config+0x80>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a23      	ldr	r2, [pc, #140]	; (80028f8 <OC3Config+0xf8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d007      	beq.n	8002880 <OC3Config+0x80>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a22      	ldr	r2, [pc, #136]	; (80028fc <OC3Config+0xfc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d003      	beq.n	8002880 <OC3Config+0x80>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a21      	ldr	r2, [pc, #132]	; (8002900 <OC3Config+0x100>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d11f      	bne.n	80028c0 <OC3Config+0xc0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	4a20      	ldr	r2, [pc, #128]	; (8002904 <OC3Config+0x104>)
 8002884:	401a      	ands	r2, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	029b      	lsls	r3, r3, #10
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <OC3Config+0x108>)
 8002894:	401a      	ands	r2, r3
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	029b      	lsls	r3, r3, #10
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4a1a      	ldr	r2, [pc, #104]	; (800290c <OC3Config+0x10c>)
 80028a4:	401a      	ands	r2, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4a17      	ldr	r2, [pc, #92]	; (8002910 <OC3Config+0x110>)
 80028b4:	401a      	ands	r2, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	015b      	lsls	r3, r3, #5
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	0011      	movs	r1, r2
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7ff fd83 	bl	80023e0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	0018      	movs	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b006      	add	sp, #24
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	fffffeff 	.word	0xfffffeff
 80028f0:	fffffdff 	.word	0xfffffdff
 80028f4:	40012c00 	.word	0x40012c00
 80028f8:	40014000 	.word	0x40014000
 80028fc:	40014400 	.word	0x40014400
 8002900:	40014800 	.word	0x40014800
 8002904:	fffff7ff 	.word	0xfffff7ff
 8002908:	fffffbff 	.word	0xfffffbff
 800290c:	ffffefff 	.word	0xffffefff
 8002910:	ffffdfff 	.word	0xffffdfff

08002914 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <OC4Config+0xbc>)
 8002924:	401a      	ands	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a25      	ldr	r2, [pc, #148]	; (80029d4 <OC4Config+0xc0>)
 8002940:	4013      	ands	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a24      	ldr	r2, [pc, #144]	; (80029d8 <OC4Config+0xc4>)
 8002948:	401a      	ands	r2, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4a21      	ldr	r2, [pc, #132]	; (80029dc <OC4Config+0xc8>)
 8002958:	401a      	ands	r2, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	031b      	lsls	r3, r3, #12
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4a1a      	ldr	r2, [pc, #104]	; (80029d0 <OC4Config+0xbc>)
 8002968:	401a      	ands	r2, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	031b      	lsls	r3, r3, #12
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a1a      	ldr	r2, [pc, #104]	; (80029e0 <OC4Config+0xcc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00b      	beq.n	8002994 <OC4Config+0x80>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <OC4Config+0xd0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <OC4Config+0x80>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a18      	ldr	r2, [pc, #96]	; (80029e8 <OC4Config+0xd4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d003      	beq.n	8002994 <OC4Config+0x80>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a17      	ldr	r2, [pc, #92]	; (80029ec <OC4Config+0xd8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d107      	bne.n	80029a4 <OC4Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <OC4Config+0xdc>)
 8002998:	401a      	ands	r2, r3
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	019b      	lsls	r3, r3, #6
 80029a0:	4313      	orrs	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	0011      	movs	r1, r2
 80029b8:	0018      	movs	r0, r3
 80029ba:	f7ff fd1d 	bl	80023f8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	0018      	movs	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b006      	add	sp, #24
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	ffffefff 	.word	0xffffefff
 80029d4:	fffffcff 	.word	0xfffffcff
 80029d8:	ffff8fff 	.word	0xffff8fff
 80029dc:	ffffdfff 	.word	0xffffdfff
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40014000 	.word	0x40014000
 80029e8:	40014400 	.word	0x40014400
 80029ec:	40014800 	.word	0x40014800
 80029f0:	ffffbfff 	.word	0xffffbfff

080029f4 <LL_USART_IsEnabled>:
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2201      	movs	r2, #1
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <LL_USART_IsEnabled+0x18>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <LL_USART_IsEnabled+0x1a>
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	0018      	movs	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b002      	add	sp, #8
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <LL_USART_SetStopBitsLength>:
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4a05      	ldr	r2, [pc, #20]	; (8002a3c <LL_USART_SetStopBitsLength+0x24>)
 8002a28:	401a      	ands	r2, r3
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	605a      	str	r2, [r3, #4]
}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b002      	add	sp, #8
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	ffffcfff 	.word	0xffffcfff

08002a40 <LL_USART_SetHWFlowCtrl>:
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <LL_USART_SetHWFlowCtrl+0x24>)
 8002a50:	401a      	ands	r2, r3
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	609a      	str	r2, [r3, #8]
}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b002      	add	sp, #8
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	fffffcff 	.word	0xfffffcff

08002a68 <LL_USART_SetBaudRate>:
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d11c      	bne.n	8002aba <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	005a      	lsls	r2, r3, #1
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	18d3      	adds	r3, r2, r3
 8002a8a:	6839      	ldr	r1, [r7, #0]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7fd fb43 	bl	8000118 <__udivsi3>
 8002a92:	0003      	movs	r3, r0
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	4a10      	ldr	r2, [pc, #64]	; (8002adc <LL_USART_SetBaudRate+0x74>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	085b      	lsrs	r3, r3, #1
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	001a      	movs	r2, r3
 8002aa8:	2307      	movs	r3, #7
 8002aaa:	4013      	ands	r3, r2
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	60da      	str	r2, [r3, #12]
}
 8002ab8:	e00c      	b.n	8002ad4 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	085a      	lsrs	r2, r3, #1
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	18d3      	adds	r3, r2, r3
 8002ac2:	6839      	ldr	r1, [r7, #0]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7fd fb27 	bl	8000118 <__udivsi3>
 8002aca:	0003      	movs	r3, r0
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	001a      	movs	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	60da      	str	r2, [r3, #12]
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b006      	add	sp, #24
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	0000fff0 	.word	0x0000fff0

08002ae0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b089      	sub	sp, #36	; 0x24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002aea:	231f      	movs	r3, #31
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff ff7b 	bl	80029f4 <LL_USART_IsEnabled>
 8002afe:	1e03      	subs	r3, r0, #0
 8002b00:	d000      	beq.n	8002b04 <LL_USART_Init+0x24>
 8002b02:	e090      	b.n	8002c26 <LL_USART_Init+0x146>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a4a      	ldr	r2, [pc, #296]	; (8002c34 <LL_USART_Init+0x154>)
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4319      	orrs	r1, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	4319      	orrs	r1, r3
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	0011      	movs	r1, r2
 8002b30:	0018      	movs	r0, r3
 8002b32:	f7ff ff71 	bl	8002a18 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	0011      	movs	r1, r2
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f7ff ff7e 	bl	8002a40 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a3c      	ldr	r2, [pc, #240]	; (8002c38 <LL_USART_Init+0x158>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d105      	bne.n	8002b58 <LL_USART_Init+0x78>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7ff faa5 	bl	800209c <LL_RCC_GetUSARTClockFreq>
 8002b52:	0003      	movs	r3, r0
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	e053      	b.n	8002c00 <LL_USART_Init+0x120>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a38      	ldr	r2, [pc, #224]	; (8002c3c <LL_USART_Init+0x15c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d105      	bne.n	8002b6c <LL_USART_Init+0x8c>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002b60:	2010      	movs	r0, #16
 8002b62:	f7ff fa9b 	bl	800209c <LL_RCC_GetUSARTClockFreq>
 8002b66:	0003      	movs	r3, r0
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	e049      	b.n	8002c00 <LL_USART_Init+0x120>
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#endif /* USART2 */
#if defined(USART3)
    else if (USARTx == USART3)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a34      	ldr	r2, [pc, #208]	; (8002c40 <LL_USART_Init+0x160>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d105      	bne.n	8002b80 <LL_USART_Init+0xa0>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002b74:	2012      	movs	r0, #18
 8002b76:	f7ff fa91 	bl	800209c <LL_RCC_GetUSARTClockFreq>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	e03f      	b.n	8002c00 <LL_USART_Init+0x120>
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a30      	ldr	r2, [pc, #192]	; (8002c44 <LL_USART_Init+0x164>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d108      	bne.n	8002b9a <LL_USART_Init+0xba>
    {
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002b88:	240c      	movs	r4, #12
 8002b8a:	193b      	adds	r3, r7, r4
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f7ff fa67 	bl	8002060 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002b92:	193b      	adds	r3, r7, r4
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	61bb      	str	r3, [r7, #24]
 8002b98:	e032      	b.n	8002c00 <LL_USART_Init+0x120>
    }
#endif /* USART4 */
#if defined(USART5)
    else if (USARTx == USART5)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a2a      	ldr	r2, [pc, #168]	; (8002c48 <LL_USART_Init+0x168>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d108      	bne.n	8002bb4 <LL_USART_Init+0xd4>
    {
      /* USART5 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002ba2:	240c      	movs	r4, #12
 8002ba4:	193b      	adds	r3, r7, r4
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f7ff fa5a 	bl	8002060 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002bac:	193b      	adds	r3, r7, r4
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	e025      	b.n	8002c00 <LL_USART_Init+0x120>
    }
#endif /* USART5 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a25      	ldr	r2, [pc, #148]	; (8002c4c <LL_USART_Init+0x16c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d108      	bne.n	8002bce <LL_USART_Init+0xee>
    {
      /* USART6 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002bbc:	240c      	movs	r4, #12
 8002bbe:	193b      	adds	r3, r7, r4
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7ff fa4d 	bl	8002060 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002bc6:	193b      	adds	r3, r7, r4
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	61bb      	str	r3, [r7, #24]
 8002bcc:	e018      	b.n	8002c00 <LL_USART_Init+0x120>
    }
#endif /* USART6 */
#if defined(USART7)
    else if (USARTx == USART7)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <LL_USART_Init+0x170>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d108      	bne.n	8002be8 <LL_USART_Init+0x108>
    {
      /* USART7 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002bd6:	240c      	movs	r4, #12
 8002bd8:	193b      	adds	r3, r7, r4
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7ff fa40 	bl	8002060 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002be0:	193b      	adds	r3, r7, r4
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	e00b      	b.n	8002c00 <LL_USART_Init+0x120>
    }
#endif /* USART7 */
#if defined(USART8)
    else if (USARTx == USART8)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a1a      	ldr	r2, [pc, #104]	; (8002c54 <LL_USART_Init+0x174>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d107      	bne.n	8002c00 <LL_USART_Init+0x120>
    {
      /* USART8 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002bf0:	240c      	movs	r4, #12
 8002bf2:	193b      	adds	r3, r7, r4
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7ff fa33 	bl	8002060 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00f      	beq.n	8002c26 <LL_USART_Init+0x146>
        && (USART_InitStruct->BaudRate != 0U))
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <LL_USART_Init+0x146>
    {
      status = SUCCESS;
 8002c0e:	231f      	movs	r3, #31
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69b9      	ldr	r1, [r7, #24]
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ff21 	bl	8002a68 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002c26:	231f      	movs	r3, #31
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	781b      	ldrb	r3, [r3, #0]
}
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b009      	add	sp, #36	; 0x24
 8002c32:	bd90      	pop	{r4, r7, pc}
 8002c34:	efff69f3 	.word	0xefff69f3
 8002c38:	40013800 	.word	0x40013800
 8002c3c:	40004400 	.word	0x40004400
 8002c40:	40004800 	.word	0x40004800
 8002c44:	40004c00 	.word	0x40004c00
 8002c48:	40005000 	.word	0x40005000
 8002c4c:	40011400 	.word	0x40011400
 8002c50:	40011800 	.word	0x40011800
 8002c54:	40011c00 	.word	0x40011c00

08002c58 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002c62:	6839      	ldr	r1, [r7, #0]
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fd fa57 	bl	8000118 <__udivsi3>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	001a      	movs	r2, r3
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <LL_InitTick+0x30>)
 8002c70:	3a01      	subs	r2, #1
 8002c72:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <LL_InitTick+0x30>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7a:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <LL_InitTick+0x30>)
 8002c7c:	2205      	movs	r2, #5
 8002c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b002      	add	sp, #8
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	e000e010 	.word	0xe000e010

08002c8c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002c94:	23fa      	movs	r3, #250	; 0xfa
 8002c96:	009a      	lsls	r2, r3, #2
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	0011      	movs	r1, r2
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff ffdb 	bl	8002c58 <LL_InitTick>
}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b002      	add	sp, #8
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <LL_SetSystemCoreClock+0x18>)
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	601a      	str	r2, [r3, #0]
}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b002      	add	sp, #8
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	20000000 	.word	0x20000000

08002cc8 <__errno>:
 8002cc8:	4b01      	ldr	r3, [pc, #4]	; (8002cd0 <__errno+0x8>)
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	4770      	bx	lr
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <__libc_init_array>:
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	2600      	movs	r6, #0
 8002cd8:	4d0c      	ldr	r5, [pc, #48]	; (8002d0c <__libc_init_array+0x38>)
 8002cda:	4c0d      	ldr	r4, [pc, #52]	; (8002d10 <__libc_init_array+0x3c>)
 8002cdc:	1b64      	subs	r4, r4, r5
 8002cde:	10a4      	asrs	r4, r4, #2
 8002ce0:	42a6      	cmp	r6, r4
 8002ce2:	d109      	bne.n	8002cf8 <__libc_init_array+0x24>
 8002ce4:	2600      	movs	r6, #0
 8002ce6:	f001 f9af 	bl	8004048 <_init>
 8002cea:	4d0a      	ldr	r5, [pc, #40]	; (8002d14 <__libc_init_array+0x40>)
 8002cec:	4c0a      	ldr	r4, [pc, #40]	; (8002d18 <__libc_init_array+0x44>)
 8002cee:	1b64      	subs	r4, r4, r5
 8002cf0:	10a4      	asrs	r4, r4, #2
 8002cf2:	42a6      	cmp	r6, r4
 8002cf4:	d105      	bne.n	8002d02 <__libc_init_array+0x2e>
 8002cf6:	bd70      	pop	{r4, r5, r6, pc}
 8002cf8:	00b3      	lsls	r3, r6, #2
 8002cfa:	58eb      	ldr	r3, [r5, r3]
 8002cfc:	4798      	blx	r3
 8002cfe:	3601      	adds	r6, #1
 8002d00:	e7ee      	b.n	8002ce0 <__libc_init_array+0xc>
 8002d02:	00b3      	lsls	r3, r6, #2
 8002d04:	58eb      	ldr	r3, [r5, r3]
 8002d06:	4798      	blx	r3
 8002d08:	3601      	adds	r6, #1
 8002d0a:	e7f2      	b.n	8002cf2 <__libc_init_array+0x1e>
 8002d0c:	0800416c 	.word	0x0800416c
 8002d10:	0800416c 	.word	0x0800416c
 8002d14:	0800416c 	.word	0x0800416c
 8002d18:	08004170 	.word	0x08004170

08002d1c <memset>:
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	1882      	adds	r2, r0, r2
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d100      	bne.n	8002d26 <memset+0xa>
 8002d24:	4770      	bx	lr
 8002d26:	7019      	strb	r1, [r3, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	e7f9      	b.n	8002d20 <memset+0x4>

08002d2c <iprintf>:
 8002d2c:	b40f      	push	{r0, r1, r2, r3}
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <iprintf+0x30>)
 8002d30:	b513      	push	{r0, r1, r4, lr}
 8002d32:	681c      	ldr	r4, [r3, #0]
 8002d34:	2c00      	cmp	r4, #0
 8002d36:	d005      	beq.n	8002d44 <iprintf+0x18>
 8002d38:	69a3      	ldr	r3, [r4, #24]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <iprintf+0x18>
 8002d3e:	0020      	movs	r0, r4
 8002d40:	f000 fb6c 	bl	800341c <__sinit>
 8002d44:	ab05      	add	r3, sp, #20
 8002d46:	0020      	movs	r0, r4
 8002d48:	9a04      	ldr	r2, [sp, #16]
 8002d4a:	68a1      	ldr	r1, [r4, #8]
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	f000 fd89 	bl	8003864 <_vfiprintf_r>
 8002d52:	bc16      	pop	{r1, r2, r4}
 8002d54:	bc08      	pop	{r3}
 8002d56:	b004      	add	sp, #16
 8002d58:	4718      	bx	r3
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	20000004 	.word	0x20000004

08002d60 <putchar>:
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <putchar+0x24>)
 8002d62:	b570      	push	{r4, r5, r6, lr}
 8002d64:	681c      	ldr	r4, [r3, #0]
 8002d66:	0005      	movs	r5, r0
 8002d68:	2c00      	cmp	r4, #0
 8002d6a:	d005      	beq.n	8002d78 <putchar+0x18>
 8002d6c:	69a3      	ldr	r3, [r4, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <putchar+0x18>
 8002d72:	0020      	movs	r0, r4
 8002d74:	f000 fb52 	bl	800341c <__sinit>
 8002d78:	0029      	movs	r1, r5
 8002d7a:	0020      	movs	r0, r4
 8002d7c:	68a2      	ldr	r2, [r4, #8]
 8002d7e:	f001 f82d 	bl	8003ddc <_putc_r>
 8002d82:	bd70      	pop	{r4, r5, r6, pc}
 8002d84:	20000004 	.word	0x20000004

08002d88 <_puts_r>:
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	0005      	movs	r5, r0
 8002d8c:	000e      	movs	r6, r1
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	d004      	beq.n	8002d9c <_puts_r+0x14>
 8002d92:	6983      	ldr	r3, [r0, #24]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <_puts_r+0x14>
 8002d98:	f000 fb40 	bl	800341c <__sinit>
 8002d9c:	69ab      	ldr	r3, [r5, #24]
 8002d9e:	68ac      	ldr	r4, [r5, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <_puts_r+0x22>
 8002da4:	0028      	movs	r0, r5
 8002da6:	f000 fb39 	bl	800341c <__sinit>
 8002daa:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <_puts_r+0xd8>)
 8002dac:	429c      	cmp	r4, r3
 8002dae:	d122      	bne.n	8002df6 <_puts_r+0x6e>
 8002db0:	686c      	ldr	r4, [r5, #4]
 8002db2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002db4:	07db      	lsls	r3, r3, #31
 8002db6:	d405      	bmi.n	8002dc4 <_puts_r+0x3c>
 8002db8:	89a3      	ldrh	r3, [r4, #12]
 8002dba:	059b      	lsls	r3, r3, #22
 8002dbc:	d402      	bmi.n	8002dc4 <_puts_r+0x3c>
 8002dbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dc0:	f000 fbcd 	bl	800355e <__retarget_lock_acquire_recursive>
 8002dc4:	89a3      	ldrh	r3, [r4, #12]
 8002dc6:	071b      	lsls	r3, r3, #28
 8002dc8:	d502      	bpl.n	8002dd0 <_puts_r+0x48>
 8002dca:	6923      	ldr	r3, [r4, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d129      	bne.n	8002e24 <_puts_r+0x9c>
 8002dd0:	0021      	movs	r1, r4
 8002dd2:	0028      	movs	r0, r5
 8002dd4:	f000 f97c 	bl	80030d0 <__swsetup_r>
 8002dd8:	2800      	cmp	r0, #0
 8002dda:	d023      	beq.n	8002e24 <_puts_r+0x9c>
 8002ddc:	2501      	movs	r5, #1
 8002dde:	426d      	negs	r5, r5
 8002de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002de2:	07db      	lsls	r3, r3, #31
 8002de4:	d405      	bmi.n	8002df2 <_puts_r+0x6a>
 8002de6:	89a3      	ldrh	r3, [r4, #12]
 8002de8:	059b      	lsls	r3, r3, #22
 8002dea:	d402      	bmi.n	8002df2 <_puts_r+0x6a>
 8002dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dee:	f000 fbb7 	bl	8003560 <__retarget_lock_release_recursive>
 8002df2:	0028      	movs	r0, r5
 8002df4:	bd70      	pop	{r4, r5, r6, pc}
 8002df6:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <_puts_r+0xdc>)
 8002df8:	429c      	cmp	r4, r3
 8002dfa:	d101      	bne.n	8002e00 <_puts_r+0x78>
 8002dfc:	68ac      	ldr	r4, [r5, #8]
 8002dfe:	e7d8      	b.n	8002db2 <_puts_r+0x2a>
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <_puts_r+0xe0>)
 8002e02:	429c      	cmp	r4, r3
 8002e04:	d1d5      	bne.n	8002db2 <_puts_r+0x2a>
 8002e06:	68ec      	ldr	r4, [r5, #12]
 8002e08:	e7d3      	b.n	8002db2 <_puts_r+0x2a>
 8002e0a:	3601      	adds	r6, #1
 8002e0c:	60a3      	str	r3, [r4, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	da04      	bge.n	8002e1c <_puts_r+0x94>
 8002e12:	69a2      	ldr	r2, [r4, #24]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	dc16      	bgt.n	8002e46 <_puts_r+0xbe>
 8002e18:	290a      	cmp	r1, #10
 8002e1a:	d014      	beq.n	8002e46 <_puts_r+0xbe>
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	6022      	str	r2, [r4, #0]
 8002e22:	7019      	strb	r1, [r3, #0]
 8002e24:	68a3      	ldr	r3, [r4, #8]
 8002e26:	7831      	ldrb	r1, [r6, #0]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	2900      	cmp	r1, #0
 8002e2c:	d1ed      	bne.n	8002e0a <_puts_r+0x82>
 8002e2e:	60a3      	str	r3, [r4, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	da0f      	bge.n	8002e54 <_puts_r+0xcc>
 8002e34:	0028      	movs	r0, r5
 8002e36:	0022      	movs	r2, r4
 8002e38:	310a      	adds	r1, #10
 8002e3a:	f000 f8f3 	bl	8003024 <__swbuf_r>
 8002e3e:	250a      	movs	r5, #10
 8002e40:	1c43      	adds	r3, r0, #1
 8002e42:	d1cd      	bne.n	8002de0 <_puts_r+0x58>
 8002e44:	e7ca      	b.n	8002ddc <_puts_r+0x54>
 8002e46:	0022      	movs	r2, r4
 8002e48:	0028      	movs	r0, r5
 8002e4a:	f000 f8eb 	bl	8003024 <__swbuf_r>
 8002e4e:	1c43      	adds	r3, r0, #1
 8002e50:	d1e8      	bne.n	8002e24 <_puts_r+0x9c>
 8002e52:	e7c3      	b.n	8002ddc <_puts_r+0x54>
 8002e54:	250a      	movs	r5, #10
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	6022      	str	r2, [r4, #0]
 8002e5c:	701d      	strb	r5, [r3, #0]
 8002e5e:	e7bf      	b.n	8002de0 <_puts_r+0x58>
 8002e60:	080040f8 	.word	0x080040f8
 8002e64:	08004118 	.word	0x08004118
 8002e68:	080040d8 	.word	0x080040d8

08002e6c <puts>:
 8002e6c:	b510      	push	{r4, lr}
 8002e6e:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <puts+0x10>)
 8002e70:	0001      	movs	r1, r0
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	f7ff ff88 	bl	8002d88 <_puts_r>
 8002e78:	bd10      	pop	{r4, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	20000004 	.word	0x20000004

08002e80 <setbuf>:
 8002e80:	424a      	negs	r2, r1
 8002e82:	414a      	adcs	r2, r1
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	b510      	push	{r4, lr}
 8002e88:	0052      	lsls	r2, r2, #1
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	f000 f802 	bl	8002e94 <setvbuf>
 8002e90:	bd10      	pop	{r4, pc}
	...

08002e94 <setvbuf>:
 8002e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e96:	001d      	movs	r5, r3
 8002e98:	4b5d      	ldr	r3, [pc, #372]	; (8003010 <setvbuf+0x17c>)
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	681e      	ldr	r6, [r3, #0]
 8002e9e:	0004      	movs	r4, r0
 8002ea0:	000f      	movs	r7, r1
 8002ea2:	9200      	str	r2, [sp, #0]
 8002ea4:	2e00      	cmp	r6, #0
 8002ea6:	d005      	beq.n	8002eb4 <setvbuf+0x20>
 8002ea8:	69b3      	ldr	r3, [r6, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d102      	bne.n	8002eb4 <setvbuf+0x20>
 8002eae:	0030      	movs	r0, r6
 8002eb0:	f000 fab4 	bl	800341c <__sinit>
 8002eb4:	4b57      	ldr	r3, [pc, #348]	; (8003014 <setvbuf+0x180>)
 8002eb6:	429c      	cmp	r4, r3
 8002eb8:	d161      	bne.n	8002f7e <setvbuf+0xea>
 8002eba:	6874      	ldr	r4, [r6, #4]
 8002ebc:	9b00      	ldr	r3, [sp, #0]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d005      	beq.n	8002ece <setvbuf+0x3a>
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d900      	bls.n	8002ec8 <setvbuf+0x34>
 8002ec6:	e09d      	b.n	8003004 <setvbuf+0x170>
 8002ec8:	2d00      	cmp	r5, #0
 8002eca:	da00      	bge.n	8002ece <setvbuf+0x3a>
 8002ecc:	e09a      	b.n	8003004 <setvbuf+0x170>
 8002ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ed0:	07db      	lsls	r3, r3, #31
 8002ed2:	d405      	bmi.n	8002ee0 <setvbuf+0x4c>
 8002ed4:	89a3      	ldrh	r3, [r4, #12]
 8002ed6:	059b      	lsls	r3, r3, #22
 8002ed8:	d402      	bmi.n	8002ee0 <setvbuf+0x4c>
 8002eda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002edc:	f000 fb3f 	bl	800355e <__retarget_lock_acquire_recursive>
 8002ee0:	0021      	movs	r1, r4
 8002ee2:	0030      	movs	r0, r6
 8002ee4:	f000 f9f8 	bl	80032d8 <_fflush_r>
 8002ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002eea:	2900      	cmp	r1, #0
 8002eec:	d008      	beq.n	8002f00 <setvbuf+0x6c>
 8002eee:	0023      	movs	r3, r4
 8002ef0:	3344      	adds	r3, #68	; 0x44
 8002ef2:	4299      	cmp	r1, r3
 8002ef4:	d002      	beq.n	8002efc <setvbuf+0x68>
 8002ef6:	0030      	movs	r0, r6
 8002ef8:	f000 fbaa 	bl	8003650 <_free_r>
 8002efc:	2300      	movs	r3, #0
 8002efe:	6363      	str	r3, [r4, #52]	; 0x34
 8002f00:	2300      	movs	r3, #0
 8002f02:	61a3      	str	r3, [r4, #24]
 8002f04:	6063      	str	r3, [r4, #4]
 8002f06:	89a3      	ldrh	r3, [r4, #12]
 8002f08:	061b      	lsls	r3, r3, #24
 8002f0a:	d503      	bpl.n	8002f14 <setvbuf+0x80>
 8002f0c:	0030      	movs	r0, r6
 8002f0e:	6921      	ldr	r1, [r4, #16]
 8002f10:	f000 fb9e 	bl	8003650 <_free_r>
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	4a40      	ldr	r2, [pc, #256]	; (8003018 <setvbuf+0x184>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	81a3      	strh	r3, [r4, #12]
 8002f1c:	9b00      	ldr	r3, [sp, #0]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d100      	bne.n	8002f24 <setvbuf+0x90>
 8002f22:	e069      	b.n	8002ff8 <setvbuf+0x164>
 8002f24:	ab03      	add	r3, sp, #12
 8002f26:	0021      	movs	r1, r4
 8002f28:	0030      	movs	r0, r6
 8002f2a:	aa02      	add	r2, sp, #8
 8002f2c:	f000 fb1a 	bl	8003564 <__swhatbuf_r>
 8002f30:	89a3      	ldrh	r3, [r4, #12]
 8002f32:	4303      	orrs	r3, r0
 8002f34:	81a3      	strh	r3, [r4, #12]
 8002f36:	2d00      	cmp	r5, #0
 8002f38:	d12b      	bne.n	8002f92 <setvbuf+0xfe>
 8002f3a:	9d02      	ldr	r5, [sp, #8]
 8002f3c:	0028      	movs	r0, r5
 8002f3e:	f000 fb7d 	bl	800363c <malloc>
 8002f42:	1e07      	subs	r7, r0, #0
 8002f44:	d153      	bne.n	8002fee <setvbuf+0x15a>
 8002f46:	9b02      	ldr	r3, [sp, #8]
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	42ab      	cmp	r3, r5
 8002f4c:	d149      	bne.n	8002fe2 <setvbuf+0x14e>
 8002f4e:	2501      	movs	r5, #1
 8002f50:	426d      	negs	r5, r5
 8002f52:	2302      	movs	r3, #2
 8002f54:	89a2      	ldrh	r2, [r4, #12]
 8002f56:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60a2      	str	r2, [r4, #8]
 8002f5e:	0022      	movs	r2, r4
 8002f60:	3247      	adds	r2, #71	; 0x47
 8002f62:	6022      	str	r2, [r4, #0]
 8002f64:	6122      	str	r2, [r4, #16]
 8002f66:	2201      	movs	r2, #1
 8002f68:	b21b      	sxth	r3, r3
 8002f6a:	81a3      	strh	r3, [r4, #12]
 8002f6c:	6162      	str	r2, [r4, #20]
 8002f6e:	4211      	tst	r1, r2
 8002f70:	d134      	bne.n	8002fdc <setvbuf+0x148>
 8002f72:	059b      	lsls	r3, r3, #22
 8002f74:	d432      	bmi.n	8002fdc <setvbuf+0x148>
 8002f76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f78:	f000 faf2 	bl	8003560 <__retarget_lock_release_recursive>
 8002f7c:	e02e      	b.n	8002fdc <setvbuf+0x148>
 8002f7e:	4b27      	ldr	r3, [pc, #156]	; (800301c <setvbuf+0x188>)
 8002f80:	429c      	cmp	r4, r3
 8002f82:	d101      	bne.n	8002f88 <setvbuf+0xf4>
 8002f84:	68b4      	ldr	r4, [r6, #8]
 8002f86:	e799      	b.n	8002ebc <setvbuf+0x28>
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <setvbuf+0x18c>)
 8002f8a:	429c      	cmp	r4, r3
 8002f8c:	d196      	bne.n	8002ebc <setvbuf+0x28>
 8002f8e:	68f4      	ldr	r4, [r6, #12]
 8002f90:	e794      	b.n	8002ebc <setvbuf+0x28>
 8002f92:	2f00      	cmp	r7, #0
 8002f94:	d0d2      	beq.n	8002f3c <setvbuf+0xa8>
 8002f96:	69b3      	ldr	r3, [r6, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <setvbuf+0x10e>
 8002f9c:	0030      	movs	r0, r6
 8002f9e:	f000 fa3d 	bl	800341c <__sinit>
 8002fa2:	9b00      	ldr	r3, [sp, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d102      	bne.n	8002fae <setvbuf+0x11a>
 8002fa8:	89a2      	ldrh	r2, [r4, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	81a3      	strh	r3, [r4, #12]
 8002fae:	89a2      	ldrh	r2, [r4, #12]
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	0011      	movs	r1, r2
 8002fb4:	6027      	str	r7, [r4, #0]
 8002fb6:	6127      	str	r7, [r4, #16]
 8002fb8:	6165      	str	r5, [r4, #20]
 8002fba:	4019      	ands	r1, r3
 8002fbc:	421a      	tst	r2, r3
 8002fbe:	d01f      	beq.n	8003000 <setvbuf+0x16c>
 8002fc0:	07d3      	lsls	r3, r2, #31
 8002fc2:	d51b      	bpl.n	8002ffc <setvbuf+0x168>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	426d      	negs	r5, r5
 8002fc8:	60a3      	str	r3, [r4, #8]
 8002fca:	61a5      	str	r5, [r4, #24]
 8002fcc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002fce:	2301      	movs	r3, #1
 8002fd0:	000d      	movs	r5, r1
 8002fd2:	401d      	ands	r5, r3
 8002fd4:	4219      	tst	r1, r3
 8002fd6:	d118      	bne.n	800300a <setvbuf+0x176>
 8002fd8:	0593      	lsls	r3, r2, #22
 8002fda:	d5cc      	bpl.n	8002f76 <setvbuf+0xe2>
 8002fdc:	0028      	movs	r0, r5
 8002fde:	b005      	add	sp, #20
 8002fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe2:	9801      	ldr	r0, [sp, #4]
 8002fe4:	f000 fb2a 	bl	800363c <malloc>
 8002fe8:	9d01      	ldr	r5, [sp, #4]
 8002fea:	1e07      	subs	r7, r0, #0
 8002fec:	d0af      	beq.n	8002f4e <setvbuf+0xba>
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	89a2      	ldrh	r2, [r4, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	81a3      	strh	r3, [r4, #12]
 8002ff6:	e7ce      	b.n	8002f96 <setvbuf+0x102>
 8002ff8:	2500      	movs	r5, #0
 8002ffa:	e7aa      	b.n	8002f52 <setvbuf+0xbe>
 8002ffc:	60a5      	str	r5, [r4, #8]
 8002ffe:	e7e5      	b.n	8002fcc <setvbuf+0x138>
 8003000:	60a1      	str	r1, [r4, #8]
 8003002:	e7e3      	b.n	8002fcc <setvbuf+0x138>
 8003004:	2501      	movs	r5, #1
 8003006:	426d      	negs	r5, r5
 8003008:	e7e8      	b.n	8002fdc <setvbuf+0x148>
 800300a:	2500      	movs	r5, #0
 800300c:	e7e6      	b.n	8002fdc <setvbuf+0x148>
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	20000004 	.word	0x20000004
 8003014:	080040f8 	.word	0x080040f8
 8003018:	fffff35c 	.word	0xfffff35c
 800301c:	08004118 	.word	0x08004118
 8003020:	080040d8 	.word	0x080040d8

08003024 <__swbuf_r>:
 8003024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003026:	0005      	movs	r5, r0
 8003028:	000e      	movs	r6, r1
 800302a:	0014      	movs	r4, r2
 800302c:	2800      	cmp	r0, #0
 800302e:	d004      	beq.n	800303a <__swbuf_r+0x16>
 8003030:	6983      	ldr	r3, [r0, #24]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <__swbuf_r+0x16>
 8003036:	f000 f9f1 	bl	800341c <__sinit>
 800303a:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <__swbuf_r+0xa0>)
 800303c:	429c      	cmp	r4, r3
 800303e:	d12e      	bne.n	800309e <__swbuf_r+0x7a>
 8003040:	686c      	ldr	r4, [r5, #4]
 8003042:	69a3      	ldr	r3, [r4, #24]
 8003044:	60a3      	str	r3, [r4, #8]
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	071b      	lsls	r3, r3, #28
 800304a:	d532      	bpl.n	80030b2 <__swbuf_r+0x8e>
 800304c:	6923      	ldr	r3, [r4, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d02f      	beq.n	80030b2 <__swbuf_r+0x8e>
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	6922      	ldr	r2, [r4, #16]
 8003056:	b2f7      	uxtb	r7, r6
 8003058:	1a98      	subs	r0, r3, r2
 800305a:	6963      	ldr	r3, [r4, #20]
 800305c:	b2f6      	uxtb	r6, r6
 800305e:	4283      	cmp	r3, r0
 8003060:	dc05      	bgt.n	800306e <__swbuf_r+0x4a>
 8003062:	0021      	movs	r1, r4
 8003064:	0028      	movs	r0, r5
 8003066:	f000 f937 	bl	80032d8 <_fflush_r>
 800306a:	2800      	cmp	r0, #0
 800306c:	d127      	bne.n	80030be <__swbuf_r+0x9a>
 800306e:	68a3      	ldr	r3, [r4, #8]
 8003070:	3001      	adds	r0, #1
 8003072:	3b01      	subs	r3, #1
 8003074:	60a3      	str	r3, [r4, #8]
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	6022      	str	r2, [r4, #0]
 800307c:	701f      	strb	r7, [r3, #0]
 800307e:	6963      	ldr	r3, [r4, #20]
 8003080:	4283      	cmp	r3, r0
 8003082:	d004      	beq.n	800308e <__swbuf_r+0x6a>
 8003084:	89a3      	ldrh	r3, [r4, #12]
 8003086:	07db      	lsls	r3, r3, #31
 8003088:	d507      	bpl.n	800309a <__swbuf_r+0x76>
 800308a:	2e0a      	cmp	r6, #10
 800308c:	d105      	bne.n	800309a <__swbuf_r+0x76>
 800308e:	0021      	movs	r1, r4
 8003090:	0028      	movs	r0, r5
 8003092:	f000 f921 	bl	80032d8 <_fflush_r>
 8003096:	2800      	cmp	r0, #0
 8003098:	d111      	bne.n	80030be <__swbuf_r+0x9a>
 800309a:	0030      	movs	r0, r6
 800309c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <__swbuf_r+0xa4>)
 80030a0:	429c      	cmp	r4, r3
 80030a2:	d101      	bne.n	80030a8 <__swbuf_r+0x84>
 80030a4:	68ac      	ldr	r4, [r5, #8]
 80030a6:	e7cc      	b.n	8003042 <__swbuf_r+0x1e>
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <__swbuf_r+0xa8>)
 80030aa:	429c      	cmp	r4, r3
 80030ac:	d1c9      	bne.n	8003042 <__swbuf_r+0x1e>
 80030ae:	68ec      	ldr	r4, [r5, #12]
 80030b0:	e7c7      	b.n	8003042 <__swbuf_r+0x1e>
 80030b2:	0021      	movs	r1, r4
 80030b4:	0028      	movs	r0, r5
 80030b6:	f000 f80b 	bl	80030d0 <__swsetup_r>
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d0c9      	beq.n	8003052 <__swbuf_r+0x2e>
 80030be:	2601      	movs	r6, #1
 80030c0:	4276      	negs	r6, r6
 80030c2:	e7ea      	b.n	800309a <__swbuf_r+0x76>
 80030c4:	080040f8 	.word	0x080040f8
 80030c8:	08004118 	.word	0x08004118
 80030cc:	080040d8 	.word	0x080040d8

080030d0 <__swsetup_r>:
 80030d0:	4b37      	ldr	r3, [pc, #220]	; (80031b0 <__swsetup_r+0xe0>)
 80030d2:	b570      	push	{r4, r5, r6, lr}
 80030d4:	681d      	ldr	r5, [r3, #0]
 80030d6:	0006      	movs	r6, r0
 80030d8:	000c      	movs	r4, r1
 80030da:	2d00      	cmp	r5, #0
 80030dc:	d005      	beq.n	80030ea <__swsetup_r+0x1a>
 80030de:	69ab      	ldr	r3, [r5, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <__swsetup_r+0x1a>
 80030e4:	0028      	movs	r0, r5
 80030e6:	f000 f999 	bl	800341c <__sinit>
 80030ea:	4b32      	ldr	r3, [pc, #200]	; (80031b4 <__swsetup_r+0xe4>)
 80030ec:	429c      	cmp	r4, r3
 80030ee:	d10f      	bne.n	8003110 <__swsetup_r+0x40>
 80030f0:	686c      	ldr	r4, [r5, #4]
 80030f2:	230c      	movs	r3, #12
 80030f4:	5ee2      	ldrsh	r2, [r4, r3]
 80030f6:	b293      	uxth	r3, r2
 80030f8:	0711      	lsls	r1, r2, #28
 80030fa:	d42d      	bmi.n	8003158 <__swsetup_r+0x88>
 80030fc:	06d9      	lsls	r1, r3, #27
 80030fe:	d411      	bmi.n	8003124 <__swsetup_r+0x54>
 8003100:	2309      	movs	r3, #9
 8003102:	2001      	movs	r0, #1
 8003104:	6033      	str	r3, [r6, #0]
 8003106:	3337      	adds	r3, #55	; 0x37
 8003108:	4313      	orrs	r3, r2
 800310a:	81a3      	strh	r3, [r4, #12]
 800310c:	4240      	negs	r0, r0
 800310e:	bd70      	pop	{r4, r5, r6, pc}
 8003110:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <__swsetup_r+0xe8>)
 8003112:	429c      	cmp	r4, r3
 8003114:	d101      	bne.n	800311a <__swsetup_r+0x4a>
 8003116:	68ac      	ldr	r4, [r5, #8]
 8003118:	e7eb      	b.n	80030f2 <__swsetup_r+0x22>
 800311a:	4b28      	ldr	r3, [pc, #160]	; (80031bc <__swsetup_r+0xec>)
 800311c:	429c      	cmp	r4, r3
 800311e:	d1e8      	bne.n	80030f2 <__swsetup_r+0x22>
 8003120:	68ec      	ldr	r4, [r5, #12]
 8003122:	e7e6      	b.n	80030f2 <__swsetup_r+0x22>
 8003124:	075b      	lsls	r3, r3, #29
 8003126:	d513      	bpl.n	8003150 <__swsetup_r+0x80>
 8003128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800312a:	2900      	cmp	r1, #0
 800312c:	d008      	beq.n	8003140 <__swsetup_r+0x70>
 800312e:	0023      	movs	r3, r4
 8003130:	3344      	adds	r3, #68	; 0x44
 8003132:	4299      	cmp	r1, r3
 8003134:	d002      	beq.n	800313c <__swsetup_r+0x6c>
 8003136:	0030      	movs	r0, r6
 8003138:	f000 fa8a 	bl	8003650 <_free_r>
 800313c:	2300      	movs	r3, #0
 800313e:	6363      	str	r3, [r4, #52]	; 0x34
 8003140:	2224      	movs	r2, #36	; 0x24
 8003142:	89a3      	ldrh	r3, [r4, #12]
 8003144:	4393      	bics	r3, r2
 8003146:	81a3      	strh	r3, [r4, #12]
 8003148:	2300      	movs	r3, #0
 800314a:	6063      	str	r3, [r4, #4]
 800314c:	6923      	ldr	r3, [r4, #16]
 800314e:	6023      	str	r3, [r4, #0]
 8003150:	2308      	movs	r3, #8
 8003152:	89a2      	ldrh	r2, [r4, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	81a3      	strh	r3, [r4, #12]
 8003158:	6923      	ldr	r3, [r4, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10b      	bne.n	8003176 <__swsetup_r+0xa6>
 800315e:	21a0      	movs	r1, #160	; 0xa0
 8003160:	2280      	movs	r2, #128	; 0x80
 8003162:	89a3      	ldrh	r3, [r4, #12]
 8003164:	0089      	lsls	r1, r1, #2
 8003166:	0092      	lsls	r2, r2, #2
 8003168:	400b      	ands	r3, r1
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <__swsetup_r+0xa6>
 800316e:	0021      	movs	r1, r4
 8003170:	0030      	movs	r0, r6
 8003172:	f000 fa1f 	bl	80035b4 <__smakebuf_r>
 8003176:	220c      	movs	r2, #12
 8003178:	5ea3      	ldrsh	r3, [r4, r2]
 800317a:	2001      	movs	r0, #1
 800317c:	001a      	movs	r2, r3
 800317e:	b299      	uxth	r1, r3
 8003180:	4002      	ands	r2, r0
 8003182:	4203      	tst	r3, r0
 8003184:	d00f      	beq.n	80031a6 <__swsetup_r+0xd6>
 8003186:	2200      	movs	r2, #0
 8003188:	60a2      	str	r2, [r4, #8]
 800318a:	6962      	ldr	r2, [r4, #20]
 800318c:	4252      	negs	r2, r2
 800318e:	61a2      	str	r2, [r4, #24]
 8003190:	2000      	movs	r0, #0
 8003192:	6922      	ldr	r2, [r4, #16]
 8003194:	4282      	cmp	r2, r0
 8003196:	d1ba      	bne.n	800310e <__swsetup_r+0x3e>
 8003198:	060a      	lsls	r2, r1, #24
 800319a:	d5b8      	bpl.n	800310e <__swsetup_r+0x3e>
 800319c:	2240      	movs	r2, #64	; 0x40
 800319e:	4313      	orrs	r3, r2
 80031a0:	81a3      	strh	r3, [r4, #12]
 80031a2:	3801      	subs	r0, #1
 80031a4:	e7b3      	b.n	800310e <__swsetup_r+0x3e>
 80031a6:	0788      	lsls	r0, r1, #30
 80031a8:	d400      	bmi.n	80031ac <__swsetup_r+0xdc>
 80031aa:	6962      	ldr	r2, [r4, #20]
 80031ac:	60a2      	str	r2, [r4, #8]
 80031ae:	e7ef      	b.n	8003190 <__swsetup_r+0xc0>
 80031b0:	20000004 	.word	0x20000004
 80031b4:	080040f8 	.word	0x080040f8
 80031b8:	08004118 	.word	0x08004118
 80031bc:	080040d8 	.word	0x080040d8

080031c0 <__sflush_r>:
 80031c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031c2:	898b      	ldrh	r3, [r1, #12]
 80031c4:	0005      	movs	r5, r0
 80031c6:	000c      	movs	r4, r1
 80031c8:	071a      	lsls	r2, r3, #28
 80031ca:	d45f      	bmi.n	800328c <__sflush_r+0xcc>
 80031cc:	684a      	ldr	r2, [r1, #4]
 80031ce:	2a00      	cmp	r2, #0
 80031d0:	dc04      	bgt.n	80031dc <__sflush_r+0x1c>
 80031d2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80031d4:	2a00      	cmp	r2, #0
 80031d6:	dc01      	bgt.n	80031dc <__sflush_r+0x1c>
 80031d8:	2000      	movs	r0, #0
 80031da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80031de:	2f00      	cmp	r7, #0
 80031e0:	d0fa      	beq.n	80031d8 <__sflush_r+0x18>
 80031e2:	2200      	movs	r2, #0
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	682e      	ldr	r6, [r5, #0]
 80031e8:	602a      	str	r2, [r5, #0]
 80031ea:	001a      	movs	r2, r3
 80031ec:	0149      	lsls	r1, r1, #5
 80031ee:	400a      	ands	r2, r1
 80031f0:	420b      	tst	r3, r1
 80031f2:	d034      	beq.n	800325e <__sflush_r+0x9e>
 80031f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	075b      	lsls	r3, r3, #29
 80031fa:	d506      	bpl.n	800320a <__sflush_r+0x4a>
 80031fc:	6863      	ldr	r3, [r4, #4]
 80031fe:	1ac0      	subs	r0, r0, r3
 8003200:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <__sflush_r+0x4a>
 8003206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003208:	1ac0      	subs	r0, r0, r3
 800320a:	0002      	movs	r2, r0
 800320c:	6a21      	ldr	r1, [r4, #32]
 800320e:	2300      	movs	r3, #0
 8003210:	0028      	movs	r0, r5
 8003212:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003214:	47b8      	blx	r7
 8003216:	89a1      	ldrh	r1, [r4, #12]
 8003218:	1c43      	adds	r3, r0, #1
 800321a:	d106      	bne.n	800322a <__sflush_r+0x6a>
 800321c:	682b      	ldr	r3, [r5, #0]
 800321e:	2b1d      	cmp	r3, #29
 8003220:	d831      	bhi.n	8003286 <__sflush_r+0xc6>
 8003222:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <__sflush_r+0x114>)
 8003224:	40da      	lsrs	r2, r3
 8003226:	07d3      	lsls	r3, r2, #31
 8003228:	d52d      	bpl.n	8003286 <__sflush_r+0xc6>
 800322a:	2300      	movs	r3, #0
 800322c:	6063      	str	r3, [r4, #4]
 800322e:	6923      	ldr	r3, [r4, #16]
 8003230:	6023      	str	r3, [r4, #0]
 8003232:	04cb      	lsls	r3, r1, #19
 8003234:	d505      	bpl.n	8003242 <__sflush_r+0x82>
 8003236:	1c43      	adds	r3, r0, #1
 8003238:	d102      	bne.n	8003240 <__sflush_r+0x80>
 800323a:	682b      	ldr	r3, [r5, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d100      	bne.n	8003242 <__sflush_r+0x82>
 8003240:	6560      	str	r0, [r4, #84]	; 0x54
 8003242:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003244:	602e      	str	r6, [r5, #0]
 8003246:	2900      	cmp	r1, #0
 8003248:	d0c6      	beq.n	80031d8 <__sflush_r+0x18>
 800324a:	0023      	movs	r3, r4
 800324c:	3344      	adds	r3, #68	; 0x44
 800324e:	4299      	cmp	r1, r3
 8003250:	d002      	beq.n	8003258 <__sflush_r+0x98>
 8003252:	0028      	movs	r0, r5
 8003254:	f000 f9fc 	bl	8003650 <_free_r>
 8003258:	2000      	movs	r0, #0
 800325a:	6360      	str	r0, [r4, #52]	; 0x34
 800325c:	e7bd      	b.n	80031da <__sflush_r+0x1a>
 800325e:	2301      	movs	r3, #1
 8003260:	0028      	movs	r0, r5
 8003262:	6a21      	ldr	r1, [r4, #32]
 8003264:	47b8      	blx	r7
 8003266:	1c43      	adds	r3, r0, #1
 8003268:	d1c5      	bne.n	80031f6 <__sflush_r+0x36>
 800326a:	682b      	ldr	r3, [r5, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0c2      	beq.n	80031f6 <__sflush_r+0x36>
 8003270:	2b1d      	cmp	r3, #29
 8003272:	d001      	beq.n	8003278 <__sflush_r+0xb8>
 8003274:	2b16      	cmp	r3, #22
 8003276:	d101      	bne.n	800327c <__sflush_r+0xbc>
 8003278:	602e      	str	r6, [r5, #0]
 800327a:	e7ad      	b.n	80031d8 <__sflush_r+0x18>
 800327c:	2340      	movs	r3, #64	; 0x40
 800327e:	89a2      	ldrh	r2, [r4, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	81a3      	strh	r3, [r4, #12]
 8003284:	e7a9      	b.n	80031da <__sflush_r+0x1a>
 8003286:	2340      	movs	r3, #64	; 0x40
 8003288:	430b      	orrs	r3, r1
 800328a:	e7fa      	b.n	8003282 <__sflush_r+0xc2>
 800328c:	690f      	ldr	r7, [r1, #16]
 800328e:	2f00      	cmp	r7, #0
 8003290:	d0a2      	beq.n	80031d8 <__sflush_r+0x18>
 8003292:	680a      	ldr	r2, [r1, #0]
 8003294:	600f      	str	r7, [r1, #0]
 8003296:	1bd2      	subs	r2, r2, r7
 8003298:	9201      	str	r2, [sp, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	079b      	lsls	r3, r3, #30
 800329e:	d100      	bne.n	80032a2 <__sflush_r+0xe2>
 80032a0:	694a      	ldr	r2, [r1, #20]
 80032a2:	60a2      	str	r2, [r4, #8]
 80032a4:	9b01      	ldr	r3, [sp, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	dc00      	bgt.n	80032ac <__sflush_r+0xec>
 80032aa:	e795      	b.n	80031d8 <__sflush_r+0x18>
 80032ac:	003a      	movs	r2, r7
 80032ae:	0028      	movs	r0, r5
 80032b0:	9b01      	ldr	r3, [sp, #4]
 80032b2:	6a21      	ldr	r1, [r4, #32]
 80032b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80032b6:	47b0      	blx	r6
 80032b8:	2800      	cmp	r0, #0
 80032ba:	dc06      	bgt.n	80032ca <__sflush_r+0x10a>
 80032bc:	2340      	movs	r3, #64	; 0x40
 80032be:	2001      	movs	r0, #1
 80032c0:	89a2      	ldrh	r2, [r4, #12]
 80032c2:	4240      	negs	r0, r0
 80032c4:	4313      	orrs	r3, r2
 80032c6:	81a3      	strh	r3, [r4, #12]
 80032c8:	e787      	b.n	80031da <__sflush_r+0x1a>
 80032ca:	9b01      	ldr	r3, [sp, #4]
 80032cc:	183f      	adds	r7, r7, r0
 80032ce:	1a1b      	subs	r3, r3, r0
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	e7e7      	b.n	80032a4 <__sflush_r+0xe4>
 80032d4:	20400001 	.word	0x20400001

080032d8 <_fflush_r>:
 80032d8:	690b      	ldr	r3, [r1, #16]
 80032da:	b570      	push	{r4, r5, r6, lr}
 80032dc:	0005      	movs	r5, r0
 80032de:	000c      	movs	r4, r1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d102      	bne.n	80032ea <_fflush_r+0x12>
 80032e4:	2500      	movs	r5, #0
 80032e6:	0028      	movs	r0, r5
 80032e8:	bd70      	pop	{r4, r5, r6, pc}
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d004      	beq.n	80032f8 <_fflush_r+0x20>
 80032ee:	6983      	ldr	r3, [r0, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <_fflush_r+0x20>
 80032f4:	f000 f892 	bl	800341c <__sinit>
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <_fflush_r+0x74>)
 80032fa:	429c      	cmp	r4, r3
 80032fc:	d11b      	bne.n	8003336 <_fflush_r+0x5e>
 80032fe:	686c      	ldr	r4, [r5, #4]
 8003300:	220c      	movs	r2, #12
 8003302:	5ea3      	ldrsh	r3, [r4, r2]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0ed      	beq.n	80032e4 <_fflush_r+0xc>
 8003308:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800330a:	07d2      	lsls	r2, r2, #31
 800330c:	d404      	bmi.n	8003318 <_fflush_r+0x40>
 800330e:	059b      	lsls	r3, r3, #22
 8003310:	d402      	bmi.n	8003318 <_fflush_r+0x40>
 8003312:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003314:	f000 f923 	bl	800355e <__retarget_lock_acquire_recursive>
 8003318:	0028      	movs	r0, r5
 800331a:	0021      	movs	r1, r4
 800331c:	f7ff ff50 	bl	80031c0 <__sflush_r>
 8003320:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003322:	0005      	movs	r5, r0
 8003324:	07db      	lsls	r3, r3, #31
 8003326:	d4de      	bmi.n	80032e6 <_fflush_r+0xe>
 8003328:	89a3      	ldrh	r3, [r4, #12]
 800332a:	059b      	lsls	r3, r3, #22
 800332c:	d4db      	bmi.n	80032e6 <_fflush_r+0xe>
 800332e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003330:	f000 f916 	bl	8003560 <__retarget_lock_release_recursive>
 8003334:	e7d7      	b.n	80032e6 <_fflush_r+0xe>
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <_fflush_r+0x78>)
 8003338:	429c      	cmp	r4, r3
 800333a:	d101      	bne.n	8003340 <_fflush_r+0x68>
 800333c:	68ac      	ldr	r4, [r5, #8]
 800333e:	e7df      	b.n	8003300 <_fflush_r+0x28>
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <_fflush_r+0x7c>)
 8003342:	429c      	cmp	r4, r3
 8003344:	d1dc      	bne.n	8003300 <_fflush_r+0x28>
 8003346:	68ec      	ldr	r4, [r5, #12]
 8003348:	e7da      	b.n	8003300 <_fflush_r+0x28>
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	080040f8 	.word	0x080040f8
 8003350:	08004118 	.word	0x08004118
 8003354:	080040d8 	.word	0x080040d8

08003358 <std>:
 8003358:	2300      	movs	r3, #0
 800335a:	b510      	push	{r4, lr}
 800335c:	0004      	movs	r4, r0
 800335e:	6003      	str	r3, [r0, #0]
 8003360:	6043      	str	r3, [r0, #4]
 8003362:	6083      	str	r3, [r0, #8]
 8003364:	8181      	strh	r1, [r0, #12]
 8003366:	6643      	str	r3, [r0, #100]	; 0x64
 8003368:	0019      	movs	r1, r3
 800336a:	81c2      	strh	r2, [r0, #14]
 800336c:	6103      	str	r3, [r0, #16]
 800336e:	6143      	str	r3, [r0, #20]
 8003370:	6183      	str	r3, [r0, #24]
 8003372:	2208      	movs	r2, #8
 8003374:	305c      	adds	r0, #92	; 0x5c
 8003376:	f7ff fcd1 	bl	8002d1c <memset>
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <std+0x38>)
 800337c:	6224      	str	r4, [r4, #32]
 800337e:	6263      	str	r3, [r4, #36]	; 0x24
 8003380:	4b04      	ldr	r3, [pc, #16]	; (8003394 <std+0x3c>)
 8003382:	62a3      	str	r3, [r4, #40]	; 0x28
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <std+0x40>)
 8003386:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <std+0x44>)
 800338a:	6323      	str	r3, [r4, #48]	; 0x30
 800338c:	bd10      	pop	{r4, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	08003e95 	.word	0x08003e95
 8003394:	08003ebd 	.word	0x08003ebd
 8003398:	08003ef5 	.word	0x08003ef5
 800339c:	08003f21 	.word	0x08003f21

080033a0 <_cleanup_r>:
 80033a0:	b510      	push	{r4, lr}
 80033a2:	4902      	ldr	r1, [pc, #8]	; (80033ac <_cleanup_r+0xc>)
 80033a4:	f000 f8ba 	bl	800351c <_fwalk_reent>
 80033a8:	bd10      	pop	{r4, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	080032d9 	.word	0x080032d9

080033b0 <__sfmoreglue>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	2568      	movs	r5, #104	; 0x68
 80033b4:	1e4a      	subs	r2, r1, #1
 80033b6:	4355      	muls	r5, r2
 80033b8:	000e      	movs	r6, r1
 80033ba:	0029      	movs	r1, r5
 80033bc:	3174      	adds	r1, #116	; 0x74
 80033be:	f000 f9b3 	bl	8003728 <_malloc_r>
 80033c2:	1e04      	subs	r4, r0, #0
 80033c4:	d008      	beq.n	80033d8 <__sfmoreglue+0x28>
 80033c6:	2100      	movs	r1, #0
 80033c8:	002a      	movs	r2, r5
 80033ca:	6001      	str	r1, [r0, #0]
 80033cc:	6046      	str	r6, [r0, #4]
 80033ce:	300c      	adds	r0, #12
 80033d0:	60a0      	str	r0, [r4, #8]
 80033d2:	3268      	adds	r2, #104	; 0x68
 80033d4:	f7ff fca2 	bl	8002d1c <memset>
 80033d8:	0020      	movs	r0, r4
 80033da:	bd70      	pop	{r4, r5, r6, pc}

080033dc <__sfp_lock_acquire>:
 80033dc:	b510      	push	{r4, lr}
 80033de:	4802      	ldr	r0, [pc, #8]	; (80033e8 <__sfp_lock_acquire+0xc>)
 80033e0:	f000 f8bd 	bl	800355e <__retarget_lock_acquire_recursive>
 80033e4:	bd10      	pop	{r4, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	200003a1 	.word	0x200003a1

080033ec <__sfp_lock_release>:
 80033ec:	b510      	push	{r4, lr}
 80033ee:	4802      	ldr	r0, [pc, #8]	; (80033f8 <__sfp_lock_release+0xc>)
 80033f0:	f000 f8b6 	bl	8003560 <__retarget_lock_release_recursive>
 80033f4:	bd10      	pop	{r4, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	200003a1 	.word	0x200003a1

080033fc <__sinit_lock_acquire>:
 80033fc:	b510      	push	{r4, lr}
 80033fe:	4802      	ldr	r0, [pc, #8]	; (8003408 <__sinit_lock_acquire+0xc>)
 8003400:	f000 f8ad 	bl	800355e <__retarget_lock_acquire_recursive>
 8003404:	bd10      	pop	{r4, pc}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	200003a2 	.word	0x200003a2

0800340c <__sinit_lock_release>:
 800340c:	b510      	push	{r4, lr}
 800340e:	4802      	ldr	r0, [pc, #8]	; (8003418 <__sinit_lock_release+0xc>)
 8003410:	f000 f8a6 	bl	8003560 <__retarget_lock_release_recursive>
 8003414:	bd10      	pop	{r4, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	200003a2 	.word	0x200003a2

0800341c <__sinit>:
 800341c:	b513      	push	{r0, r1, r4, lr}
 800341e:	0004      	movs	r4, r0
 8003420:	f7ff ffec 	bl	80033fc <__sinit_lock_acquire>
 8003424:	69a3      	ldr	r3, [r4, #24]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <__sinit+0x14>
 800342a:	f7ff ffef 	bl	800340c <__sinit_lock_release>
 800342e:	bd13      	pop	{r0, r1, r4, pc}
 8003430:	64a3      	str	r3, [r4, #72]	; 0x48
 8003432:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003434:	6523      	str	r3, [r4, #80]	; 0x50
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <__sinit+0x68>)
 8003438:	4a13      	ldr	r2, [pc, #76]	; (8003488 <__sinit+0x6c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	62a2      	str	r2, [r4, #40]	; 0x28
 800343e:	9301      	str	r3, [sp, #4]
 8003440:	42a3      	cmp	r3, r4
 8003442:	d101      	bne.n	8003448 <__sinit+0x2c>
 8003444:	2301      	movs	r3, #1
 8003446:	61a3      	str	r3, [r4, #24]
 8003448:	0020      	movs	r0, r4
 800344a:	f000 f81f 	bl	800348c <__sfp>
 800344e:	6060      	str	r0, [r4, #4]
 8003450:	0020      	movs	r0, r4
 8003452:	f000 f81b 	bl	800348c <__sfp>
 8003456:	60a0      	str	r0, [r4, #8]
 8003458:	0020      	movs	r0, r4
 800345a:	f000 f817 	bl	800348c <__sfp>
 800345e:	2200      	movs	r2, #0
 8003460:	2104      	movs	r1, #4
 8003462:	60e0      	str	r0, [r4, #12]
 8003464:	6860      	ldr	r0, [r4, #4]
 8003466:	f7ff ff77 	bl	8003358 <std>
 800346a:	2201      	movs	r2, #1
 800346c:	2109      	movs	r1, #9
 800346e:	68a0      	ldr	r0, [r4, #8]
 8003470:	f7ff ff72 	bl	8003358 <std>
 8003474:	2202      	movs	r2, #2
 8003476:	2112      	movs	r1, #18
 8003478:	68e0      	ldr	r0, [r4, #12]
 800347a:	f7ff ff6d 	bl	8003358 <std>
 800347e:	2301      	movs	r3, #1
 8003480:	61a3      	str	r3, [r4, #24]
 8003482:	e7d2      	b.n	800342a <__sinit+0xe>
 8003484:	080040d4 	.word	0x080040d4
 8003488:	080033a1 	.word	0x080033a1

0800348c <__sfp>:
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348e:	0007      	movs	r7, r0
 8003490:	f7ff ffa4 	bl	80033dc <__sfp_lock_acquire>
 8003494:	4b1f      	ldr	r3, [pc, #124]	; (8003514 <__sfp+0x88>)
 8003496:	681e      	ldr	r6, [r3, #0]
 8003498:	69b3      	ldr	r3, [r6, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d102      	bne.n	80034a4 <__sfp+0x18>
 800349e:	0030      	movs	r0, r6
 80034a0:	f7ff ffbc 	bl	800341c <__sinit>
 80034a4:	3648      	adds	r6, #72	; 0x48
 80034a6:	68b4      	ldr	r4, [r6, #8]
 80034a8:	6873      	ldr	r3, [r6, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	d504      	bpl.n	80034b8 <__sfp+0x2c>
 80034ae:	6833      	ldr	r3, [r6, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d022      	beq.n	80034fa <__sfp+0x6e>
 80034b4:	6836      	ldr	r6, [r6, #0]
 80034b6:	e7f6      	b.n	80034a6 <__sfp+0x1a>
 80034b8:	220c      	movs	r2, #12
 80034ba:	5ea5      	ldrsh	r5, [r4, r2]
 80034bc:	2d00      	cmp	r5, #0
 80034be:	d11a      	bne.n	80034f6 <__sfp+0x6a>
 80034c0:	0020      	movs	r0, r4
 80034c2:	4b15      	ldr	r3, [pc, #84]	; (8003518 <__sfp+0x8c>)
 80034c4:	3058      	adds	r0, #88	; 0x58
 80034c6:	60e3      	str	r3, [r4, #12]
 80034c8:	6665      	str	r5, [r4, #100]	; 0x64
 80034ca:	f000 f847 	bl	800355c <__retarget_lock_init_recursive>
 80034ce:	f7ff ff8d 	bl	80033ec <__sfp_lock_release>
 80034d2:	0020      	movs	r0, r4
 80034d4:	2208      	movs	r2, #8
 80034d6:	0029      	movs	r1, r5
 80034d8:	6025      	str	r5, [r4, #0]
 80034da:	60a5      	str	r5, [r4, #8]
 80034dc:	6065      	str	r5, [r4, #4]
 80034de:	6125      	str	r5, [r4, #16]
 80034e0:	6165      	str	r5, [r4, #20]
 80034e2:	61a5      	str	r5, [r4, #24]
 80034e4:	305c      	adds	r0, #92	; 0x5c
 80034e6:	f7ff fc19 	bl	8002d1c <memset>
 80034ea:	6365      	str	r5, [r4, #52]	; 0x34
 80034ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80034ee:	64a5      	str	r5, [r4, #72]	; 0x48
 80034f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80034f2:	0020      	movs	r0, r4
 80034f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034f6:	3468      	adds	r4, #104	; 0x68
 80034f8:	e7d7      	b.n	80034aa <__sfp+0x1e>
 80034fa:	2104      	movs	r1, #4
 80034fc:	0038      	movs	r0, r7
 80034fe:	f7ff ff57 	bl	80033b0 <__sfmoreglue>
 8003502:	1e04      	subs	r4, r0, #0
 8003504:	6030      	str	r0, [r6, #0]
 8003506:	d1d5      	bne.n	80034b4 <__sfp+0x28>
 8003508:	f7ff ff70 	bl	80033ec <__sfp_lock_release>
 800350c:	230c      	movs	r3, #12
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	e7ef      	b.n	80034f2 <__sfp+0x66>
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	080040d4 	.word	0x080040d4
 8003518:	ffff0001 	.word	0xffff0001

0800351c <_fwalk_reent>:
 800351c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800351e:	0004      	movs	r4, r0
 8003520:	0006      	movs	r6, r0
 8003522:	2700      	movs	r7, #0
 8003524:	9101      	str	r1, [sp, #4]
 8003526:	3448      	adds	r4, #72	; 0x48
 8003528:	6863      	ldr	r3, [r4, #4]
 800352a:	68a5      	ldr	r5, [r4, #8]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	9b00      	ldr	r3, [sp, #0]
 8003530:	3b01      	subs	r3, #1
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	d504      	bpl.n	8003540 <_fwalk_reent+0x24>
 8003536:	6824      	ldr	r4, [r4, #0]
 8003538:	2c00      	cmp	r4, #0
 800353a:	d1f5      	bne.n	8003528 <_fwalk_reent+0xc>
 800353c:	0038      	movs	r0, r7
 800353e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003540:	89ab      	ldrh	r3, [r5, #12]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d908      	bls.n	8003558 <_fwalk_reent+0x3c>
 8003546:	220e      	movs	r2, #14
 8003548:	5eab      	ldrsh	r3, [r5, r2]
 800354a:	3301      	adds	r3, #1
 800354c:	d004      	beq.n	8003558 <_fwalk_reent+0x3c>
 800354e:	0029      	movs	r1, r5
 8003550:	0030      	movs	r0, r6
 8003552:	9b01      	ldr	r3, [sp, #4]
 8003554:	4798      	blx	r3
 8003556:	4307      	orrs	r7, r0
 8003558:	3568      	adds	r5, #104	; 0x68
 800355a:	e7e8      	b.n	800352e <_fwalk_reent+0x12>

0800355c <__retarget_lock_init_recursive>:
 800355c:	4770      	bx	lr

0800355e <__retarget_lock_acquire_recursive>:
 800355e:	4770      	bx	lr

08003560 <__retarget_lock_release_recursive>:
 8003560:	4770      	bx	lr
	...

08003564 <__swhatbuf_r>:
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	000e      	movs	r6, r1
 8003568:	001d      	movs	r5, r3
 800356a:	230e      	movs	r3, #14
 800356c:	5ec9      	ldrsh	r1, [r1, r3]
 800356e:	0014      	movs	r4, r2
 8003570:	b096      	sub	sp, #88	; 0x58
 8003572:	2900      	cmp	r1, #0
 8003574:	da08      	bge.n	8003588 <__swhatbuf_r+0x24>
 8003576:	220c      	movs	r2, #12
 8003578:	5eb3      	ldrsh	r3, [r6, r2]
 800357a:	2200      	movs	r2, #0
 800357c:	602a      	str	r2, [r5, #0]
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	d411      	bmi.n	80035a6 <__swhatbuf_r+0x42>
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	e00f      	b.n	80035a8 <__swhatbuf_r+0x44>
 8003588:	466a      	mov	r2, sp
 800358a:	f000 fcf5 	bl	8003f78 <_fstat_r>
 800358e:	2800      	cmp	r0, #0
 8003590:	dbf1      	blt.n	8003576 <__swhatbuf_r+0x12>
 8003592:	23f0      	movs	r3, #240	; 0xf0
 8003594:	9901      	ldr	r1, [sp, #4]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	4019      	ands	r1, r3
 800359a:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <__swhatbuf_r+0x4c>)
 800359c:	18c9      	adds	r1, r1, r3
 800359e:	424b      	negs	r3, r1
 80035a0:	4159      	adcs	r1, r3
 80035a2:	6029      	str	r1, [r5, #0]
 80035a4:	e7ed      	b.n	8003582 <__swhatbuf_r+0x1e>
 80035a6:	2340      	movs	r3, #64	; 0x40
 80035a8:	2000      	movs	r0, #0
 80035aa:	6023      	str	r3, [r4, #0]
 80035ac:	b016      	add	sp, #88	; 0x58
 80035ae:	bd70      	pop	{r4, r5, r6, pc}
 80035b0:	ffffe000 	.word	0xffffe000

080035b4 <__smakebuf_r>:
 80035b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035b6:	2602      	movs	r6, #2
 80035b8:	898b      	ldrh	r3, [r1, #12]
 80035ba:	0005      	movs	r5, r0
 80035bc:	000c      	movs	r4, r1
 80035be:	4233      	tst	r3, r6
 80035c0:	d006      	beq.n	80035d0 <__smakebuf_r+0x1c>
 80035c2:	0023      	movs	r3, r4
 80035c4:	3347      	adds	r3, #71	; 0x47
 80035c6:	6023      	str	r3, [r4, #0]
 80035c8:	6123      	str	r3, [r4, #16]
 80035ca:	2301      	movs	r3, #1
 80035cc:	6163      	str	r3, [r4, #20]
 80035ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80035d0:	466a      	mov	r2, sp
 80035d2:	ab01      	add	r3, sp, #4
 80035d4:	f7ff ffc6 	bl	8003564 <__swhatbuf_r>
 80035d8:	9900      	ldr	r1, [sp, #0]
 80035da:	0007      	movs	r7, r0
 80035dc:	0028      	movs	r0, r5
 80035de:	f000 f8a3 	bl	8003728 <_malloc_r>
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d108      	bne.n	80035f8 <__smakebuf_r+0x44>
 80035e6:	220c      	movs	r2, #12
 80035e8:	5ea3      	ldrsh	r3, [r4, r2]
 80035ea:	059a      	lsls	r2, r3, #22
 80035ec:	d4ef      	bmi.n	80035ce <__smakebuf_r+0x1a>
 80035ee:	2203      	movs	r2, #3
 80035f0:	4393      	bics	r3, r2
 80035f2:	431e      	orrs	r6, r3
 80035f4:	81a6      	strh	r6, [r4, #12]
 80035f6:	e7e4      	b.n	80035c2 <__smakebuf_r+0xe>
 80035f8:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <__smakebuf_r+0x84>)
 80035fa:	62ab      	str	r3, [r5, #40]	; 0x28
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	89a2      	ldrh	r2, [r4, #12]
 8003600:	6020      	str	r0, [r4, #0]
 8003602:	4313      	orrs	r3, r2
 8003604:	81a3      	strh	r3, [r4, #12]
 8003606:	9b00      	ldr	r3, [sp, #0]
 8003608:	6120      	str	r0, [r4, #16]
 800360a:	6163      	str	r3, [r4, #20]
 800360c:	9b01      	ldr	r3, [sp, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <__smakebuf_r+0x7a>
 8003612:	0028      	movs	r0, r5
 8003614:	230e      	movs	r3, #14
 8003616:	5ee1      	ldrsh	r1, [r4, r3]
 8003618:	f000 fcc0 	bl	8003f9c <_isatty_r>
 800361c:	2800      	cmp	r0, #0
 800361e:	d006      	beq.n	800362e <__smakebuf_r+0x7a>
 8003620:	2203      	movs	r2, #3
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	4393      	bics	r3, r2
 8003626:	001a      	movs	r2, r3
 8003628:	2301      	movs	r3, #1
 800362a:	4313      	orrs	r3, r2
 800362c:	81a3      	strh	r3, [r4, #12]
 800362e:	89a0      	ldrh	r0, [r4, #12]
 8003630:	4307      	orrs	r7, r0
 8003632:	81a7      	strh	r7, [r4, #12]
 8003634:	e7cb      	b.n	80035ce <__smakebuf_r+0x1a>
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	080033a1 	.word	0x080033a1

0800363c <malloc>:
 800363c:	b510      	push	{r4, lr}
 800363e:	4b03      	ldr	r3, [pc, #12]	; (800364c <malloc+0x10>)
 8003640:	0001      	movs	r1, r0
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	f000 f870 	bl	8003728 <_malloc_r>
 8003648:	bd10      	pop	{r4, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	20000004 	.word	0x20000004

08003650 <_free_r>:
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	0005      	movs	r5, r0
 8003654:	2900      	cmp	r1, #0
 8003656:	d010      	beq.n	800367a <_free_r+0x2a>
 8003658:	1f0c      	subs	r4, r1, #4
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	da00      	bge.n	8003662 <_free_r+0x12>
 8003660:	18e4      	adds	r4, r4, r3
 8003662:	0028      	movs	r0, r5
 8003664:	f000 fccc 	bl	8004000 <__malloc_lock>
 8003668:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <_free_r+0x90>)
 800366a:	6813      	ldr	r3, [r2, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <_free_r+0x2c>
 8003670:	6063      	str	r3, [r4, #4]
 8003672:	6014      	str	r4, [r2, #0]
 8003674:	0028      	movs	r0, r5
 8003676:	f000 fccb 	bl	8004010 <__malloc_unlock>
 800367a:	bd70      	pop	{r4, r5, r6, pc}
 800367c:	42a3      	cmp	r3, r4
 800367e:	d908      	bls.n	8003692 <_free_r+0x42>
 8003680:	6821      	ldr	r1, [r4, #0]
 8003682:	1860      	adds	r0, r4, r1
 8003684:	4283      	cmp	r3, r0
 8003686:	d1f3      	bne.n	8003670 <_free_r+0x20>
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	1841      	adds	r1, r0, r1
 800368e:	6021      	str	r1, [r4, #0]
 8003690:	e7ee      	b.n	8003670 <_free_r+0x20>
 8003692:	001a      	movs	r2, r3
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <_free_r+0x4e>
 800369a:	42a3      	cmp	r3, r4
 800369c:	d9f9      	bls.n	8003692 <_free_r+0x42>
 800369e:	6811      	ldr	r1, [r2, #0]
 80036a0:	1850      	adds	r0, r2, r1
 80036a2:	42a0      	cmp	r0, r4
 80036a4:	d10b      	bne.n	80036be <_free_r+0x6e>
 80036a6:	6820      	ldr	r0, [r4, #0]
 80036a8:	1809      	adds	r1, r1, r0
 80036aa:	1850      	adds	r0, r2, r1
 80036ac:	6011      	str	r1, [r2, #0]
 80036ae:	4283      	cmp	r3, r0
 80036b0:	d1e0      	bne.n	8003674 <_free_r+0x24>
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	1841      	adds	r1, r0, r1
 80036b8:	6011      	str	r1, [r2, #0]
 80036ba:	6053      	str	r3, [r2, #4]
 80036bc:	e7da      	b.n	8003674 <_free_r+0x24>
 80036be:	42a0      	cmp	r0, r4
 80036c0:	d902      	bls.n	80036c8 <_free_r+0x78>
 80036c2:	230c      	movs	r3, #12
 80036c4:	602b      	str	r3, [r5, #0]
 80036c6:	e7d5      	b.n	8003674 <_free_r+0x24>
 80036c8:	6821      	ldr	r1, [r4, #0]
 80036ca:	1860      	adds	r0, r4, r1
 80036cc:	4283      	cmp	r3, r0
 80036ce:	d103      	bne.n	80036d8 <_free_r+0x88>
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	1841      	adds	r1, r0, r1
 80036d6:	6021      	str	r1, [r4, #0]
 80036d8:	6063      	str	r3, [r4, #4]
 80036da:	6054      	str	r4, [r2, #4]
 80036dc:	e7ca      	b.n	8003674 <_free_r+0x24>
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	200003a4 	.word	0x200003a4

080036e4 <sbrk_aligned>:
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	4e0f      	ldr	r6, [pc, #60]	; (8003724 <sbrk_aligned+0x40>)
 80036e8:	000d      	movs	r5, r1
 80036ea:	6831      	ldr	r1, [r6, #0]
 80036ec:	0004      	movs	r4, r0
 80036ee:	2900      	cmp	r1, #0
 80036f0:	d102      	bne.n	80036f8 <sbrk_aligned+0x14>
 80036f2:	f000 fbbd 	bl	8003e70 <_sbrk_r>
 80036f6:	6030      	str	r0, [r6, #0]
 80036f8:	0029      	movs	r1, r5
 80036fa:	0020      	movs	r0, r4
 80036fc:	f000 fbb8 	bl	8003e70 <_sbrk_r>
 8003700:	1c43      	adds	r3, r0, #1
 8003702:	d00a      	beq.n	800371a <sbrk_aligned+0x36>
 8003704:	2303      	movs	r3, #3
 8003706:	1cc5      	adds	r5, r0, #3
 8003708:	439d      	bics	r5, r3
 800370a:	42a8      	cmp	r0, r5
 800370c:	d007      	beq.n	800371e <sbrk_aligned+0x3a>
 800370e:	1a29      	subs	r1, r5, r0
 8003710:	0020      	movs	r0, r4
 8003712:	f000 fbad 	bl	8003e70 <_sbrk_r>
 8003716:	1c43      	adds	r3, r0, #1
 8003718:	d101      	bne.n	800371e <sbrk_aligned+0x3a>
 800371a:	2501      	movs	r5, #1
 800371c:	426d      	negs	r5, r5
 800371e:	0028      	movs	r0, r5
 8003720:	bd70      	pop	{r4, r5, r6, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	200003a8 	.word	0x200003a8

08003728 <_malloc_r>:
 8003728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800372a:	2203      	movs	r2, #3
 800372c:	1ccb      	adds	r3, r1, #3
 800372e:	4393      	bics	r3, r2
 8003730:	3308      	adds	r3, #8
 8003732:	0006      	movs	r6, r0
 8003734:	001f      	movs	r7, r3
 8003736:	2b0c      	cmp	r3, #12
 8003738:	d232      	bcs.n	80037a0 <_malloc_r+0x78>
 800373a:	270c      	movs	r7, #12
 800373c:	42b9      	cmp	r1, r7
 800373e:	d831      	bhi.n	80037a4 <_malloc_r+0x7c>
 8003740:	0030      	movs	r0, r6
 8003742:	f000 fc5d 	bl	8004000 <__malloc_lock>
 8003746:	4d32      	ldr	r5, [pc, #200]	; (8003810 <_malloc_r+0xe8>)
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	001c      	movs	r4, r3
 800374c:	2c00      	cmp	r4, #0
 800374e:	d12e      	bne.n	80037ae <_malloc_r+0x86>
 8003750:	0039      	movs	r1, r7
 8003752:	0030      	movs	r0, r6
 8003754:	f7ff ffc6 	bl	80036e4 <sbrk_aligned>
 8003758:	0004      	movs	r4, r0
 800375a:	1c43      	adds	r3, r0, #1
 800375c:	d11e      	bne.n	800379c <_malloc_r+0x74>
 800375e:	682c      	ldr	r4, [r5, #0]
 8003760:	0025      	movs	r5, r4
 8003762:	2d00      	cmp	r5, #0
 8003764:	d14a      	bne.n	80037fc <_malloc_r+0xd4>
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	0029      	movs	r1, r5
 800376a:	18e3      	adds	r3, r4, r3
 800376c:	0030      	movs	r0, r6
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	f000 fb7e 	bl	8003e70 <_sbrk_r>
 8003774:	9b01      	ldr	r3, [sp, #4]
 8003776:	4283      	cmp	r3, r0
 8003778:	d143      	bne.n	8003802 <_malloc_r+0xda>
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	3703      	adds	r7, #3
 800377e:	1aff      	subs	r7, r7, r3
 8003780:	2303      	movs	r3, #3
 8003782:	439f      	bics	r7, r3
 8003784:	3708      	adds	r7, #8
 8003786:	2f0c      	cmp	r7, #12
 8003788:	d200      	bcs.n	800378c <_malloc_r+0x64>
 800378a:	270c      	movs	r7, #12
 800378c:	0039      	movs	r1, r7
 800378e:	0030      	movs	r0, r6
 8003790:	f7ff ffa8 	bl	80036e4 <sbrk_aligned>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	d034      	beq.n	8003802 <_malloc_r+0xda>
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	19df      	adds	r7, r3, r7
 800379c:	6027      	str	r7, [r4, #0]
 800379e:	e013      	b.n	80037c8 <_malloc_r+0xa0>
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	dacb      	bge.n	800373c <_malloc_r+0x14>
 80037a4:	230c      	movs	r3, #12
 80037a6:	2500      	movs	r5, #0
 80037a8:	6033      	str	r3, [r6, #0]
 80037aa:	0028      	movs	r0, r5
 80037ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037ae:	6822      	ldr	r2, [r4, #0]
 80037b0:	1bd1      	subs	r1, r2, r7
 80037b2:	d420      	bmi.n	80037f6 <_malloc_r+0xce>
 80037b4:	290b      	cmp	r1, #11
 80037b6:	d917      	bls.n	80037e8 <_malloc_r+0xc0>
 80037b8:	19e2      	adds	r2, r4, r7
 80037ba:	6027      	str	r7, [r4, #0]
 80037bc:	42a3      	cmp	r3, r4
 80037be:	d111      	bne.n	80037e4 <_malloc_r+0xbc>
 80037c0:	602a      	str	r2, [r5, #0]
 80037c2:	6863      	ldr	r3, [r4, #4]
 80037c4:	6011      	str	r1, [r2, #0]
 80037c6:	6053      	str	r3, [r2, #4]
 80037c8:	0030      	movs	r0, r6
 80037ca:	0025      	movs	r5, r4
 80037cc:	f000 fc20 	bl	8004010 <__malloc_unlock>
 80037d0:	2207      	movs	r2, #7
 80037d2:	350b      	adds	r5, #11
 80037d4:	1d23      	adds	r3, r4, #4
 80037d6:	4395      	bics	r5, r2
 80037d8:	1aea      	subs	r2, r5, r3
 80037da:	429d      	cmp	r5, r3
 80037dc:	d0e5      	beq.n	80037aa <_malloc_r+0x82>
 80037de:	1b5b      	subs	r3, r3, r5
 80037e0:	50a3      	str	r3, [r4, r2]
 80037e2:	e7e2      	b.n	80037aa <_malloc_r+0x82>
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	e7ec      	b.n	80037c2 <_malloc_r+0x9a>
 80037e8:	6862      	ldr	r2, [r4, #4]
 80037ea:	42a3      	cmp	r3, r4
 80037ec:	d101      	bne.n	80037f2 <_malloc_r+0xca>
 80037ee:	602a      	str	r2, [r5, #0]
 80037f0:	e7ea      	b.n	80037c8 <_malloc_r+0xa0>
 80037f2:	605a      	str	r2, [r3, #4]
 80037f4:	e7e8      	b.n	80037c8 <_malloc_r+0xa0>
 80037f6:	0023      	movs	r3, r4
 80037f8:	6864      	ldr	r4, [r4, #4]
 80037fa:	e7a7      	b.n	800374c <_malloc_r+0x24>
 80037fc:	002c      	movs	r4, r5
 80037fe:	686d      	ldr	r5, [r5, #4]
 8003800:	e7af      	b.n	8003762 <_malloc_r+0x3a>
 8003802:	230c      	movs	r3, #12
 8003804:	0030      	movs	r0, r6
 8003806:	6033      	str	r3, [r6, #0]
 8003808:	f000 fc02 	bl	8004010 <__malloc_unlock>
 800380c:	e7cd      	b.n	80037aa <_malloc_r+0x82>
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	200003a4 	.word	0x200003a4

08003814 <__sfputc_r>:
 8003814:	6893      	ldr	r3, [r2, #8]
 8003816:	b510      	push	{r4, lr}
 8003818:	3b01      	subs	r3, #1
 800381a:	6093      	str	r3, [r2, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	da04      	bge.n	800382a <__sfputc_r+0x16>
 8003820:	6994      	ldr	r4, [r2, #24]
 8003822:	42a3      	cmp	r3, r4
 8003824:	db07      	blt.n	8003836 <__sfputc_r+0x22>
 8003826:	290a      	cmp	r1, #10
 8003828:	d005      	beq.n	8003836 <__sfputc_r+0x22>
 800382a:	6813      	ldr	r3, [r2, #0]
 800382c:	1c58      	adds	r0, r3, #1
 800382e:	6010      	str	r0, [r2, #0]
 8003830:	7019      	strb	r1, [r3, #0]
 8003832:	0008      	movs	r0, r1
 8003834:	bd10      	pop	{r4, pc}
 8003836:	f7ff fbf5 	bl	8003024 <__swbuf_r>
 800383a:	0001      	movs	r1, r0
 800383c:	e7f9      	b.n	8003832 <__sfputc_r+0x1e>

0800383e <__sfputs_r>:
 800383e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003840:	0006      	movs	r6, r0
 8003842:	000f      	movs	r7, r1
 8003844:	0014      	movs	r4, r2
 8003846:	18d5      	adds	r5, r2, r3
 8003848:	42ac      	cmp	r4, r5
 800384a:	d101      	bne.n	8003850 <__sfputs_r+0x12>
 800384c:	2000      	movs	r0, #0
 800384e:	e007      	b.n	8003860 <__sfputs_r+0x22>
 8003850:	7821      	ldrb	r1, [r4, #0]
 8003852:	003a      	movs	r2, r7
 8003854:	0030      	movs	r0, r6
 8003856:	f7ff ffdd 	bl	8003814 <__sfputc_r>
 800385a:	3401      	adds	r4, #1
 800385c:	1c43      	adds	r3, r0, #1
 800385e:	d1f3      	bne.n	8003848 <__sfputs_r+0xa>
 8003860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003864 <_vfiprintf_r>:
 8003864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003866:	b0a1      	sub	sp, #132	; 0x84
 8003868:	0006      	movs	r6, r0
 800386a:	000c      	movs	r4, r1
 800386c:	001f      	movs	r7, r3
 800386e:	9203      	str	r2, [sp, #12]
 8003870:	2800      	cmp	r0, #0
 8003872:	d004      	beq.n	800387e <_vfiprintf_r+0x1a>
 8003874:	6983      	ldr	r3, [r0, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <_vfiprintf_r+0x1a>
 800387a:	f7ff fdcf 	bl	800341c <__sinit>
 800387e:	4b8e      	ldr	r3, [pc, #568]	; (8003ab8 <_vfiprintf_r+0x254>)
 8003880:	429c      	cmp	r4, r3
 8003882:	d11c      	bne.n	80038be <_vfiprintf_r+0x5a>
 8003884:	6874      	ldr	r4, [r6, #4]
 8003886:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003888:	07db      	lsls	r3, r3, #31
 800388a:	d405      	bmi.n	8003898 <_vfiprintf_r+0x34>
 800388c:	89a3      	ldrh	r3, [r4, #12]
 800388e:	059b      	lsls	r3, r3, #22
 8003890:	d402      	bmi.n	8003898 <_vfiprintf_r+0x34>
 8003892:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003894:	f7ff fe63 	bl	800355e <__retarget_lock_acquire_recursive>
 8003898:	89a3      	ldrh	r3, [r4, #12]
 800389a:	071b      	lsls	r3, r3, #28
 800389c:	d502      	bpl.n	80038a4 <_vfiprintf_r+0x40>
 800389e:	6923      	ldr	r3, [r4, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d11d      	bne.n	80038e0 <_vfiprintf_r+0x7c>
 80038a4:	0021      	movs	r1, r4
 80038a6:	0030      	movs	r0, r6
 80038a8:	f7ff fc12 	bl	80030d0 <__swsetup_r>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d017      	beq.n	80038e0 <_vfiprintf_r+0x7c>
 80038b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038b2:	07db      	lsls	r3, r3, #31
 80038b4:	d50d      	bpl.n	80038d2 <_vfiprintf_r+0x6e>
 80038b6:	2001      	movs	r0, #1
 80038b8:	4240      	negs	r0, r0
 80038ba:	b021      	add	sp, #132	; 0x84
 80038bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038be:	4b7f      	ldr	r3, [pc, #508]	; (8003abc <_vfiprintf_r+0x258>)
 80038c0:	429c      	cmp	r4, r3
 80038c2:	d101      	bne.n	80038c8 <_vfiprintf_r+0x64>
 80038c4:	68b4      	ldr	r4, [r6, #8]
 80038c6:	e7de      	b.n	8003886 <_vfiprintf_r+0x22>
 80038c8:	4b7d      	ldr	r3, [pc, #500]	; (8003ac0 <_vfiprintf_r+0x25c>)
 80038ca:	429c      	cmp	r4, r3
 80038cc:	d1db      	bne.n	8003886 <_vfiprintf_r+0x22>
 80038ce:	68f4      	ldr	r4, [r6, #12]
 80038d0:	e7d9      	b.n	8003886 <_vfiprintf_r+0x22>
 80038d2:	89a3      	ldrh	r3, [r4, #12]
 80038d4:	059b      	lsls	r3, r3, #22
 80038d6:	d4ee      	bmi.n	80038b6 <_vfiprintf_r+0x52>
 80038d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038da:	f7ff fe41 	bl	8003560 <__retarget_lock_release_recursive>
 80038de:	e7ea      	b.n	80038b6 <_vfiprintf_r+0x52>
 80038e0:	2300      	movs	r3, #0
 80038e2:	ad08      	add	r5, sp, #32
 80038e4:	616b      	str	r3, [r5, #20]
 80038e6:	3320      	adds	r3, #32
 80038e8:	766b      	strb	r3, [r5, #25]
 80038ea:	3310      	adds	r3, #16
 80038ec:	76ab      	strb	r3, [r5, #26]
 80038ee:	9707      	str	r7, [sp, #28]
 80038f0:	9f03      	ldr	r7, [sp, #12]
 80038f2:	783b      	ldrb	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <_vfiprintf_r+0x98>
 80038f8:	2b25      	cmp	r3, #37	; 0x25
 80038fa:	d14e      	bne.n	800399a <_vfiprintf_r+0x136>
 80038fc:	9b03      	ldr	r3, [sp, #12]
 80038fe:	1afb      	subs	r3, r7, r3
 8003900:	9305      	str	r3, [sp, #20]
 8003902:	9b03      	ldr	r3, [sp, #12]
 8003904:	429f      	cmp	r7, r3
 8003906:	d00d      	beq.n	8003924 <_vfiprintf_r+0xc0>
 8003908:	9b05      	ldr	r3, [sp, #20]
 800390a:	0021      	movs	r1, r4
 800390c:	0030      	movs	r0, r6
 800390e:	9a03      	ldr	r2, [sp, #12]
 8003910:	f7ff ff95 	bl	800383e <__sfputs_r>
 8003914:	1c43      	adds	r3, r0, #1
 8003916:	d100      	bne.n	800391a <_vfiprintf_r+0xb6>
 8003918:	e0b5      	b.n	8003a86 <_vfiprintf_r+0x222>
 800391a:	696a      	ldr	r2, [r5, #20]
 800391c:	9b05      	ldr	r3, [sp, #20]
 800391e:	4694      	mov	ip, r2
 8003920:	4463      	add	r3, ip
 8003922:	616b      	str	r3, [r5, #20]
 8003924:	783b      	ldrb	r3, [r7, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d100      	bne.n	800392c <_vfiprintf_r+0xc8>
 800392a:	e0ac      	b.n	8003a86 <_vfiprintf_r+0x222>
 800392c:	2201      	movs	r2, #1
 800392e:	1c7b      	adds	r3, r7, #1
 8003930:	9303      	str	r3, [sp, #12]
 8003932:	2300      	movs	r3, #0
 8003934:	4252      	negs	r2, r2
 8003936:	606a      	str	r2, [r5, #4]
 8003938:	a904      	add	r1, sp, #16
 800393a:	3254      	adds	r2, #84	; 0x54
 800393c:	1852      	adds	r2, r2, r1
 800393e:	602b      	str	r3, [r5, #0]
 8003940:	60eb      	str	r3, [r5, #12]
 8003942:	60ab      	str	r3, [r5, #8]
 8003944:	7013      	strb	r3, [r2, #0]
 8003946:	65ab      	str	r3, [r5, #88]	; 0x58
 8003948:	9b03      	ldr	r3, [sp, #12]
 800394a:	2205      	movs	r2, #5
 800394c:	7819      	ldrb	r1, [r3, #0]
 800394e:	485d      	ldr	r0, [pc, #372]	; (8003ac4 <_vfiprintf_r+0x260>)
 8003950:	f000 fb4a 	bl	8003fe8 <memchr>
 8003954:	9b03      	ldr	r3, [sp, #12]
 8003956:	1c5f      	adds	r7, r3, #1
 8003958:	2800      	cmp	r0, #0
 800395a:	d120      	bne.n	800399e <_vfiprintf_r+0x13a>
 800395c:	682a      	ldr	r2, [r5, #0]
 800395e:	06d3      	lsls	r3, r2, #27
 8003960:	d504      	bpl.n	800396c <_vfiprintf_r+0x108>
 8003962:	2353      	movs	r3, #83	; 0x53
 8003964:	a904      	add	r1, sp, #16
 8003966:	185b      	adds	r3, r3, r1
 8003968:	2120      	movs	r1, #32
 800396a:	7019      	strb	r1, [r3, #0]
 800396c:	0713      	lsls	r3, r2, #28
 800396e:	d504      	bpl.n	800397a <_vfiprintf_r+0x116>
 8003970:	2353      	movs	r3, #83	; 0x53
 8003972:	a904      	add	r1, sp, #16
 8003974:	185b      	adds	r3, r3, r1
 8003976:	212b      	movs	r1, #43	; 0x2b
 8003978:	7019      	strb	r1, [r3, #0]
 800397a:	9b03      	ldr	r3, [sp, #12]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b2a      	cmp	r3, #42	; 0x2a
 8003980:	d016      	beq.n	80039b0 <_vfiprintf_r+0x14c>
 8003982:	2100      	movs	r1, #0
 8003984:	68eb      	ldr	r3, [r5, #12]
 8003986:	9f03      	ldr	r7, [sp, #12]
 8003988:	783a      	ldrb	r2, [r7, #0]
 800398a:	1c78      	adds	r0, r7, #1
 800398c:	3a30      	subs	r2, #48	; 0x30
 800398e:	4684      	mov	ip, r0
 8003990:	2a09      	cmp	r2, #9
 8003992:	d94f      	bls.n	8003a34 <_vfiprintf_r+0x1d0>
 8003994:	2900      	cmp	r1, #0
 8003996:	d111      	bne.n	80039bc <_vfiprintf_r+0x158>
 8003998:	e017      	b.n	80039ca <_vfiprintf_r+0x166>
 800399a:	3701      	adds	r7, #1
 800399c:	e7a9      	b.n	80038f2 <_vfiprintf_r+0x8e>
 800399e:	4b49      	ldr	r3, [pc, #292]	; (8003ac4 <_vfiprintf_r+0x260>)
 80039a0:	682a      	ldr	r2, [r5, #0]
 80039a2:	1ac0      	subs	r0, r0, r3
 80039a4:	2301      	movs	r3, #1
 80039a6:	4083      	lsls	r3, r0
 80039a8:	4313      	orrs	r3, r2
 80039aa:	602b      	str	r3, [r5, #0]
 80039ac:	9703      	str	r7, [sp, #12]
 80039ae:	e7cb      	b.n	8003948 <_vfiprintf_r+0xe4>
 80039b0:	9b07      	ldr	r3, [sp, #28]
 80039b2:	1d19      	adds	r1, r3, #4
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	9107      	str	r1, [sp, #28]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	db01      	blt.n	80039c0 <_vfiprintf_r+0x15c>
 80039bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80039be:	e004      	b.n	80039ca <_vfiprintf_r+0x166>
 80039c0:	425b      	negs	r3, r3
 80039c2:	60eb      	str	r3, [r5, #12]
 80039c4:	2302      	movs	r3, #2
 80039c6:	4313      	orrs	r3, r2
 80039c8:	602b      	str	r3, [r5, #0]
 80039ca:	783b      	ldrb	r3, [r7, #0]
 80039cc:	2b2e      	cmp	r3, #46	; 0x2e
 80039ce:	d10a      	bne.n	80039e6 <_vfiprintf_r+0x182>
 80039d0:	787b      	ldrb	r3, [r7, #1]
 80039d2:	2b2a      	cmp	r3, #42	; 0x2a
 80039d4:	d137      	bne.n	8003a46 <_vfiprintf_r+0x1e2>
 80039d6:	9b07      	ldr	r3, [sp, #28]
 80039d8:	3702      	adds	r7, #2
 80039da:	1d1a      	adds	r2, r3, #4
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	9207      	str	r2, [sp, #28]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	db2d      	blt.n	8003a40 <_vfiprintf_r+0x1dc>
 80039e4:	9309      	str	r3, [sp, #36]	; 0x24
 80039e6:	2203      	movs	r2, #3
 80039e8:	7839      	ldrb	r1, [r7, #0]
 80039ea:	4837      	ldr	r0, [pc, #220]	; (8003ac8 <_vfiprintf_r+0x264>)
 80039ec:	f000 fafc 	bl	8003fe8 <memchr>
 80039f0:	2800      	cmp	r0, #0
 80039f2:	d007      	beq.n	8003a04 <_vfiprintf_r+0x1a0>
 80039f4:	4b34      	ldr	r3, [pc, #208]	; (8003ac8 <_vfiprintf_r+0x264>)
 80039f6:	682a      	ldr	r2, [r5, #0]
 80039f8:	1ac0      	subs	r0, r0, r3
 80039fa:	2340      	movs	r3, #64	; 0x40
 80039fc:	4083      	lsls	r3, r0
 80039fe:	4313      	orrs	r3, r2
 8003a00:	3701      	adds	r7, #1
 8003a02:	602b      	str	r3, [r5, #0]
 8003a04:	7839      	ldrb	r1, [r7, #0]
 8003a06:	1c7b      	adds	r3, r7, #1
 8003a08:	2206      	movs	r2, #6
 8003a0a:	4830      	ldr	r0, [pc, #192]	; (8003acc <_vfiprintf_r+0x268>)
 8003a0c:	9303      	str	r3, [sp, #12]
 8003a0e:	7629      	strb	r1, [r5, #24]
 8003a10:	f000 faea 	bl	8003fe8 <memchr>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d045      	beq.n	8003aa4 <_vfiprintf_r+0x240>
 8003a18:	4b2d      	ldr	r3, [pc, #180]	; (8003ad0 <_vfiprintf_r+0x26c>)
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d127      	bne.n	8003a6e <_vfiprintf_r+0x20a>
 8003a1e:	2207      	movs	r2, #7
 8003a20:	9b07      	ldr	r3, [sp, #28]
 8003a22:	3307      	adds	r3, #7
 8003a24:	4393      	bics	r3, r2
 8003a26:	3308      	adds	r3, #8
 8003a28:	9307      	str	r3, [sp, #28]
 8003a2a:	696b      	ldr	r3, [r5, #20]
 8003a2c:	9a04      	ldr	r2, [sp, #16]
 8003a2e:	189b      	adds	r3, r3, r2
 8003a30:	616b      	str	r3, [r5, #20]
 8003a32:	e75d      	b.n	80038f0 <_vfiprintf_r+0x8c>
 8003a34:	210a      	movs	r1, #10
 8003a36:	434b      	muls	r3, r1
 8003a38:	4667      	mov	r7, ip
 8003a3a:	189b      	adds	r3, r3, r2
 8003a3c:	3909      	subs	r1, #9
 8003a3e:	e7a3      	b.n	8003988 <_vfiprintf_r+0x124>
 8003a40:	2301      	movs	r3, #1
 8003a42:	425b      	negs	r3, r3
 8003a44:	e7ce      	b.n	80039e4 <_vfiprintf_r+0x180>
 8003a46:	2300      	movs	r3, #0
 8003a48:	001a      	movs	r2, r3
 8003a4a:	3701      	adds	r7, #1
 8003a4c:	606b      	str	r3, [r5, #4]
 8003a4e:	7839      	ldrb	r1, [r7, #0]
 8003a50:	1c78      	adds	r0, r7, #1
 8003a52:	3930      	subs	r1, #48	; 0x30
 8003a54:	4684      	mov	ip, r0
 8003a56:	2909      	cmp	r1, #9
 8003a58:	d903      	bls.n	8003a62 <_vfiprintf_r+0x1fe>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0c3      	beq.n	80039e6 <_vfiprintf_r+0x182>
 8003a5e:	9209      	str	r2, [sp, #36]	; 0x24
 8003a60:	e7c1      	b.n	80039e6 <_vfiprintf_r+0x182>
 8003a62:	230a      	movs	r3, #10
 8003a64:	435a      	muls	r2, r3
 8003a66:	4667      	mov	r7, ip
 8003a68:	1852      	adds	r2, r2, r1
 8003a6a:	3b09      	subs	r3, #9
 8003a6c:	e7ef      	b.n	8003a4e <_vfiprintf_r+0x1ea>
 8003a6e:	ab07      	add	r3, sp, #28
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	0022      	movs	r2, r4
 8003a74:	0029      	movs	r1, r5
 8003a76:	0030      	movs	r0, r6
 8003a78:	4b16      	ldr	r3, [pc, #88]	; (8003ad4 <_vfiprintf_r+0x270>)
 8003a7a:	e000      	b.n	8003a7e <_vfiprintf_r+0x21a>
 8003a7c:	bf00      	nop
 8003a7e:	9004      	str	r0, [sp, #16]
 8003a80:	9b04      	ldr	r3, [sp, #16]
 8003a82:	3301      	adds	r3, #1
 8003a84:	d1d1      	bne.n	8003a2a <_vfiprintf_r+0x1c6>
 8003a86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a88:	07db      	lsls	r3, r3, #31
 8003a8a:	d405      	bmi.n	8003a98 <_vfiprintf_r+0x234>
 8003a8c:	89a3      	ldrh	r3, [r4, #12]
 8003a8e:	059b      	lsls	r3, r3, #22
 8003a90:	d402      	bmi.n	8003a98 <_vfiprintf_r+0x234>
 8003a92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a94:	f7ff fd64 	bl	8003560 <__retarget_lock_release_recursive>
 8003a98:	89a3      	ldrh	r3, [r4, #12]
 8003a9a:	065b      	lsls	r3, r3, #25
 8003a9c:	d500      	bpl.n	8003aa0 <_vfiprintf_r+0x23c>
 8003a9e:	e70a      	b.n	80038b6 <_vfiprintf_r+0x52>
 8003aa0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003aa2:	e70a      	b.n	80038ba <_vfiprintf_r+0x56>
 8003aa4:	ab07      	add	r3, sp, #28
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	0022      	movs	r2, r4
 8003aaa:	0029      	movs	r1, r5
 8003aac:	0030      	movs	r0, r6
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <_vfiprintf_r+0x270>)
 8003ab0:	f000 f882 	bl	8003bb8 <_printf_i>
 8003ab4:	e7e3      	b.n	8003a7e <_vfiprintf_r+0x21a>
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	080040f8 	.word	0x080040f8
 8003abc:	08004118 	.word	0x08004118
 8003ac0:	080040d8 	.word	0x080040d8
 8003ac4:	08004138 	.word	0x08004138
 8003ac8:	0800413e 	.word	0x0800413e
 8003acc:	08004142 	.word	0x08004142
 8003ad0:	00000000 	.word	0x00000000
 8003ad4:	0800383f 	.word	0x0800383f

08003ad8 <_printf_common>:
 8003ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ada:	0015      	movs	r5, r2
 8003adc:	9301      	str	r3, [sp, #4]
 8003ade:	688a      	ldr	r2, [r1, #8]
 8003ae0:	690b      	ldr	r3, [r1, #16]
 8003ae2:	000c      	movs	r4, r1
 8003ae4:	9000      	str	r0, [sp, #0]
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	da00      	bge.n	8003aec <_printf_common+0x14>
 8003aea:	0013      	movs	r3, r2
 8003aec:	0022      	movs	r2, r4
 8003aee:	602b      	str	r3, [r5, #0]
 8003af0:	3243      	adds	r2, #67	; 0x43
 8003af2:	7812      	ldrb	r2, [r2, #0]
 8003af4:	2a00      	cmp	r2, #0
 8003af6:	d001      	beq.n	8003afc <_printf_common+0x24>
 8003af8:	3301      	adds	r3, #1
 8003afa:	602b      	str	r3, [r5, #0]
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	069b      	lsls	r3, r3, #26
 8003b00:	d502      	bpl.n	8003b08 <_printf_common+0x30>
 8003b02:	682b      	ldr	r3, [r5, #0]
 8003b04:	3302      	adds	r3, #2
 8003b06:	602b      	str	r3, [r5, #0]
 8003b08:	6822      	ldr	r2, [r4, #0]
 8003b0a:	2306      	movs	r3, #6
 8003b0c:	0017      	movs	r7, r2
 8003b0e:	401f      	ands	r7, r3
 8003b10:	421a      	tst	r2, r3
 8003b12:	d027      	beq.n	8003b64 <_printf_common+0x8c>
 8003b14:	0023      	movs	r3, r4
 8003b16:	3343      	adds	r3, #67	; 0x43
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	1e5a      	subs	r2, r3, #1
 8003b1c:	4193      	sbcs	r3, r2
 8003b1e:	6822      	ldr	r2, [r4, #0]
 8003b20:	0692      	lsls	r2, r2, #26
 8003b22:	d430      	bmi.n	8003b86 <_printf_common+0xae>
 8003b24:	0022      	movs	r2, r4
 8003b26:	9901      	ldr	r1, [sp, #4]
 8003b28:	9800      	ldr	r0, [sp, #0]
 8003b2a:	9e08      	ldr	r6, [sp, #32]
 8003b2c:	3243      	adds	r2, #67	; 0x43
 8003b2e:	47b0      	blx	r6
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	d025      	beq.n	8003b80 <_printf_common+0xa8>
 8003b34:	2306      	movs	r3, #6
 8003b36:	6820      	ldr	r0, [r4, #0]
 8003b38:	682a      	ldr	r2, [r5, #0]
 8003b3a:	68e1      	ldr	r1, [r4, #12]
 8003b3c:	2500      	movs	r5, #0
 8003b3e:	4003      	ands	r3, r0
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d103      	bne.n	8003b4c <_printf_common+0x74>
 8003b44:	1a8d      	subs	r5, r1, r2
 8003b46:	43eb      	mvns	r3, r5
 8003b48:	17db      	asrs	r3, r3, #31
 8003b4a:	401d      	ands	r5, r3
 8003b4c:	68a3      	ldr	r3, [r4, #8]
 8003b4e:	6922      	ldr	r2, [r4, #16]
 8003b50:	4293      	cmp	r3, r2
 8003b52:	dd01      	ble.n	8003b58 <_printf_common+0x80>
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	18ed      	adds	r5, r5, r3
 8003b58:	2700      	movs	r7, #0
 8003b5a:	42bd      	cmp	r5, r7
 8003b5c:	d120      	bne.n	8003ba0 <_printf_common+0xc8>
 8003b5e:	2000      	movs	r0, #0
 8003b60:	e010      	b.n	8003b84 <_printf_common+0xac>
 8003b62:	3701      	adds	r7, #1
 8003b64:	68e3      	ldr	r3, [r4, #12]
 8003b66:	682a      	ldr	r2, [r5, #0]
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	42bb      	cmp	r3, r7
 8003b6c:	ddd2      	ble.n	8003b14 <_printf_common+0x3c>
 8003b6e:	0022      	movs	r2, r4
 8003b70:	2301      	movs	r3, #1
 8003b72:	9901      	ldr	r1, [sp, #4]
 8003b74:	9800      	ldr	r0, [sp, #0]
 8003b76:	9e08      	ldr	r6, [sp, #32]
 8003b78:	3219      	adds	r2, #25
 8003b7a:	47b0      	blx	r6
 8003b7c:	1c43      	adds	r3, r0, #1
 8003b7e:	d1f0      	bne.n	8003b62 <_printf_common+0x8a>
 8003b80:	2001      	movs	r0, #1
 8003b82:	4240      	negs	r0, r0
 8003b84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b86:	2030      	movs	r0, #48	; 0x30
 8003b88:	18e1      	adds	r1, r4, r3
 8003b8a:	3143      	adds	r1, #67	; 0x43
 8003b8c:	7008      	strb	r0, [r1, #0]
 8003b8e:	0021      	movs	r1, r4
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	3145      	adds	r1, #69	; 0x45
 8003b94:	7809      	ldrb	r1, [r1, #0]
 8003b96:	18a2      	adds	r2, r4, r2
 8003b98:	3243      	adds	r2, #67	; 0x43
 8003b9a:	3302      	adds	r3, #2
 8003b9c:	7011      	strb	r1, [r2, #0]
 8003b9e:	e7c1      	b.n	8003b24 <_printf_common+0x4c>
 8003ba0:	0022      	movs	r2, r4
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	9901      	ldr	r1, [sp, #4]
 8003ba6:	9800      	ldr	r0, [sp, #0]
 8003ba8:	9e08      	ldr	r6, [sp, #32]
 8003baa:	321a      	adds	r2, #26
 8003bac:	47b0      	blx	r6
 8003bae:	1c43      	adds	r3, r0, #1
 8003bb0:	d0e6      	beq.n	8003b80 <_printf_common+0xa8>
 8003bb2:	3701      	adds	r7, #1
 8003bb4:	e7d1      	b.n	8003b5a <_printf_common+0x82>
	...

08003bb8 <_printf_i>:
 8003bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bba:	b08b      	sub	sp, #44	; 0x2c
 8003bbc:	9206      	str	r2, [sp, #24]
 8003bbe:	000a      	movs	r2, r1
 8003bc0:	3243      	adds	r2, #67	; 0x43
 8003bc2:	9307      	str	r3, [sp, #28]
 8003bc4:	9005      	str	r0, [sp, #20]
 8003bc6:	9204      	str	r2, [sp, #16]
 8003bc8:	7e0a      	ldrb	r2, [r1, #24]
 8003bca:	000c      	movs	r4, r1
 8003bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003bce:	2a78      	cmp	r2, #120	; 0x78
 8003bd0:	d807      	bhi.n	8003be2 <_printf_i+0x2a>
 8003bd2:	2a62      	cmp	r2, #98	; 0x62
 8003bd4:	d809      	bhi.n	8003bea <_printf_i+0x32>
 8003bd6:	2a00      	cmp	r2, #0
 8003bd8:	d100      	bne.n	8003bdc <_printf_i+0x24>
 8003bda:	e0c1      	b.n	8003d60 <_printf_i+0x1a8>
 8003bdc:	2a58      	cmp	r2, #88	; 0x58
 8003bde:	d100      	bne.n	8003be2 <_printf_i+0x2a>
 8003be0:	e08c      	b.n	8003cfc <_printf_i+0x144>
 8003be2:	0026      	movs	r6, r4
 8003be4:	3642      	adds	r6, #66	; 0x42
 8003be6:	7032      	strb	r2, [r6, #0]
 8003be8:	e022      	b.n	8003c30 <_printf_i+0x78>
 8003bea:	0010      	movs	r0, r2
 8003bec:	3863      	subs	r0, #99	; 0x63
 8003bee:	2815      	cmp	r0, #21
 8003bf0:	d8f7      	bhi.n	8003be2 <_printf_i+0x2a>
 8003bf2:	f7fc fa87 	bl	8000104 <__gnu_thumb1_case_shi>
 8003bf6:	0016      	.short	0x0016
 8003bf8:	fff6001f 	.word	0xfff6001f
 8003bfc:	fff6fff6 	.word	0xfff6fff6
 8003c00:	001ffff6 	.word	0x001ffff6
 8003c04:	fff6fff6 	.word	0xfff6fff6
 8003c08:	fff6fff6 	.word	0xfff6fff6
 8003c0c:	003600a8 	.word	0x003600a8
 8003c10:	fff6009a 	.word	0xfff6009a
 8003c14:	00b9fff6 	.word	0x00b9fff6
 8003c18:	0036fff6 	.word	0x0036fff6
 8003c1c:	fff6fff6 	.word	0xfff6fff6
 8003c20:	009e      	.short	0x009e
 8003c22:	0026      	movs	r6, r4
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	3642      	adds	r6, #66	; 0x42
 8003c28:	1d11      	adds	r1, r2, #4
 8003c2a:	6019      	str	r1, [r3, #0]
 8003c2c:	6813      	ldr	r3, [r2, #0]
 8003c2e:	7033      	strb	r3, [r6, #0]
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0a7      	b.n	8003d84 <_printf_i+0x1cc>
 8003c34:	6808      	ldr	r0, [r1, #0]
 8003c36:	6819      	ldr	r1, [r3, #0]
 8003c38:	1d0a      	adds	r2, r1, #4
 8003c3a:	0605      	lsls	r5, r0, #24
 8003c3c:	d50b      	bpl.n	8003c56 <_printf_i+0x9e>
 8003c3e:	680d      	ldr	r5, [r1, #0]
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	2d00      	cmp	r5, #0
 8003c44:	da03      	bge.n	8003c4e <_printf_i+0x96>
 8003c46:	232d      	movs	r3, #45	; 0x2d
 8003c48:	9a04      	ldr	r2, [sp, #16]
 8003c4a:	426d      	negs	r5, r5
 8003c4c:	7013      	strb	r3, [r2, #0]
 8003c4e:	4b61      	ldr	r3, [pc, #388]	; (8003dd4 <_printf_i+0x21c>)
 8003c50:	270a      	movs	r7, #10
 8003c52:	9303      	str	r3, [sp, #12]
 8003c54:	e01b      	b.n	8003c8e <_printf_i+0xd6>
 8003c56:	680d      	ldr	r5, [r1, #0]
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	0641      	lsls	r1, r0, #25
 8003c5c:	d5f1      	bpl.n	8003c42 <_printf_i+0x8a>
 8003c5e:	b22d      	sxth	r5, r5
 8003c60:	e7ef      	b.n	8003c42 <_printf_i+0x8a>
 8003c62:	680d      	ldr	r5, [r1, #0]
 8003c64:	6819      	ldr	r1, [r3, #0]
 8003c66:	1d08      	adds	r0, r1, #4
 8003c68:	6018      	str	r0, [r3, #0]
 8003c6a:	062e      	lsls	r6, r5, #24
 8003c6c:	d501      	bpl.n	8003c72 <_printf_i+0xba>
 8003c6e:	680d      	ldr	r5, [r1, #0]
 8003c70:	e003      	b.n	8003c7a <_printf_i+0xc2>
 8003c72:	066d      	lsls	r5, r5, #25
 8003c74:	d5fb      	bpl.n	8003c6e <_printf_i+0xb6>
 8003c76:	680d      	ldr	r5, [r1, #0]
 8003c78:	b2ad      	uxth	r5, r5
 8003c7a:	4b56      	ldr	r3, [pc, #344]	; (8003dd4 <_printf_i+0x21c>)
 8003c7c:	2708      	movs	r7, #8
 8003c7e:	9303      	str	r3, [sp, #12]
 8003c80:	2a6f      	cmp	r2, #111	; 0x6f
 8003c82:	d000      	beq.n	8003c86 <_printf_i+0xce>
 8003c84:	3702      	adds	r7, #2
 8003c86:	0023      	movs	r3, r4
 8003c88:	2200      	movs	r2, #0
 8003c8a:	3343      	adds	r3, #67	; 0x43
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	6863      	ldr	r3, [r4, #4]
 8003c90:	60a3      	str	r3, [r4, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	db03      	blt.n	8003c9e <_printf_i+0xe6>
 8003c96:	2204      	movs	r2, #4
 8003c98:	6821      	ldr	r1, [r4, #0]
 8003c9a:	4391      	bics	r1, r2
 8003c9c:	6021      	str	r1, [r4, #0]
 8003c9e:	2d00      	cmp	r5, #0
 8003ca0:	d102      	bne.n	8003ca8 <_printf_i+0xf0>
 8003ca2:	9e04      	ldr	r6, [sp, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00c      	beq.n	8003cc2 <_printf_i+0x10a>
 8003ca8:	9e04      	ldr	r6, [sp, #16]
 8003caa:	0028      	movs	r0, r5
 8003cac:	0039      	movs	r1, r7
 8003cae:	f7fc fab9 	bl	8000224 <__aeabi_uidivmod>
 8003cb2:	9b03      	ldr	r3, [sp, #12]
 8003cb4:	3e01      	subs	r6, #1
 8003cb6:	5c5b      	ldrb	r3, [r3, r1]
 8003cb8:	7033      	strb	r3, [r6, #0]
 8003cba:	002b      	movs	r3, r5
 8003cbc:	0005      	movs	r5, r0
 8003cbe:	429f      	cmp	r7, r3
 8003cc0:	d9f3      	bls.n	8003caa <_printf_i+0xf2>
 8003cc2:	2f08      	cmp	r7, #8
 8003cc4:	d109      	bne.n	8003cda <_printf_i+0x122>
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	07db      	lsls	r3, r3, #31
 8003cca:	d506      	bpl.n	8003cda <_printf_i+0x122>
 8003ccc:	6863      	ldr	r3, [r4, #4]
 8003cce:	6922      	ldr	r2, [r4, #16]
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	dc02      	bgt.n	8003cda <_printf_i+0x122>
 8003cd4:	2330      	movs	r3, #48	; 0x30
 8003cd6:	3e01      	subs	r6, #1
 8003cd8:	7033      	strb	r3, [r6, #0]
 8003cda:	9b04      	ldr	r3, [sp, #16]
 8003cdc:	1b9b      	subs	r3, r3, r6
 8003cde:	6123      	str	r3, [r4, #16]
 8003ce0:	9b07      	ldr	r3, [sp, #28]
 8003ce2:	0021      	movs	r1, r4
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	9805      	ldr	r0, [sp, #20]
 8003ce8:	9b06      	ldr	r3, [sp, #24]
 8003cea:	aa09      	add	r2, sp, #36	; 0x24
 8003cec:	f7ff fef4 	bl	8003ad8 <_printf_common>
 8003cf0:	1c43      	adds	r3, r0, #1
 8003cf2:	d14c      	bne.n	8003d8e <_printf_i+0x1d6>
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	4240      	negs	r0, r0
 8003cf8:	b00b      	add	sp, #44	; 0x2c
 8003cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cfc:	3145      	adds	r1, #69	; 0x45
 8003cfe:	700a      	strb	r2, [r1, #0]
 8003d00:	4a34      	ldr	r2, [pc, #208]	; (8003dd4 <_printf_i+0x21c>)
 8003d02:	9203      	str	r2, [sp, #12]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	6821      	ldr	r1, [r4, #0]
 8003d08:	ca20      	ldmia	r2!, {r5}
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	0608      	lsls	r0, r1, #24
 8003d0e:	d516      	bpl.n	8003d3e <_printf_i+0x186>
 8003d10:	07cb      	lsls	r3, r1, #31
 8003d12:	d502      	bpl.n	8003d1a <_printf_i+0x162>
 8003d14:	2320      	movs	r3, #32
 8003d16:	4319      	orrs	r1, r3
 8003d18:	6021      	str	r1, [r4, #0]
 8003d1a:	2710      	movs	r7, #16
 8003d1c:	2d00      	cmp	r5, #0
 8003d1e:	d1b2      	bne.n	8003c86 <_printf_i+0xce>
 8003d20:	2320      	movs	r3, #32
 8003d22:	6822      	ldr	r2, [r4, #0]
 8003d24:	439a      	bics	r2, r3
 8003d26:	6022      	str	r2, [r4, #0]
 8003d28:	e7ad      	b.n	8003c86 <_printf_i+0xce>
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	6809      	ldr	r1, [r1, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	6022      	str	r2, [r4, #0]
 8003d32:	0022      	movs	r2, r4
 8003d34:	2178      	movs	r1, #120	; 0x78
 8003d36:	3245      	adds	r2, #69	; 0x45
 8003d38:	7011      	strb	r1, [r2, #0]
 8003d3a:	4a27      	ldr	r2, [pc, #156]	; (8003dd8 <_printf_i+0x220>)
 8003d3c:	e7e1      	b.n	8003d02 <_printf_i+0x14a>
 8003d3e:	0648      	lsls	r0, r1, #25
 8003d40:	d5e6      	bpl.n	8003d10 <_printf_i+0x158>
 8003d42:	b2ad      	uxth	r5, r5
 8003d44:	e7e4      	b.n	8003d10 <_printf_i+0x158>
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	680d      	ldr	r5, [r1, #0]
 8003d4a:	1d10      	adds	r0, r2, #4
 8003d4c:	6949      	ldr	r1, [r1, #20]
 8003d4e:	6018      	str	r0, [r3, #0]
 8003d50:	6813      	ldr	r3, [r2, #0]
 8003d52:	062e      	lsls	r6, r5, #24
 8003d54:	d501      	bpl.n	8003d5a <_printf_i+0x1a2>
 8003d56:	6019      	str	r1, [r3, #0]
 8003d58:	e002      	b.n	8003d60 <_printf_i+0x1a8>
 8003d5a:	066d      	lsls	r5, r5, #25
 8003d5c:	d5fb      	bpl.n	8003d56 <_printf_i+0x19e>
 8003d5e:	8019      	strh	r1, [r3, #0]
 8003d60:	2300      	movs	r3, #0
 8003d62:	9e04      	ldr	r6, [sp, #16]
 8003d64:	6123      	str	r3, [r4, #16]
 8003d66:	e7bb      	b.n	8003ce0 <_printf_i+0x128>
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	1d11      	adds	r1, r2, #4
 8003d6c:	6019      	str	r1, [r3, #0]
 8003d6e:	6816      	ldr	r6, [r2, #0]
 8003d70:	2100      	movs	r1, #0
 8003d72:	0030      	movs	r0, r6
 8003d74:	6862      	ldr	r2, [r4, #4]
 8003d76:	f000 f937 	bl	8003fe8 <memchr>
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d001      	beq.n	8003d82 <_printf_i+0x1ca>
 8003d7e:	1b80      	subs	r0, r0, r6
 8003d80:	6060      	str	r0, [r4, #4]
 8003d82:	6863      	ldr	r3, [r4, #4]
 8003d84:	6123      	str	r3, [r4, #16]
 8003d86:	2300      	movs	r3, #0
 8003d88:	9a04      	ldr	r2, [sp, #16]
 8003d8a:	7013      	strb	r3, [r2, #0]
 8003d8c:	e7a8      	b.n	8003ce0 <_printf_i+0x128>
 8003d8e:	6923      	ldr	r3, [r4, #16]
 8003d90:	0032      	movs	r2, r6
 8003d92:	9906      	ldr	r1, [sp, #24]
 8003d94:	9805      	ldr	r0, [sp, #20]
 8003d96:	9d07      	ldr	r5, [sp, #28]
 8003d98:	47a8      	blx	r5
 8003d9a:	1c43      	adds	r3, r0, #1
 8003d9c:	d0aa      	beq.n	8003cf4 <_printf_i+0x13c>
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	079b      	lsls	r3, r3, #30
 8003da2:	d415      	bmi.n	8003dd0 <_printf_i+0x218>
 8003da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da6:	68e0      	ldr	r0, [r4, #12]
 8003da8:	4298      	cmp	r0, r3
 8003daa:	daa5      	bge.n	8003cf8 <_printf_i+0x140>
 8003dac:	0018      	movs	r0, r3
 8003dae:	e7a3      	b.n	8003cf8 <_printf_i+0x140>
 8003db0:	0022      	movs	r2, r4
 8003db2:	2301      	movs	r3, #1
 8003db4:	9906      	ldr	r1, [sp, #24]
 8003db6:	9805      	ldr	r0, [sp, #20]
 8003db8:	9e07      	ldr	r6, [sp, #28]
 8003dba:	3219      	adds	r2, #25
 8003dbc:	47b0      	blx	r6
 8003dbe:	1c43      	adds	r3, r0, #1
 8003dc0:	d098      	beq.n	8003cf4 <_printf_i+0x13c>
 8003dc2:	3501      	adds	r5, #1
 8003dc4:	68e3      	ldr	r3, [r4, #12]
 8003dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	42ab      	cmp	r3, r5
 8003dcc:	dcf0      	bgt.n	8003db0 <_printf_i+0x1f8>
 8003dce:	e7e9      	b.n	8003da4 <_printf_i+0x1ec>
 8003dd0:	2500      	movs	r5, #0
 8003dd2:	e7f7      	b.n	8003dc4 <_printf_i+0x20c>
 8003dd4:	08004149 	.word	0x08004149
 8003dd8:	0800415a 	.word	0x0800415a

08003ddc <_putc_r>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	0006      	movs	r6, r0
 8003de0:	000d      	movs	r5, r1
 8003de2:	0014      	movs	r4, r2
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d004      	beq.n	8003df2 <_putc_r+0x16>
 8003de8:	6983      	ldr	r3, [r0, #24]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <_putc_r+0x16>
 8003dee:	f7ff fb15 	bl	800341c <__sinit>
 8003df2:	4b1c      	ldr	r3, [pc, #112]	; (8003e64 <_putc_r+0x88>)
 8003df4:	429c      	cmp	r4, r3
 8003df6:	d124      	bne.n	8003e42 <_putc_r+0x66>
 8003df8:	6874      	ldr	r4, [r6, #4]
 8003dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dfc:	07db      	lsls	r3, r3, #31
 8003dfe:	d405      	bmi.n	8003e0c <_putc_r+0x30>
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	059b      	lsls	r3, r3, #22
 8003e04:	d402      	bmi.n	8003e0c <_putc_r+0x30>
 8003e06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e08:	f7ff fba9 	bl	800355e <__retarget_lock_acquire_recursive>
 8003e0c:	68a3      	ldr	r3, [r4, #8]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	60a3      	str	r3, [r4, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	da05      	bge.n	8003e22 <_putc_r+0x46>
 8003e16:	69a2      	ldr	r2, [r4, #24]
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	db1c      	blt.n	8003e56 <_putc_r+0x7a>
 8003e1c:	b2eb      	uxtb	r3, r5
 8003e1e:	2b0a      	cmp	r3, #10
 8003e20:	d019      	beq.n	8003e56 <_putc_r+0x7a>
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	6022      	str	r2, [r4, #0]
 8003e28:	701d      	strb	r5, [r3, #0]
 8003e2a:	b2ed      	uxtb	r5, r5
 8003e2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e2e:	07db      	lsls	r3, r3, #31
 8003e30:	d405      	bmi.n	8003e3e <_putc_r+0x62>
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	059b      	lsls	r3, r3, #22
 8003e36:	d402      	bmi.n	8003e3e <_putc_r+0x62>
 8003e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e3a:	f7ff fb91 	bl	8003560 <__retarget_lock_release_recursive>
 8003e3e:	0028      	movs	r0, r5
 8003e40:	bd70      	pop	{r4, r5, r6, pc}
 8003e42:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <_putc_r+0x8c>)
 8003e44:	429c      	cmp	r4, r3
 8003e46:	d101      	bne.n	8003e4c <_putc_r+0x70>
 8003e48:	68b4      	ldr	r4, [r6, #8]
 8003e4a:	e7d6      	b.n	8003dfa <_putc_r+0x1e>
 8003e4c:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <_putc_r+0x90>)
 8003e4e:	429c      	cmp	r4, r3
 8003e50:	d1d3      	bne.n	8003dfa <_putc_r+0x1e>
 8003e52:	68f4      	ldr	r4, [r6, #12]
 8003e54:	e7d1      	b.n	8003dfa <_putc_r+0x1e>
 8003e56:	0029      	movs	r1, r5
 8003e58:	0022      	movs	r2, r4
 8003e5a:	0030      	movs	r0, r6
 8003e5c:	f7ff f8e2 	bl	8003024 <__swbuf_r>
 8003e60:	0005      	movs	r5, r0
 8003e62:	e7e3      	b.n	8003e2c <_putc_r+0x50>
 8003e64:	080040f8 	.word	0x080040f8
 8003e68:	08004118 	.word	0x08004118
 8003e6c:	080040d8 	.word	0x080040d8

08003e70 <_sbrk_r>:
 8003e70:	2300      	movs	r3, #0
 8003e72:	b570      	push	{r4, r5, r6, lr}
 8003e74:	4d06      	ldr	r5, [pc, #24]	; (8003e90 <_sbrk_r+0x20>)
 8003e76:	0004      	movs	r4, r0
 8003e78:	0008      	movs	r0, r1
 8003e7a:	602b      	str	r3, [r5, #0]
 8003e7c:	f7fc fdac 	bl	80009d8 <_sbrk>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d103      	bne.n	8003e8c <_sbrk_r+0x1c>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d000      	beq.n	8003e8c <_sbrk_r+0x1c>
 8003e8a:	6023      	str	r3, [r4, #0]
 8003e8c:	bd70      	pop	{r4, r5, r6, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	200003ac 	.word	0x200003ac

08003e94 <__sread>:
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	000c      	movs	r4, r1
 8003e98:	250e      	movs	r5, #14
 8003e9a:	5f49      	ldrsh	r1, [r1, r5]
 8003e9c:	f000 f8c0 	bl	8004020 <_read_r>
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	db03      	blt.n	8003eac <__sread+0x18>
 8003ea4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ea6:	181b      	adds	r3, r3, r0
 8003ea8:	6563      	str	r3, [r4, #84]	; 0x54
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	4a02      	ldr	r2, [pc, #8]	; (8003eb8 <__sread+0x24>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	81a3      	strh	r3, [r4, #12]
 8003eb4:	e7f9      	b.n	8003eaa <__sread+0x16>
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	ffffefff 	.word	0xffffefff

08003ebc <__swrite>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	001f      	movs	r7, r3
 8003ec0:	898b      	ldrh	r3, [r1, #12]
 8003ec2:	0005      	movs	r5, r0
 8003ec4:	000c      	movs	r4, r1
 8003ec6:	0016      	movs	r6, r2
 8003ec8:	05db      	lsls	r3, r3, #23
 8003eca:	d505      	bpl.n	8003ed8 <__swrite+0x1c>
 8003ecc:	230e      	movs	r3, #14
 8003ece:	5ec9      	ldrsh	r1, [r1, r3]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	f000 f874 	bl	8003fc0 <_lseek_r>
 8003ed8:	89a3      	ldrh	r3, [r4, #12]
 8003eda:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <__swrite+0x34>)
 8003edc:	0028      	movs	r0, r5
 8003ede:	4013      	ands	r3, r2
 8003ee0:	81a3      	strh	r3, [r4, #12]
 8003ee2:	0032      	movs	r2, r6
 8003ee4:	230e      	movs	r3, #14
 8003ee6:	5ee1      	ldrsh	r1, [r4, r3]
 8003ee8:	003b      	movs	r3, r7
 8003eea:	f000 f81f 	bl	8003f2c <_write_r>
 8003eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ef0:	ffffefff 	.word	0xffffefff

08003ef4 <__sseek>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	000c      	movs	r4, r1
 8003ef8:	250e      	movs	r5, #14
 8003efa:	5f49      	ldrsh	r1, [r1, r5]
 8003efc:	f000 f860 	bl	8003fc0 <_lseek_r>
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	1c42      	adds	r2, r0, #1
 8003f04:	d103      	bne.n	8003f0e <__sseek+0x1a>
 8003f06:	4a05      	ldr	r2, [pc, #20]	; (8003f1c <__sseek+0x28>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	81a3      	strh	r3, [r4, #12]
 8003f0c:	bd70      	pop	{r4, r5, r6, pc}
 8003f0e:	2280      	movs	r2, #128	; 0x80
 8003f10:	0152      	lsls	r2, r2, #5
 8003f12:	4313      	orrs	r3, r2
 8003f14:	81a3      	strh	r3, [r4, #12]
 8003f16:	6560      	str	r0, [r4, #84]	; 0x54
 8003f18:	e7f8      	b.n	8003f0c <__sseek+0x18>
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	ffffefff 	.word	0xffffefff

08003f20 <__sclose>:
 8003f20:	b510      	push	{r4, lr}
 8003f22:	230e      	movs	r3, #14
 8003f24:	5ec9      	ldrsh	r1, [r1, r3]
 8003f26:	f000 f815 	bl	8003f54 <_close_r>
 8003f2a:	bd10      	pop	{r4, pc}

08003f2c <_write_r>:
 8003f2c:	b570      	push	{r4, r5, r6, lr}
 8003f2e:	0004      	movs	r4, r0
 8003f30:	0008      	movs	r0, r1
 8003f32:	0011      	movs	r1, r2
 8003f34:	001a      	movs	r2, r3
 8003f36:	2300      	movs	r3, #0
 8003f38:	4d05      	ldr	r5, [pc, #20]	; (8003f50 <_write_r+0x24>)
 8003f3a:	602b      	str	r3, [r5, #0]
 8003f3c:	f7fd fd92 	bl	8001a64 <_write>
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	d103      	bne.n	8003f4c <_write_r+0x20>
 8003f44:	682b      	ldr	r3, [r5, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d000      	beq.n	8003f4c <_write_r+0x20>
 8003f4a:	6023      	str	r3, [r4, #0]
 8003f4c:	bd70      	pop	{r4, r5, r6, pc}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	200003ac 	.word	0x200003ac

08003f54 <_close_r>:
 8003f54:	2300      	movs	r3, #0
 8003f56:	b570      	push	{r4, r5, r6, lr}
 8003f58:	4d06      	ldr	r5, [pc, #24]	; (8003f74 <_close_r+0x20>)
 8003f5a:	0004      	movs	r4, r0
 8003f5c:	0008      	movs	r0, r1
 8003f5e:	602b      	str	r3, [r5, #0]
 8003f60:	f7fc fd0d 	bl	800097e <_close>
 8003f64:	1c43      	adds	r3, r0, #1
 8003f66:	d103      	bne.n	8003f70 <_close_r+0x1c>
 8003f68:	682b      	ldr	r3, [r5, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d000      	beq.n	8003f70 <_close_r+0x1c>
 8003f6e:	6023      	str	r3, [r4, #0]
 8003f70:	bd70      	pop	{r4, r5, r6, pc}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	200003ac 	.word	0x200003ac

08003f78 <_fstat_r>:
 8003f78:	2300      	movs	r3, #0
 8003f7a:	b570      	push	{r4, r5, r6, lr}
 8003f7c:	4d06      	ldr	r5, [pc, #24]	; (8003f98 <_fstat_r+0x20>)
 8003f7e:	0004      	movs	r4, r0
 8003f80:	0008      	movs	r0, r1
 8003f82:	0011      	movs	r1, r2
 8003f84:	602b      	str	r3, [r5, #0]
 8003f86:	f7fc fd04 	bl	8000992 <_fstat>
 8003f8a:	1c43      	adds	r3, r0, #1
 8003f8c:	d103      	bne.n	8003f96 <_fstat_r+0x1e>
 8003f8e:	682b      	ldr	r3, [r5, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d000      	beq.n	8003f96 <_fstat_r+0x1e>
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	bd70      	pop	{r4, r5, r6, pc}
 8003f98:	200003ac 	.word	0x200003ac

08003f9c <_isatty_r>:
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	b570      	push	{r4, r5, r6, lr}
 8003fa0:	4d06      	ldr	r5, [pc, #24]	; (8003fbc <_isatty_r+0x20>)
 8003fa2:	0004      	movs	r4, r0
 8003fa4:	0008      	movs	r0, r1
 8003fa6:	602b      	str	r3, [r5, #0]
 8003fa8:	f7fc fd01 	bl	80009ae <_isatty>
 8003fac:	1c43      	adds	r3, r0, #1
 8003fae:	d103      	bne.n	8003fb8 <_isatty_r+0x1c>
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d000      	beq.n	8003fb8 <_isatty_r+0x1c>
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	bd70      	pop	{r4, r5, r6, pc}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	200003ac 	.word	0x200003ac

08003fc0 <_lseek_r>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	0004      	movs	r4, r0
 8003fc4:	0008      	movs	r0, r1
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	001a      	movs	r2, r3
 8003fca:	2300      	movs	r3, #0
 8003fcc:	4d05      	ldr	r5, [pc, #20]	; (8003fe4 <_lseek_r+0x24>)
 8003fce:	602b      	str	r3, [r5, #0]
 8003fd0:	f7fc fcf6 	bl	80009c0 <_lseek>
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	d103      	bne.n	8003fe0 <_lseek_r+0x20>
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d000      	beq.n	8003fe0 <_lseek_r+0x20>
 8003fde:	6023      	str	r3, [r4, #0]
 8003fe0:	bd70      	pop	{r4, r5, r6, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	200003ac 	.word	0x200003ac

08003fe8 <memchr>:
 8003fe8:	b2c9      	uxtb	r1, r1
 8003fea:	1882      	adds	r2, r0, r2
 8003fec:	4290      	cmp	r0, r2
 8003fee:	d101      	bne.n	8003ff4 <memchr+0xc>
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	4770      	bx	lr
 8003ff4:	7803      	ldrb	r3, [r0, #0]
 8003ff6:	428b      	cmp	r3, r1
 8003ff8:	d0fb      	beq.n	8003ff2 <memchr+0xa>
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	e7f6      	b.n	8003fec <memchr+0x4>
	...

08004000 <__malloc_lock>:
 8004000:	b510      	push	{r4, lr}
 8004002:	4802      	ldr	r0, [pc, #8]	; (800400c <__malloc_lock+0xc>)
 8004004:	f7ff faab 	bl	800355e <__retarget_lock_acquire_recursive>
 8004008:	bd10      	pop	{r4, pc}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	200003a0 	.word	0x200003a0

08004010 <__malloc_unlock>:
 8004010:	b510      	push	{r4, lr}
 8004012:	4802      	ldr	r0, [pc, #8]	; (800401c <__malloc_unlock+0xc>)
 8004014:	f7ff faa4 	bl	8003560 <__retarget_lock_release_recursive>
 8004018:	bd10      	pop	{r4, pc}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	200003a0 	.word	0x200003a0

08004020 <_read_r>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	0004      	movs	r4, r0
 8004024:	0008      	movs	r0, r1
 8004026:	0011      	movs	r1, r2
 8004028:	001a      	movs	r2, r3
 800402a:	2300      	movs	r3, #0
 800402c:	4d05      	ldr	r5, [pc, #20]	; (8004044 <_read_r+0x24>)
 800402e:	602b      	str	r3, [r5, #0]
 8004030:	f7fc fc88 	bl	8000944 <_read>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d103      	bne.n	8004040 <_read_r+0x20>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d000      	beq.n	8004040 <_read_r+0x20>
 800403e:	6023      	str	r3, [r4, #0]
 8004040:	bd70      	pop	{r4, r5, r6, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	200003ac 	.word	0x200003ac

08004048 <_init>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404e:	bc08      	pop	{r3}
 8004050:	469e      	mov	lr, r3
 8004052:	4770      	bx	lr

08004054 <_fini>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405a:	bc08      	pop	{r3}
 800405c:	469e      	mov	lr, r3
 800405e:	4770      	bx	lr
