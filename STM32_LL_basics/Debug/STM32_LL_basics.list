
STM32_LL_basics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002304  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080023c0  080023c0  000123c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023e8  080023e8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080023e8  080023e8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023e8  080023e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023e8  080023e8  000123e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023ec  080023ec  000123ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080023f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080023f4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080023f4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000054ee  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015b3  00000000  00000000  0002551a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  00026ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  00027200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001561c  00000000  00000000  00027868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005b36  00000000  00000000  0003ce84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070571  00000000  00000000  000429ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b2f2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001810  00000000  00000000  000b2f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080023a8 	.word	0x080023a8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	080023a8 	.word	0x080023a8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000336:	6959      	ldr	r1, [r3, #20]
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <LL_AHB1_GRP1_EnableClock+0x28>)
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	430a      	orrs	r2, r1
 800033e:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	4013      	ands	r3, r2
 8000348:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800034a:	68fb      	ldr	r3, [r7, #12]
}
 800034c:	46c0      	nop			; (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	b004      	add	sp, #16
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40021000 	.word	0x40021000

08000358 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 8000362:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <LL_SYSCFG_SetEXTISource+0x48>)
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	21ff      	movs	r1, #255	; 0xff
 8000368:	400b      	ands	r3, r1
 800036a:	3302      	adds	r3, #2
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	589b      	ldr	r3, [r3, r2]
 8000370:	683a      	ldr	r2, [r7, #0]
 8000372:	0c12      	lsrs	r2, r2, #16
 8000374:	210f      	movs	r1, #15
 8000376:	4091      	lsls	r1, r2
 8000378:	000a      	movs	r2, r1
 800037a:	43d2      	mvns	r2, r2
 800037c:	401a      	ands	r2, r3
 800037e:	0011      	movs	r1, r2
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	0c1b      	lsrs	r3, r3, #16
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	409a      	lsls	r2, r3
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <LL_SYSCFG_SetEXTISource+0x48>)
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	24ff      	movs	r4, #255	; 0xff
 800038e:	4023      	ands	r3, r4
 8000390:	430a      	orrs	r2, r1
 8000392:	3302      	adds	r3, #2
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	501a      	str	r2, [r3, r0]
}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	b003      	add	sp, #12
 800039e:	bd90      	pop	{r4, r7, pc}
 80003a0:	40010000 	.word	0x40010000

080003a4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	6819      	ldr	r1, [r3, #0]
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	435b      	muls	r3, r3
 80003b8:	001a      	movs	r2, r3
 80003ba:	0013      	movs	r3, r2
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	189b      	adds	r3, r3, r2
 80003c0:	43db      	mvns	r3, r3
 80003c2:	400b      	ands	r3, r1
 80003c4:	001a      	movs	r2, r3
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	435b      	muls	r3, r3
 80003ca:	6879      	ldr	r1, [r7, #4]
 80003cc:	434b      	muls	r3, r1
 80003ce:	431a      	orrs	r2, r3
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	601a      	str	r2, [r3, #0]
}
 80003d4:	46c0      	nop			; (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b004      	add	sp, #16
 80003da:	bd80      	pop	{r7, pc}

080003dc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	68d9      	ldr	r1, [r3, #12]
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	435b      	muls	r3, r3
 80003f0:	001a      	movs	r2, r3
 80003f2:	0013      	movs	r3, r2
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	189b      	adds	r3, r3, r2
 80003f8:	43db      	mvns	r3, r3
 80003fa:	400b      	ands	r3, r1
 80003fc:	001a      	movs	r2, r3
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	435b      	muls	r3, r3
 8000402:	6879      	ldr	r1, [r7, #4]
 8000404:	434b      	muls	r3, r1
 8000406:	431a      	orrs	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	60da      	str	r2, [r3, #12]
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b004      	add	sp, #16
 8000412:	bd80      	pop	{r7, pc}

08000414 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800041a:	003b      	movs	r3, r7
 800041c:	0018      	movs	r0, r3
 800041e:	2308      	movs	r3, #8
 8000420:	001a      	movs	r2, r3
 8000422:	2100      	movs	r1, #0
 8000424:	f001 ffb8 	bl	8002398 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	031b      	lsls	r3, r3, #12
 800042c:	0018      	movs	r0, r3
 800042e:	f7ff ff7d 	bl	800032c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000432:	2380      	movs	r3, #128	; 0x80
 8000434:	03db      	lsls	r3, r3, #15
 8000436:	0018      	movs	r0, r3
 8000438:	f7ff ff78 	bl	800032c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	029b      	lsls	r3, r3, #10
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff ff73 	bl	800032c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <MX_GPIO_Init+0x90>)
 8000448:	0019      	movs	r1, r3
 800044a:	2002      	movs	r0, #2
 800044c:	f7ff ff84 	bl	8000358 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_13, LL_GPIO_PULL_NO);
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	019b      	lsls	r3, r3, #6
 8000454:	4814      	ldr	r0, [pc, #80]	; (80004a8 <MX_GPIO_Init+0x94>)
 8000456:	2200      	movs	r2, #0
 8000458:	0019      	movs	r1, r3
 800045a:	f7ff ffbf 	bl	80003dc <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_13, LL_GPIO_MODE_INPUT);
 800045e:	2380      	movs	r3, #128	; 0x80
 8000460:	019b      	lsls	r3, r3, #6
 8000462:	4811      	ldr	r0, [pc, #68]	; (80004a8 <MX_GPIO_Init+0x94>)
 8000464:	2200      	movs	r2, #0
 8000466:	0019      	movs	r1, r3
 8000468:	f7ff ff9c 	bl	80003a4 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800046c:	003b      	movs	r3, r7
 800046e:	2280      	movs	r2, #128	; 0x80
 8000470:	0192      	lsls	r2, r2, #6
 8000472:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000474:	003b      	movs	r3, r7
 8000476:	2201      	movs	r2, #1
 8000478:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800047a:	003b      	movs	r3, r7
 800047c:	2200      	movs	r2, #0
 800047e:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000480:	003b      	movs	r3, r7
 8000482:	2202      	movs	r2, #2
 8000484:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000486:	003b      	movs	r3, r7
 8000488:	0018      	movs	r0, r3
 800048a:	f000 ff13 	bl	80012b4 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 800048e:	2100      	movs	r1, #0
 8000490:	2007      	movs	r0, #7
 8000492:	f7ff fedd 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000496:	2007      	movs	r0, #7
 8000498:	f7ff fec0 	bl	800021c <__NVIC_EnableIRQ>

}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	00040003 	.word	0x00040003
 80004a8:	48000800 	.word	0x48000800

080004ac <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <LL_RCC_HSI_Enable+0x18>)
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <LL_RCC_HSI_Enable+0x18>)
 80004b6:	2101      	movs	r1, #1
 80004b8:	430a      	orrs	r2, r1
 80004ba:	601a      	str	r2, [r3, #0]
}
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	40021000 	.word	0x40021000

080004c8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <LL_RCC_HSI_IsReady+0x1c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2202      	movs	r2, #2
 80004d2:	4013      	ands	r3, r2
 80004d4:	3b02      	subs	r3, #2
 80004d6:	425a      	negs	r2, r3
 80004d8:	4153      	adcs	r3, r2
 80004da:	b2db      	uxtb	r3, r3
}
 80004dc:	0018      	movs	r0, r3
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40021000 	.word	0x40021000

080004e8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	22f8      	movs	r2, #248	; 0xf8
 80004f6:	4393      	bics	r3, r2
 80004f8:	0019      	movs	r1, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	00da      	lsls	r2, r3, #3
 80004fe:	4b03      	ldr	r3, [pc, #12]	; (800050c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000500:	430a      	orrs	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b002      	add	sp, #8
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000

08000510 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <LL_RCC_SetSysClkSource+0x24>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	2203      	movs	r2, #3
 800051e:	4393      	bics	r3, r2
 8000520:	0019      	movs	r1, r3
 8000522:	4b04      	ldr	r3, [pc, #16]	; (8000534 <LL_RCC_SetSysClkSource+0x24>)
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	430a      	orrs	r2, r1
 8000528:	605a      	str	r2, [r3, #4]
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b002      	add	sp, #8
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	40021000 	.word	0x40021000

08000538 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <LL_RCC_GetSysClkSource+0x14>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	220c      	movs	r2, #12
 8000542:	4013      	ands	r3, r2
}
 8000544:	0018      	movs	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40021000 	.word	0x40021000

08000550 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <LL_RCC_SetAHBPrescaler+0x24>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	22f0      	movs	r2, #240	; 0xf0
 800055e:	4393      	bics	r3, r2
 8000560:	0019      	movs	r1, r3
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <LL_RCC_SetAHBPrescaler+0x24>)
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	430a      	orrs	r2, r1
 8000568:	605a      	str	r2, [r3, #4]
}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40021000 	.word	0x40021000

08000578 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000586:	4013      	ands	r3, r2
 8000588:	0019      	movs	r1, r3
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <LL_RCC_SetAPB1Prescaler+0x24>)
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	430a      	orrs	r2, r1
 8000590:	605a      	str	r2, [r3, #4]
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b002      	add	sp, #8
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	40021000 	.word	0x40021000
 80005a0:	fffff8ff 	.word	0xfffff8ff

080005a4 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <LL_RCC_SetUSARTClockSource+0x30>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	0e12      	lsrs	r2, r2, #24
 80005b4:	2103      	movs	r1, #3
 80005b6:	4091      	lsls	r1, r2
 80005b8:	000a      	movs	r2, r1
 80005ba:	43d2      	mvns	r2, r2
 80005bc:	401a      	ands	r2, r3
 80005be:	0011      	movs	r1, r2
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	021b      	lsls	r3, r3, #8
 80005c4:	0a1a      	lsrs	r2, r3, #8
 80005c6:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <LL_RCC_SetUSARTClockSource+0x30>)
 80005c8:	430a      	orrs	r2, r1
 80005ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b002      	add	sp, #8
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000

080005d8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <LL_RCC_PLL_Enable+0x18>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <LL_RCC_PLL_Enable+0x18>)
 80005e2:	2180      	movs	r1, #128	; 0x80
 80005e4:	0449      	lsls	r1, r1, #17
 80005e6:	430a      	orrs	r2, r1
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40021000 	.word	0x40021000

080005f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <LL_RCC_PLL_IsReady+0x24>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	049b      	lsls	r3, r3, #18
 8000600:	4013      	ands	r3, r2
 8000602:	22fe      	movs	r2, #254	; 0xfe
 8000604:	0612      	lsls	r2, r2, #24
 8000606:	4694      	mov	ip, r2
 8000608:	4463      	add	r3, ip
 800060a:	425a      	negs	r2, r3
 800060c:	4153      	adcs	r3, r2
 800060e:	b2db      	uxtb	r3, r3
}
 8000610:	0018      	movs	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	40021000 	.word	0x40021000

0800061c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 800062e:	4013      	ands	r3, r2
 8000630:	0019      	movs	r1, r3
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	431a      	orrs	r2, r3
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800063a:	430a      	orrs	r2, r1
 800063c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000642:	220f      	movs	r2, #15
 8000644:	4393      	bics	r3, r2
 8000646:	0019      	movs	r1, r3
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	430a      	orrs	r2, r1
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b004      	add	sp, #16
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000
 800065c:	ffc27fff 	.word	0xffc27fff

08000660 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <LL_APB1_GRP1_EnableClock+0x28>)
 800066a:	69d9      	ldr	r1, [r3, #28]
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <LL_APB1_GRP1_EnableClock+0x28>)
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	430a      	orrs	r2, r1
 8000672:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <LL_APB1_GRP1_EnableClock+0x28>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	4013      	ands	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b004      	add	sp, #16
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000

0800068c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <LL_APB1_GRP2_EnableClock+0x28>)
 8000696:	6999      	ldr	r1, [r3, #24]
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <LL_APB1_GRP2_EnableClock+0x28>)
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	430a      	orrs	r2, r1
 800069e:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <LL_APB1_GRP2_EnableClock+0x28>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	4013      	ands	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006aa:	68fb      	ldr	r3, [r7, #12]
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b004      	add	sp, #16
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021000 	.word	0x40021000

080006b8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <LL_FLASH_SetLatency+0x24>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2201      	movs	r2, #1
 80006c6:	4393      	bics	r3, r2
 80006c8:	0019      	movs	r1, r3
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <LL_FLASH_SetLatency+0x24>)
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	430a      	orrs	r2, r1
 80006d0:	601a      	str	r2, [r3, #0]
}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	40022000 	.word	0x40022000

080006e0 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <LL_FLASH_GetLatency+0x14>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2201      	movs	r2, #1
 80006ea:	4013      	ands	r3, r2
}
 80006ec:	0018      	movs	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	40022000 	.word	0x40022000

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f7ff ffc5 	bl	800068c <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	055b      	lsls	r3, r3, #21
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff ffaa 	bl	8000660 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f80c 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f7ff fe80 	bl	8000414 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000714:	f000 fa39 	bl	8000b8a <MX_TIM2_Init>
  MX_TIM6_Init();
 8000718:	f000 fac6 	bl	8000ca8 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800071c:	f000 fc0e 	bl	8000f3c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000720:	f000 fc92 	bl	8001048 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000724:	e7fe      	b.n	8000724 <main+0x2c>
	...

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff ffc3 	bl	80006b8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	f7ff ffd4 	bl	80006e0 <LL_FLASH_GetLatency>
 8000738:	0003      	movs	r3, r0
 800073a:	2b01      	cmp	r3, #1
 800073c:	d1fa      	bne.n	8000734 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800073e:	f7ff feb5 	bl	80004ac <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	f7ff fec0 	bl	80004c8 <LL_RCC_HSI_IsReady>
 8000748:	0003      	movs	r3, r0
 800074a:	2b01      	cmp	r3, #1
 800074c:	d1fa      	bne.n	8000744 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800074e:	2010      	movs	r0, #16
 8000750:	f7ff feca 	bl	80004e8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_12, LL_RCC_PREDIV_DIV_2);
 8000754:	23a0      	movs	r3, #160	; 0xa0
 8000756:	0399      	lsls	r1, r3, #14
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	2201      	movs	r2, #1
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff ff5c 	bl	800061c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000764:	f7ff ff38 	bl	80005d8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	f7ff ff43 	bl	80005f4 <LL_RCC_PLL_IsReady>
 800076e:	0003      	movs	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d1fa      	bne.n	800076a <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff feeb 	bl	8000550 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800077a:	2000      	movs	r0, #0
 800077c:	f7ff fefc 	bl	8000578 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000780:	2002      	movs	r0, #2
 8000782:	f7ff fec5 	bl	8000510 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	f7ff fed6 	bl	8000538 <LL_RCC_GetSysClkSource>
 800078c:	0003      	movs	r3, r0
 800078e:	2b08      	cmp	r3, #8
 8000790:	d1fa      	bne.n	8000788 <SystemClock_Config+0x60>
  {

  }
  LL_Init1msTick(48000000);
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <SystemClock_Config+0x90>)
 8000794:	0018      	movs	r0, r3
 8000796:	f001 fdbd 	bl	8002314 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <SystemClock_Config+0x90>)
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fdc9 	bl	8002334 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff fefe 	bl	80005a4 <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	055b      	lsls	r3, r3, #21
 80007ac:	0018      	movs	r0, r3
 80007ae:	f7ff fef9 	bl	80005a4 <LL_RCC_SetUSARTClockSource>
}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	02dc6c00 	.word	0x02dc6c00

080007bc <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <LL_EXTI_IsActiveFlag_0_31+0x24>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	4013      	ands	r3, r2
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	425a      	negs	r2, r3
 80007d2:	4153      	adcs	r3, r2
 80007d4:	b2db      	uxtb	r3, r3
}
 80007d6:	0018      	movs	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	b002      	add	sp, #8
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	40010400 	.word	0x40010400

080007e4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <LL_EXTI_ClearFlag_0_31+0x18>)
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	615a      	str	r2, [r3, #20]
}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b002      	add	sp, #8
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	40010400 	.word	0x40010400

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	019b      	lsls	r3, r3, #6
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff ffc2 	bl	80007bc <LL_EXTI_IsActiveFlag_0_31>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d004      	beq.n	8000846 <EXTI4_15_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	019b      	lsls	r3, r3, #6
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff ffcf 	bl	80007e4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <__NVIC_EnableIRQ>:
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	0002      	movs	r2, r0
 8000888:	1dfb      	adds	r3, r7, #7
 800088a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b7f      	cmp	r3, #127	; 0x7f
 8000892:	d809      	bhi.n	80008a8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	001a      	movs	r2, r3
 800089a:	231f      	movs	r3, #31
 800089c:	401a      	ands	r2, r3
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <__NVIC_EnableIRQ+0x30>)
 80008a0:	2101      	movs	r1, #1
 80008a2:	4091      	lsls	r1, r2
 80008a4:	000a      	movs	r2, r1
 80008a6:	601a      	str	r2, [r3, #0]
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	e000e100 	.word	0xe000e100

080008b4 <__NVIC_SetPriority>:
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	0002      	movs	r2, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b7f      	cmp	r3, #127	; 0x7f
 80008c8:	d828      	bhi.n	800091c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ca:	4a2f      	ldr	r2, [pc, #188]	; (8000988 <__NVIC_SetPriority+0xd4>)
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	089b      	lsrs	r3, r3, #2
 80008d4:	33c0      	adds	r3, #192	; 0xc0
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	589b      	ldr	r3, [r3, r2]
 80008da:	1dfa      	adds	r2, r7, #7
 80008dc:	7812      	ldrb	r2, [r2, #0]
 80008de:	0011      	movs	r1, r2
 80008e0:	2203      	movs	r2, #3
 80008e2:	400a      	ands	r2, r1
 80008e4:	00d2      	lsls	r2, r2, #3
 80008e6:	21ff      	movs	r1, #255	; 0xff
 80008e8:	4091      	lsls	r1, r2
 80008ea:	000a      	movs	r2, r1
 80008ec:	43d2      	mvns	r2, r2
 80008ee:	401a      	ands	r2, r3
 80008f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	019b      	lsls	r3, r3, #6
 80008f6:	22ff      	movs	r2, #255	; 0xff
 80008f8:	401a      	ands	r2, r3
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	0018      	movs	r0, r3
 8000900:	2303      	movs	r3, #3
 8000902:	4003      	ands	r3, r0
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000908:	481f      	ldr	r0, [pc, #124]	; (8000988 <__NVIC_SetPriority+0xd4>)
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b25b      	sxtb	r3, r3
 8000910:	089b      	lsrs	r3, r3, #2
 8000912:	430a      	orrs	r2, r1
 8000914:	33c0      	adds	r3, #192	; 0xc0
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	501a      	str	r2, [r3, r0]
}
 800091a:	e031      	b.n	8000980 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091c:	4a1b      	ldr	r2, [pc, #108]	; (800098c <__NVIC_SetPriority+0xd8>)
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	0019      	movs	r1, r3
 8000924:	230f      	movs	r3, #15
 8000926:	400b      	ands	r3, r1
 8000928:	3b08      	subs	r3, #8
 800092a:	089b      	lsrs	r3, r3, #2
 800092c:	3306      	adds	r3, #6
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	18d3      	adds	r3, r2, r3
 8000932:	3304      	adds	r3, #4
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	1dfa      	adds	r2, r7, #7
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	0011      	movs	r1, r2
 800093c:	2203      	movs	r2, #3
 800093e:	400a      	ands	r2, r1
 8000940:	00d2      	lsls	r2, r2, #3
 8000942:	21ff      	movs	r1, #255	; 0xff
 8000944:	4091      	lsls	r1, r2
 8000946:	000a      	movs	r2, r1
 8000948:	43d2      	mvns	r2, r2
 800094a:	401a      	ands	r2, r3
 800094c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	019b      	lsls	r3, r3, #6
 8000952:	22ff      	movs	r2, #255	; 0xff
 8000954:	401a      	ands	r2, r3
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	0018      	movs	r0, r3
 800095c:	2303      	movs	r3, #3
 800095e:	4003      	ands	r3, r0
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000964:	4809      	ldr	r0, [pc, #36]	; (800098c <__NVIC_SetPriority+0xd8>)
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	001c      	movs	r4, r3
 800096c:	230f      	movs	r3, #15
 800096e:	4023      	ands	r3, r4
 8000970:	3b08      	subs	r3, #8
 8000972:	089b      	lsrs	r3, r3, #2
 8000974:	430a      	orrs	r2, r1
 8000976:	3306      	adds	r3, #6
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	18c3      	adds	r3, r0, r3
 800097c:	3304      	adds	r3, #4
 800097e:	601a      	str	r2, [r3, #0]
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b003      	add	sp, #12
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	e000e100 	.word	0xe000e100
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <LL_AHB1_GRP1_EnableClock>:
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <LL_AHB1_GRP1_EnableClock+0x28>)
 800099a:	6959      	ldr	r1, [r3, #20]
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <LL_AHB1_GRP1_EnableClock+0x28>)
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	430a      	orrs	r2, r1
 80009a2:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	4013      	ands	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009ae:	68fb      	ldr	r3, [r7, #12]
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b004      	add	sp, #16
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000

080009bc <LL_APB1_GRP1_EnableClock>:
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <LL_APB1_GRP1_EnableClock+0x28>)
 80009c6:	69d9      	ldr	r1, [r3, #28]
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <LL_APB1_GRP1_EnableClock+0x28>)
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <LL_APB1_GRP1_EnableClock+0x28>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4013      	ands	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b004      	add	sp, #16
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000

080009e8 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	431a      	orrs	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	4393      	bics	r3, r2
 8000a14:	001a      	movs	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	601a      	str	r2, [r3, #0]
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d01e      	beq.n	8000a72 <LL_TIM_OC_DisableFast+0x4e>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d019      	beq.n	8000a6e <LL_TIM_OC_DisableFast+0x4a>
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	2b10      	cmp	r3, #16
 8000a3e:	d014      	beq.n	8000a6a <LL_TIM_OC_DisableFast+0x46>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	2b40      	cmp	r3, #64	; 0x40
 8000a44:	d00f      	beq.n	8000a66 <LL_TIM_OC_DisableFast+0x42>
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d008      	beq.n	8000a62 <LL_TIM_OC_DisableFast+0x3e>
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	2380      	movs	r3, #128	; 0x80
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d101      	bne.n	8000a5e <LL_TIM_OC_DisableFast+0x3a>
 8000a5a:	2305      	movs	r3, #5
 8000a5c:	e00a      	b.n	8000a74 <LL_TIM_OC_DisableFast+0x50>
 8000a5e:	2306      	movs	r3, #6
 8000a60:	e008      	b.n	8000a74 <LL_TIM_OC_DisableFast+0x50>
 8000a62:	2304      	movs	r3, #4
 8000a64:	e006      	b.n	8000a74 <LL_TIM_OC_DisableFast+0x50>
 8000a66:	2303      	movs	r3, #3
 8000a68:	e004      	b.n	8000a74 <LL_TIM_OC_DisableFast+0x50>
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	e002      	b.n	8000a74 <LL_TIM_OC_DisableFast+0x50>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e000      	b.n	8000a74 <LL_TIM_OC_DisableFast+0x50>
 8000a72:	2300      	movs	r3, #0
 8000a74:	200f      	movs	r0, #15
 8000a76:	183a      	adds	r2, r7, r0
 8000a78:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3318      	adds	r3, #24
 8000a7e:	0019      	movs	r1, r3
 8000a80:	183b      	adds	r3, r7, r0
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <LL_TIM_OC_DisableFast+0x8c>)
 8000a86:	5cd3      	ldrb	r3, [r2, r3]
 8000a88:	18cb      	adds	r3, r1, r3
 8000a8a:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	183a      	adds	r2, r7, r0
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	4907      	ldr	r1, [pc, #28]	; (8000ab4 <LL_TIM_OC_DisableFast+0x90>)
 8000a96:	5c8a      	ldrb	r2, [r1, r2]
 8000a98:	0011      	movs	r1, r2
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	408a      	lsls	r2, r1
 8000a9e:	43d2      	mvns	r2, r2
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	601a      	str	r2, [r3, #0]

}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b004      	add	sp, #16
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	080023d8 	.word	0x080023d8
 8000ab4:	080023e0 	.word	0x080023e0

08000ab8 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d01e      	beq.n	8000b06 <LL_TIM_OC_EnablePreload+0x4e>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d019      	beq.n	8000b02 <LL_TIM_OC_EnablePreload+0x4a>
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	2b10      	cmp	r3, #16
 8000ad2:	d014      	beq.n	8000afe <LL_TIM_OC_EnablePreload+0x46>
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	2b40      	cmp	r3, #64	; 0x40
 8000ad8:	d00f      	beq.n	8000afa <LL_TIM_OC_EnablePreload+0x42>
 8000ada:	683a      	ldr	r2, [r7, #0]
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d008      	beq.n	8000af6 <LL_TIM_OC_EnablePreload+0x3e>
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d101      	bne.n	8000af2 <LL_TIM_OC_EnablePreload+0x3a>
 8000aee:	2305      	movs	r3, #5
 8000af0:	e00a      	b.n	8000b08 <LL_TIM_OC_EnablePreload+0x50>
 8000af2:	2306      	movs	r3, #6
 8000af4:	e008      	b.n	8000b08 <LL_TIM_OC_EnablePreload+0x50>
 8000af6:	2304      	movs	r3, #4
 8000af8:	e006      	b.n	8000b08 <LL_TIM_OC_EnablePreload+0x50>
 8000afa:	2303      	movs	r3, #3
 8000afc:	e004      	b.n	8000b08 <LL_TIM_OC_EnablePreload+0x50>
 8000afe:	2302      	movs	r3, #2
 8000b00:	e002      	b.n	8000b08 <LL_TIM_OC_EnablePreload+0x50>
 8000b02:	2301      	movs	r3, #1
 8000b04:	e000      	b.n	8000b08 <LL_TIM_OC_EnablePreload+0x50>
 8000b06:	2300      	movs	r3, #0
 8000b08:	200f      	movs	r0, #15
 8000b0a:	183a      	adds	r2, r7, r0
 8000b0c:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3318      	adds	r3, #24
 8000b12:	0019      	movs	r1, r3
 8000b14:	183b      	adds	r3, r7, r0
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4a09      	ldr	r2, [pc, #36]	; (8000b40 <LL_TIM_OC_EnablePreload+0x88>)
 8000b1a:	5cd3      	ldrb	r3, [r2, r3]
 8000b1c:	18cb      	adds	r3, r1, r3
 8000b1e:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	183b      	adds	r3, r7, r0
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4906      	ldr	r1, [pc, #24]	; (8000b44 <LL_TIM_OC_EnablePreload+0x8c>)
 8000b2a:	5ccb      	ldrb	r3, [r1, r3]
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	2308      	movs	r3, #8
 8000b30:	408b      	lsls	r3, r1
 8000b32:	431a      	orrs	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	601a      	str	r2, [r3, #0]
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b004      	add	sp, #16
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	080023d8 	.word	0x080023d8
 8000b44:	080023e0 	.word	0x080023e0

08000b48 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2270      	movs	r2, #112	; 0x70
 8000b58:	4393      	bics	r3, r2
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	605a      	str	r2, [r3, #4]
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	4393      	bics	r3, r2
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	609a      	str	r2, [r3, #8]
}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b002      	add	sp, #8
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b8a:	b5b0      	push	{r4, r5, r7, lr}
 8000b8c:	b094      	sub	sp, #80	; 0x50
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000b90:	253c      	movs	r5, #60	; 0x3c
 8000b92:	197b      	adds	r3, r7, r5
 8000b94:	0018      	movs	r0, r3
 8000b96:	2314      	movs	r3, #20
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f001 fbfc 	bl	8002398 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000ba0:	241c      	movs	r4, #28
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	2320      	movs	r3, #32
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2100      	movs	r1, #0
 8000bac:	f001 fbf4 	bl	8002398 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	2318      	movs	r3, #24
 8000bb6:	001a      	movs	r2, r3
 8000bb8:	2100      	movs	r1, #0
 8000bba:	f001 fbed 	bl	8002398 <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f7ff fefc 	bl	80009bc <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, 0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	f7ff fe74 	bl	80008b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000bcc:	200f      	movs	r0, #15
 8000bce:	f7ff fe57 	bl	8000880 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 48;
 8000bd2:	197b      	adds	r3, r7, r5
 8000bd4:	2230      	movs	r2, #48	; 0x30
 8000bd6:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000bd8:	197b      	adds	r3, r7, r5
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 1000;
 8000bde:	197b      	adds	r3, r7, r5
 8000be0:	22fa      	movs	r2, #250	; 0xfa
 8000be2:	0092      	lsls	r2, r2, #2
 8000be4:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000be6:	197b      	adds	r3, r7, r5
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000bec:	197a      	adds	r2, r7, r5
 8000bee:	2380      	movs	r3, #128	; 0x80
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f000 ff5d 	bl	8001ab4 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff fef2 	bl	80009e8 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	05db      	lsls	r3, r3, #23
 8000c08:	2101      	movs	r1, #1
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f7ff ff54 	bl	8000ab8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000c10:	0021      	movs	r1, r4
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2260      	movs	r2, #96	; 0x60
 8000c16:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.CompareValue = 500;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	22fa      	movs	r2, #250	; 0xfa
 8000c28:	0052      	lsls	r2, r2, #1
 8000c2a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000c32:	187a      	adds	r2, r7, r1
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	05db      	lsls	r3, r3, #23
 8000c38:	2101      	movs	r1, #1
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 ffbc 	bl	8001bb8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	05db      	lsls	r3, r3, #23
 8000c44:	2101      	movs	r1, #1
 8000c46:	0018      	movs	r0, r3
 8000c48:	f7ff feec 	bl	8000a24 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	05db      	lsls	r3, r3, #23
 8000c50:	2100      	movs	r1, #0
 8000c52:	0018      	movs	r0, r3
 8000c54:	f7ff ff78 	bl	8000b48 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	05db      	lsls	r3, r3, #23
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff ff85 	bl	8000b6c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	029b      	lsls	r3, r3, #10
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff fe92 	bl	8000990 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2220      	movs	r2, #32
 8000c70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2202      	movs	r2, #2
 8000c76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	1d3a      	adds	r2, r7, #4
 8000c92:	2390      	movs	r3, #144	; 0x90
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f000 fc4d 	bl	8001538 <LL_GPIO_Init>

}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b014      	add	sp, #80	; 0x50
 8000ca4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000ca8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	2314      	movs	r3, #20
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	f001 fb6e 	bl	8002398 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8000cbc:	2010      	movs	r0, #16
 8000cbe:	f7ff fe7d 	bl	80009bc <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, 0);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2011      	movs	r0, #17
 8000cc6:	f7ff fdf5 	bl	80008b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cca:	2011      	movs	r0, #17
 8000ccc:	f7ff fdd8 	bl	8000880 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <MX_TIM6_Init+0x68>)
 8000ce0:	609a      	str	r2, [r3, #8]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <MX_TIM6_Init+0x6c>)
 8000ce6:	0019      	movs	r1, r3
 8000ce8:	0010      	movs	r0, r2
 8000cea:	f000 fee3 	bl	8001ab4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_TIM6_Init+0x6c>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fe87 	bl	8000a04 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <MX_TIM6_Init+0x6c>)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff ff24 	bl	8000b48 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <MX_TIM6_Init+0x6c>)
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff ff32 	bl	8000b6c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b006      	add	sp, #24
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	0000ffff 	.word	0x0000ffff
 8000d14:	40001000 	.word	0x40001000

08000d18 <__NVIC_EnableIRQ>:
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	0002      	movs	r2, r0
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b7f      	cmp	r3, #127	; 0x7f
 8000d2a:	d809      	bhi.n	8000d40 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	001a      	movs	r2, r3
 8000d32:	231f      	movs	r3, #31
 8000d34:	401a      	ands	r2, r3
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_EnableIRQ+0x30>)
 8000d38:	2101      	movs	r1, #1
 8000d3a:	4091      	lsls	r1, r2
 8000d3c:	000a      	movs	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	0002      	movs	r2, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d60:	d828      	bhi.n	8000db4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d62:	4a2f      	ldr	r2, [pc, #188]	; (8000e20 <__NVIC_SetPriority+0xd4>)
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	33c0      	adds	r3, #192	; 0xc0
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	589b      	ldr	r3, [r3, r2]
 8000d72:	1dfa      	adds	r2, r7, #7
 8000d74:	7812      	ldrb	r2, [r2, #0]
 8000d76:	0011      	movs	r1, r2
 8000d78:	2203      	movs	r2, #3
 8000d7a:	400a      	ands	r2, r1
 8000d7c:	00d2      	lsls	r2, r2, #3
 8000d7e:	21ff      	movs	r1, #255	; 0xff
 8000d80:	4091      	lsls	r1, r2
 8000d82:	000a      	movs	r2, r1
 8000d84:	43d2      	mvns	r2, r2
 8000d86:	401a      	ands	r2, r3
 8000d88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	019b      	lsls	r3, r3, #6
 8000d8e:	22ff      	movs	r2, #255	; 0xff
 8000d90:	401a      	ands	r2, r3
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	0018      	movs	r0, r3
 8000d98:	2303      	movs	r3, #3
 8000d9a:	4003      	ands	r3, r0
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da0:	481f      	ldr	r0, [pc, #124]	; (8000e20 <__NVIC_SetPriority+0xd4>)
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	430a      	orrs	r2, r1
 8000dac:	33c0      	adds	r3, #192	; 0xc0
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	501a      	str	r2, [r3, r0]
}
 8000db2:	e031      	b.n	8000e18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <__NVIC_SetPriority+0xd8>)
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	0019      	movs	r1, r3
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	400b      	ands	r3, r1
 8000dc0:	3b08      	subs	r3, #8
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	3306      	adds	r3, #6
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	18d3      	adds	r3, r2, r3
 8000dca:	3304      	adds	r3, #4
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	1dfa      	adds	r2, r7, #7
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	00d2      	lsls	r2, r2, #3
 8000dda:	21ff      	movs	r1, #255	; 0xff
 8000ddc:	4091      	lsls	r1, r2
 8000dde:	000a      	movs	r2, r1
 8000de0:	43d2      	mvns	r2, r2
 8000de2:	401a      	ands	r2, r3
 8000de4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	019b      	lsls	r3, r3, #6
 8000dea:	22ff      	movs	r2, #255	; 0xff
 8000dec:	401a      	ands	r2, r3
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	0018      	movs	r0, r3
 8000df4:	2303      	movs	r3, #3
 8000df6:	4003      	ands	r3, r0
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dfc:	4809      	ldr	r0, [pc, #36]	; (8000e24 <__NVIC_SetPriority+0xd8>)
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	001c      	movs	r4, r3
 8000e04:	230f      	movs	r3, #15
 8000e06:	4023      	ands	r3, r4
 8000e08:	3b08      	subs	r3, #8
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	3306      	adds	r3, #6
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	18c3      	adds	r3, r0, r3
 8000e14:	3304      	adds	r3, #4
 8000e16:	601a      	str	r2, [r3, #0]
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b003      	add	sp, #12
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <LL_AHB1_GRP1_EnableClock>:
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000e32:	6959      	ldr	r1, [r3, #20]
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	4013      	ands	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b004      	add	sp, #16
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021000 	.word	0x40021000

08000e54 <LL_APB1_GRP1_EnableClock>:
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <LL_APB1_GRP1_EnableClock+0x28>)
 8000e5e:	69d9      	ldr	r1, [r3, #28]
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <LL_APB1_GRP1_EnableClock+0x28>)
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <LL_APB1_GRP1_EnableClock+0x28>)
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b004      	add	sp, #16
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40021000 	.word	0x40021000

08000e80 <LL_APB1_GRP2_EnableClock>:
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <LL_APB1_GRP2_EnableClock+0x28>)
 8000e8a:	6999      	ldr	r1, [r3, #24]
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <LL_APB1_GRP2_EnableClock+0x28>)
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <LL_APB1_GRP2_EnableClock+0x28>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b004      	add	sp, #16
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021000 	.word	0x40021000

08000eac <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	601a      	str	r2, [r3, #0]
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b002      	add	sp, #8
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  - LINEN (if LIN feature is supported), CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard feature is supported), IREN (if Irda feature is supported)
    and HDSEL bits in the USART_CR3 register.
  */
#if defined(USART_LIN_SUPPORT)
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <LL_USART_ConfigAsyncMode+0x2c>)
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
#endif /* USART_LIN_SUPPORT */
#if defined(USART_SMARTCARD_SUPPORT)
#if defined(USART_IRDA_SUPPORT)
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	222a      	movs	r2, #42	; 0x2a
 8000ee2:	4393      	bics	r3, r2
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
#else
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
#endif /* USART_IRDA_SUPPORT */
#endif /* USART_SMARTCARD_SUPPORT */
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	ffffb7ff 	.word	0xffffb7ff

08000ef8 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f00:	f3ef 8310 	mrs	r3, PRIMASK
 8000f04:	60bb      	str	r3, [r7, #8]
  return(result);
 8000f06:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f383 8810 	msr	PRIMASK, r3
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <LL_USART_DisableIT_CTS+0x40>)
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	f383 8810 	msr	PRIMASK, r3
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b006      	add	sp, #24
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	fffffbff 	.word	0xfffffbff

08000f3c <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b08f      	sub	sp, #60	; 0x3c
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000f42:	241c      	movs	r4, #28
 8000f44:	193b      	adds	r3, r7, r4
 8000f46:	0018      	movs	r0, r3
 8000f48:	231c      	movs	r3, #28
 8000f4a:	001a      	movs	r2, r3
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	f001 fa23 	bl	8002398 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	0018      	movs	r0, r3
 8000f56:	2318      	movs	r3, #24
 8000f58:	001a      	movs	r2, r3
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	f001 fa1c 	bl	8002398 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	01db      	lsls	r3, r3, #7
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff ff8b 	bl	8000e80 <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	029b      	lsls	r3, r3, #10
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f7ff ff5a 	bl	8000e28 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2280      	movs	r2, #128	; 0x80
 8000f78:	0092      	lsls	r2, r2, #2
 8000f7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2202      	movs	r2, #2
 8000f80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2203      	movs	r2, #3
 8000f86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2201      	movs	r2, #1
 8000f98:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	1d3a      	adds	r2, r7, #4
 8000f9c:	2390      	movs	r3, #144	; 0x90
 8000f9e:	05db      	lsls	r3, r3, #23
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 fac8 	bl	8001538 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2280      	movs	r2, #128	; 0x80
 8000fac:	00d2      	lsls	r2, r2, #3
 8000fae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2203      	movs	r2, #3
 8000fba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2201      	movs	r2, #1
 8000fcc:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	1d3a      	adds	r2, r7, #4
 8000fd0:	2390      	movs	r3, #144	; 0x90
 8000fd2:	05db      	lsls	r3, r3, #23
 8000fd4:	0011      	movs	r1, r2
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f000 faae 	bl	8001538 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	201b      	movs	r0, #27
 8000fe0:	f7ff feb4 	bl	8000d4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000fe4:	201b      	movs	r0, #27
 8000fe6:	f7ff fe97 	bl	8000d18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	22e1      	movs	r2, #225	; 0xe1
 8000fee:	0252      	lsls	r2, r2, #9
 8000ff0:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000ff2:	0021      	movs	r1, r4
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001006:	187b      	adds	r3, r7, r1
 8001008:	220c      	movs	r2, #12
 800100a:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 8001018:	187b      	adds	r3, r7, r1
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <MX_USART1_UART_Init+0x108>)
 800101c:	0019      	movs	r1, r3
 800101e:	0010      	movs	r0, r2
 8001020:	f001 f8a2 	bl	8002168 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <MX_USART1_UART_Init+0x108>)
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff ff66 	bl	8000ef8 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <MX_USART1_UART_Init+0x108>)
 800102e:	0018      	movs	r0, r3
 8001030:	f7ff ff4a 	bl	8000ec8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <MX_USART1_UART_Init+0x108>)
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff ff38 	bl	8000eac <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b00f      	add	sp, #60	; 0x3c
 8001042:	bd90      	pop	{r4, r7, pc}
 8001044:	40013800 	.word	0x40013800

08001048 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b08f      	sub	sp, #60	; 0x3c
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800104e:	241c      	movs	r4, #28
 8001050:	193b      	adds	r3, r7, r4
 8001052:	0018      	movs	r0, r3
 8001054:	231c      	movs	r3, #28
 8001056:	001a      	movs	r2, r3
 8001058:	2100      	movs	r1, #0
 800105a:	f001 f99d 	bl	8002398 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	0018      	movs	r0, r3
 8001062:	2318      	movs	r3, #24
 8001064:	001a      	movs	r2, r3
 8001066:	2100      	movs	r1, #0
 8001068:	f001 f996 	bl	8002398 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	029b      	lsls	r3, r3, #10
 8001070:	0018      	movs	r0, r3
 8001072:	f7ff feef 	bl	8000e54 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	029b      	lsls	r3, r3, #10
 800107a:	0018      	movs	r0, r3
 800107c:	f7ff fed4 	bl	8000e28 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2204      	movs	r2, #4
 8001084:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2202      	movs	r2, #2
 800108a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2201      	movs	r2, #1
 80010a2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	1d3a      	adds	r2, r7, #4
 80010a6:	2390      	movs	r3, #144	; 0x90
 80010a8:	05db      	lsls	r3, r3, #23
 80010aa:	0011      	movs	r1, r2
 80010ac:	0018      	movs	r0, r3
 80010ae:	f000 fa43 	bl	8001538 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2208      	movs	r2, #8
 80010b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2202      	movs	r2, #2
 80010bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2201      	movs	r2, #1
 80010d4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	1d3a      	adds	r2, r7, #4
 80010d8:	2390      	movs	r3, #144	; 0x90
 80010da:	05db      	lsls	r3, r3, #23
 80010dc:	0011      	movs	r1, r2
 80010de:	0018      	movs	r0, r3
 80010e0:	f000 fa2a 	bl	8001538 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 80010e4:	2100      	movs	r1, #0
 80010e6:	201c      	movs	r0, #28
 80010e8:	f7ff fe30 	bl	8000d4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80010ec:	201c      	movs	r0, #28
 80010ee:	f7ff fe13 	bl	8000d18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	22e1      	movs	r2, #225	; 0xe1
 80010f6:	0252      	lsls	r2, r2, #9
 80010f8:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80010fa:	0021      	movs	r1, r4
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2200      	movs	r2, #0
 8001100:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001108:	187b      	adds	r3, r7, r1
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800110e:	187b      	adds	r3, r7, r1
 8001110:	220c      	movs	r2, #12
 8001112:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001114:	187b      	adds	r3, r7, r1
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800111a:	187b      	adds	r3, r7, r1
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8001120:	187b      	adds	r3, r7, r1
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <MX_USART2_UART_Init+0x104>)
 8001124:	0019      	movs	r1, r3
 8001126:	0010      	movs	r0, r2
 8001128:	f001 f81e 	bl	8002168 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <MX_USART2_UART_Init+0x104>)
 800112e:	0018      	movs	r0, r3
 8001130:	f7ff fee2 	bl	8000ef8 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <MX_USART2_UART_Init+0x104>)
 8001136:	0018      	movs	r0, r3
 8001138:	f7ff fec6 	bl	8000ec8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <MX_USART2_UART_Init+0x104>)
 800113e:	0018      	movs	r0, r3
 8001140:	f7ff feb4 	bl	8000eac <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b00f      	add	sp, #60	; 0x3c
 800114a:	bd90      	pop	{r4, r7, pc}
 800114c:	40004400 	.word	0x40004400

08001150 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001152:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001154:	f7ff fb8e 	bl	8000874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <LoopForever+0x6>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	; (8001190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <LoopForever+0xe>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	; (800119c <LoopForever+0x16>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800117e:	f001 f8e7 	bl	8002350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001182:	f7ff fab9 	bl	80006f8 <main>

08001186 <LoopForever>:

LoopForever:
    b LoopForever
 8001186:	e7fe      	b.n	8001186 <LoopForever>
  ldr   r0, =_estack
 8001188:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001194:	080023f0 	.word	0x080023f0
  ldr r2, =_sbss
 8001198:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800119c:	20000020 	.word	0x20000020

080011a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_COMP_IRQHandler>
	...

080011a4 <LL_EXTI_EnableIT_0_31>:
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <LL_EXTI_EnableIT_0_31+0x1c>)
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <LL_EXTI_EnableIT_0_31+0x1c>)
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b002      	add	sp, #8
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40010400 	.word	0x40010400

080011c4 <LL_EXTI_DisableIT_0_31>:
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <LL_EXTI_DisableIT_0_31+0x20>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <LL_EXTI_DisableIT_0_31+0x20>)
 80011d6:	400a      	ands	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	40010400 	.word	0x40010400

080011e8 <LL_EXTI_EnableEvent_0_31>:
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <LL_EXTI_EnableEvent_0_31+0x1c>)
 80011f2:	6859      	ldr	r1, [r3, #4]
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <LL_EXTI_EnableEvent_0_31+0x1c>)
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	605a      	str	r2, [r3, #4]
}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40010400 	.word	0x40010400

08001208 <LL_EXTI_DisableEvent_0_31>:
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	43d9      	mvns	r1, r3
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <LL_EXTI_DisableEvent_0_31+0x20>)
 800121a:	400a      	ands	r2, r1
 800121c:	605a      	str	r2, [r3, #4]
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b002      	add	sp, #8
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	40010400 	.word	0x40010400

0800122c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001236:	6899      	ldr	r1, [r3, #8]
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	430a      	orrs	r2, r1
 800123e:	609a      	str	r2, [r3, #8]
}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	b002      	add	sp, #8
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40010400 	.word	0x40010400

0800124c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	43d9      	mvns	r1, r3
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800125e:	400a      	ands	r2, r1
 8001260:	609a      	str	r2, [r3, #8]
}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b002      	add	sp, #8
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	40010400 	.word	0x40010400

08001270 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800127a:	68d9      	ldr	r1, [r3, #12]
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	430a      	orrs	r2, r1
 8001282:	60da      	str	r2, [r3, #12]
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40010400 	.word	0x40010400

08001290 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	43d9      	mvns	r1, r3
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80012a2:	400a      	ands	r2, r1
 80012a4:	60da      	str	r2, [r3, #12]
}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	40010400 	.word	0x40010400

080012b4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80012bc:	230f      	movs	r3, #15
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	791b      	ldrb	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d100      	bne.n	80012ce <LL_EXTI_Init+0x1a>
 80012cc:	e068      	b.n	80013a0 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d100      	bne.n	80012d8 <LL_EXTI_Init+0x24>
 80012d6:	e06e      	b.n	80013b6 <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	795b      	ldrb	r3, [r3, #5]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d01b      	beq.n	8001318 <LL_EXTI_Init+0x64>
 80012e0:	dc25      	bgt.n	800132e <LL_EXTI_Init+0x7a>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <LL_EXTI_Init+0x38>
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d00b      	beq.n	8001302 <LL_EXTI_Init+0x4e>
 80012ea:	e020      	b.n	800132e <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff ff89 	bl	8001208 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff ff52 	bl	80011a4 <LL_EXTI_EnableIT_0_31>
          break;
 8001300:	e01a      	b.n	8001338 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0018      	movs	r0, r3
 8001308:	f7ff ff5c 	bl	80011c4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ff69 	bl	80011e8 <LL_EXTI_EnableEvent_0_31>
          break;
 8001316:	e00f      	b.n	8001338 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff ff41 	bl	80011a4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	0018      	movs	r0, r3
 8001328:	f7ff ff5e 	bl	80011e8 <LL_EXTI_EnableEvent_0_31>
          break;
 800132c:	e004      	b.n	8001338 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 800132e:	230f      	movs	r3, #15
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
          break;
 8001336:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	799b      	ldrb	r3, [r3, #6]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d03a      	beq.n	80013b6 <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	799b      	ldrb	r3, [r3, #6]
 8001344:	2b03      	cmp	r3, #3
 8001346:	d01b      	beq.n	8001380 <LL_EXTI_Init+0xcc>
 8001348:	dc25      	bgt.n	8001396 <LL_EXTI_Init+0xe2>
 800134a:	2b01      	cmp	r3, #1
 800134c:	d002      	beq.n	8001354 <LL_EXTI_Init+0xa0>
 800134e:	2b02      	cmp	r3, #2
 8001350:	d00b      	beq.n	800136a <LL_EXTI_Init+0xb6>
 8001352:	e020      	b.n	8001396 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff ff99 	bl	8001290 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	0018      	movs	r0, r3
 8001364:	f7ff ff62 	bl	800122c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001368:	e026      	b.n	80013b8 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	0018      	movs	r0, r3
 8001370:	f7ff ff6c 	bl	800124c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff ff79 	bl	8001270 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800137e:	e01b      	b.n	80013b8 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff ff51 	bl	800122c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	0018      	movs	r0, r3
 8001390:	f7ff ff6e 	bl	8001270 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001394:	e010      	b.n	80013b8 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8001396:	230f      	movs	r3, #15
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
            break;
 800139e:	e00b      	b.n	80013b8 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff ff0d 	bl	80011c4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7ff ff2a 	bl	8001208 <LL_EXTI_DisableEvent_0_31>
 80013b4:	e000      	b.n	80013b8 <LL_EXTI_Init+0x104>
      }
 80013b6:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 80013b8:	230f      	movs	r3, #15
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	781b      	ldrb	r3, [r3, #0]
}
 80013be:	0018      	movs	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b004      	add	sp, #16
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <LL_GPIO_SetPinMode>:
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6819      	ldr	r1, [r3, #0]
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	435b      	muls	r3, r3
 80013da:	001a      	movs	r2, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	189b      	adds	r3, r3, r2
 80013e2:	43db      	mvns	r3, r3
 80013e4:	400b      	ands	r3, r1
 80013e6:	001a      	movs	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	435b      	muls	r3, r3
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	434b      	muls	r3, r1
 80013f0:	431a      	orrs	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	601a      	str	r2, [r3, #0]
}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b004      	add	sp, #16
 80013fc:	bd80      	pop	{r7, pc}

080013fe <LL_GPIO_SetPinOutputType>:
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	43d2      	mvns	r2, r2
 8001412:	401a      	ands	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	434b      	muls	r3, r1
 800141a:	431a      	orrs	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	605a      	str	r2, [r3, #4]
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	b004      	add	sp, #16
 8001426:	bd80      	pop	{r7, pc}

08001428 <LL_GPIO_SetPinSpeed>:
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6899      	ldr	r1, [r3, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	435b      	muls	r3, r3
 800143c:	001a      	movs	r2, r3
 800143e:	0013      	movs	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	189b      	adds	r3, r3, r2
 8001444:	43db      	mvns	r3, r3
 8001446:	400b      	ands	r3, r1
 8001448:	001a      	movs	r2, r3
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	435b      	muls	r3, r3
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	434b      	muls	r3, r1
 8001452:	431a      	orrs	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	609a      	str	r2, [r3, #8]
}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b004      	add	sp, #16
 800145e:	bd80      	pop	{r7, pc}

08001460 <LL_GPIO_SetPinPull>:
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	68d9      	ldr	r1, [r3, #12]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	435b      	muls	r3, r3
 8001474:	001a      	movs	r2, r3
 8001476:	0013      	movs	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	189b      	adds	r3, r3, r2
 800147c:	43db      	mvns	r3, r3
 800147e:	400b      	ands	r3, r1
 8001480:	001a      	movs	r2, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	435b      	muls	r3, r3
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	434b      	muls	r3, r1
 800148a:	431a      	orrs	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	60da      	str	r2, [r3, #12]
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b004      	add	sp, #16
 8001496:	bd80      	pop	{r7, pc}

08001498 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6a19      	ldr	r1, [r3, #32]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	435b      	muls	r3, r3
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	4353      	muls	r3, r2
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	435a      	muls	r2, r3
 80014b4:	0013      	movs	r3, r2
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	43db      	mvns	r3, r3
 80014bc:	400b      	ands	r3, r1
 80014be:	001a      	movs	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	435b      	muls	r3, r3
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	434b      	muls	r3, r1
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	434b      	muls	r3, r1
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	434b      	muls	r3, r1
 80014d0:	431a      	orrs	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b004      	add	sp, #16
 80014dc:	bd80      	pop	{r7, pc}

080014de <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	0a12      	lsrs	r2, r2, #8
 80014f6:	4353      	muls	r3, r2
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	0a12      	lsrs	r2, r2, #8
 80014fc:	4353      	muls	r3, r2
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	0a12      	lsrs	r2, r2, #8
 8001502:	435a      	muls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	1a9b      	subs	r3, r3, r2
 800150a:	43db      	mvns	r3, r3
 800150c:	400b      	ands	r3, r1
 800150e:	001a      	movs	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	0a09      	lsrs	r1, r1, #8
 8001518:	434b      	muls	r3, r1
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	0a09      	lsrs	r1, r1, #8
 800151e:	434b      	muls	r3, r1
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	0a09      	lsrs	r1, r1, #8
 8001524:	434b      	muls	r3, r1
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	434b      	muls	r3, r1
 800152a:	431a      	orrs	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b004      	add	sp, #16
 8001536:	bd80      	pop	{r7, pc}

08001538 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001546:	e048      	b.n	80015da <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2101      	movs	r1, #1
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4091      	lsls	r1, r2
 8001552:	000a      	movs	r2, r1
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d03a      	beq.n	80015d4 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d003      	beq.n	800156e <LL_GPIO_Init+0x36>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d10e      	bne.n	800158c <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	68b9      	ldr	r1, [r7, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff ff56 	bl	8001428 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	6819      	ldr	r1, [r3, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	0018      	movs	r0, r3
 8001588:	f7ff ff39 	bl	80013fe <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff ff63 	bl	8001460 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d111      	bne.n	80015c6 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	2bff      	cmp	r3, #255	; 0xff
 80015a6:	d807      	bhi.n	80015b8 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	695a      	ldr	r2, [r3, #20]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	0018      	movs	r0, r3
 80015b2:	f7ff ff71 	bl	8001498 <LL_GPIO_SetAFPin_0_7>
 80015b6:	e006      	b.n	80015c6 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	695a      	ldr	r2, [r3, #20]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	0018      	movs	r0, r3
 80015c2:	f7ff ff8c 	bl	80014de <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	0018      	movs	r0, r3
 80015d0:	f7ff fef9 	bl	80013c6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3301      	adds	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	40da      	lsrs	r2, r3
 80015e2:	1e13      	subs	r3, r2, #0
 80015e4:	d1b0      	bne.n	8001548 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b004      	add	sp, #16
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <LL_RCC_HSI_IsReady>:
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <LL_RCC_HSI_IsReady+0x1c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2202      	movs	r2, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	3b02      	subs	r3, #2
 80015fe:	425a      	negs	r2, r3
 8001600:	4153      	adcs	r3, r2
 8001602:	b2db      	uxtb	r3, r3
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	40021000 	.word	0x40021000

08001610 <LL_RCC_LSE_IsReady>:
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <LL_RCC_LSE_IsReady+0x1c>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	2202      	movs	r2, #2
 800161a:	4013      	ands	r3, r2
 800161c:	3b02      	subs	r3, #2
 800161e:	425a      	negs	r2, r3
 8001620:	4153      	adcs	r3, r2
 8001622:	b2db      	uxtb	r3, r3
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	40021000 	.word	0x40021000

08001630 <LL_RCC_GetSysClkSource>:
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <LL_RCC_GetSysClkSource+0x14>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	220c      	movs	r2, #12
 800163a:	4013      	ands	r3, r2
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	40021000 	.word	0x40021000

08001648 <LL_RCC_GetAHBPrescaler>:
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <LL_RCC_GetAHBPrescaler+0x14>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	22f0      	movs	r2, #240	; 0xf0
 8001652:	4013      	ands	r3, r2
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	40021000 	.word	0x40021000

08001660 <LL_RCC_GetAPB1Prescaler>:
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	23e0      	movs	r3, #224	; 0xe0
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4013      	ands	r3, r2
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000

08001678 <LL_RCC_GetUSARTClockSource>:
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <LL_RCC_GetUSARTClockSource+0x24>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	2103      	movs	r1, #3
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	4091      	lsls	r1, r2
 800168a:	000a      	movs	r2, r1
 800168c:	401a      	ands	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	061b      	lsls	r3, r3, #24
 8001692:	4313      	orrs	r3, r2
}
 8001694:	0018      	movs	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	b002      	add	sp, #8
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000

080016a0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <LL_RCC_PLL_GetMainSource+0x14>)
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	23c0      	movs	r3, #192	; 0xc0
 80016aa:	025b      	lsls	r3, r3, #9
 80016ac:	4013      	ands	r3, r2
}
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40021000 	.word	0x40021000

080016b8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <LL_RCC_PLL_GetMultiplicator+0x14>)
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	23f0      	movs	r3, #240	; 0xf0
 80016c2:	039b      	lsls	r3, r3, #14
 80016c4:	4013      	ands	r3, r2
}
 80016c6:	0018      	movs	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000

080016d0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <LL_RCC_PLL_GetPrediv+0x14>)
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	220f      	movs	r2, #15
 80016da:	4013      	ands	r3, r2
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	40021000 	.word	0x40021000

080016e8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80016f0:	f000 f8de 	bl	80018b0 <RCC_GetSystemClockFreq>
 80016f4:	0002      	movs	r2, r0
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	0018      	movs	r0, r3
 8001700:	f000 f904 	bl	800190c <RCC_GetHCLKClockFreq>
 8001704:	0002      	movs	r2, r0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	0018      	movs	r0, r3
 8001710:	f000 f912 	bl	8001938 <RCC_GetPCLK1ClockFreq>
 8001714:	0002      	movs	r2, r0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]
}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	46bd      	mov	sp, r7
 800171e:	b002      	add	sp, #8
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d12d      	bne.n	8001792 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	0018      	movs	r0, r3
 800173a:	f7ff ff9d 	bl	8001678 <LL_RCC_GetUSARTClockSource>
 800173e:	0003      	movs	r3, r0
 8001740:	2b03      	cmp	r3, #3
 8001742:	d00a      	beq.n	800175a <LL_RCC_GetUSARTClockFreq+0x36>
 8001744:	d818      	bhi.n	8001778 <LL_RCC_GetUSARTClockFreq+0x54>
 8001746:	2b01      	cmp	r3, #1
 8001748:	d002      	beq.n	8001750 <LL_RCC_GetUSARTClockFreq+0x2c>
 800174a:	2b02      	cmp	r3, #2
 800174c:	d00c      	beq.n	8001768 <LL_RCC_GetUSARTClockFreq+0x44>
 800174e:	e013      	b.n	8001778 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001750:	f000 f8ae 	bl	80018b0 <RCC_GetSystemClockFreq>
 8001754:	0003      	movs	r3, r0
 8001756:	60fb      	str	r3, [r7, #12]
        break;
 8001758:	e020      	b.n	800179c <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800175a:	f7ff ff49 	bl	80015f0 <LL_RCC_HSI_IsReady>
 800175e:	1e03      	subs	r3, r0, #0
 8001760:	d019      	beq.n	8001796 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8001762:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <LL_RCC_GetUSARTClockFreq+0x170>)
 8001764:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001766:	e016      	b.n	8001796 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001768:	f7ff ff52 	bl	8001610 <LL_RCC_LSE_IsReady>
 800176c:	1e03      	subs	r3, r0, #0
 800176e:	d014      	beq.n	800179a <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001776:	e010      	b.n	800179a <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001778:	f000 f89a 	bl	80018b0 <RCC_GetSystemClockFreq>
 800177c:	0003      	movs	r3, r0
 800177e:	0018      	movs	r0, r3
 8001780:	f000 f8c4 	bl	800190c <RCC_GetHCLKClockFreq>
 8001784:	0003      	movs	r3, r0
 8001786:	0018      	movs	r0, r3
 8001788:	f000 f8d6 	bl	8001938 <RCC_GetPCLK1ClockFreq>
 800178c:	0003      	movs	r3, r0
 800178e:	60fb      	str	r3, [r7, #12]
        break;
 8001790:	e004      	b.n	800179c <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	e002      	b.n	800179c <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	e000      	b.n	800179c <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 800179a:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CFGR3_USART1SW  */

#if defined(RCC_CFGR3_USART2SW)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d132      	bne.n	8001808 <LL_RCC_GetUSARTClockFreq+0xe4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7ff ff67 	bl	8001678 <LL_RCC_GetUSARTClockSource>
 80017aa:	0003      	movs	r3, r0
 80017ac:	4a3a      	ldr	r2, [pc, #232]	; (8001898 <LL_RCC_GetUSARTClockFreq+0x174>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00e      	beq.n	80017d0 <LL_RCC_GetUSARTClockFreq+0xac>
 80017b2:	4a39      	ldr	r2, [pc, #228]	; (8001898 <LL_RCC_GetUSARTClockFreq+0x174>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d81a      	bhi.n	80017ee <LL_RCC_GetUSARTClockFreq+0xca>
 80017b8:	4a38      	ldr	r2, [pc, #224]	; (800189c <LL_RCC_GetUSARTClockFreq+0x178>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d003      	beq.n	80017c6 <LL_RCC_GetUSARTClockFreq+0xa2>
 80017be:	4a38      	ldr	r2, [pc, #224]	; (80018a0 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d00c      	beq.n	80017de <LL_RCC_GetUSARTClockFreq+0xba>
 80017c4:	e013      	b.n	80017ee <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80017c6:	f000 f873 	bl	80018b0 <RCC_GetSystemClockFreq>
 80017ca:	0003      	movs	r3, r0
 80017cc:	60fb      	str	r3, [r7, #12]
        break;
 80017ce:	e020      	b.n	8001812 <LL_RCC_GetUSARTClockFreq+0xee>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80017d0:	f7ff ff0e 	bl	80015f0 <LL_RCC_HSI_IsReady>
 80017d4:	1e03      	subs	r3, r0, #0
 80017d6:	d019      	beq.n	800180c <LL_RCC_GetUSARTClockFreq+0xe8>
        {
          usart_frequency = HSI_VALUE;
 80017d8:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <LL_RCC_GetUSARTClockFreq+0x170>)
 80017da:	60fb      	str	r3, [r7, #12]
        }
        break;
 80017dc:	e016      	b.n	800180c <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80017de:	f7ff ff17 	bl	8001610 <LL_RCC_LSE_IsReady>
 80017e2:	1e03      	subs	r3, r0, #0
 80017e4:	d014      	beq.n	8001810 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = LSE_VALUE;
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 80017ec:	e010      	b.n	8001810 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80017ee:	f000 f85f 	bl	80018b0 <RCC_GetSystemClockFreq>
 80017f2:	0003      	movs	r3, r0
 80017f4:	0018      	movs	r0, r3
 80017f6:	f000 f889 	bl	800190c <RCC_GetHCLKClockFreq>
 80017fa:	0003      	movs	r3, r0
 80017fc:	0018      	movs	r0, r3
 80017fe:	f000 f89b 	bl	8001938 <RCC_GetPCLK1ClockFreq>
 8001802:	0003      	movs	r3, r0
 8001804:	60fb      	str	r3, [r7, #12]
        break;
 8001806:	e004      	b.n	8001812 <LL_RCC_GetUSARTClockFreq+0xee>
    }
  }
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	e002      	b.n	8001812 <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 800180c:	46c0      	nop			; (mov r8, r8)
 800180e:	e000      	b.n	8001812 <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 8001810:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b12      	cmp	r3, #18
 8001816:	d132      	bne.n	800187e <LL_RCC_GetUSARTClockFreq+0x15a>
  {
    /* USART3CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	0018      	movs	r0, r3
 800181c:	f7ff ff2c 	bl	8001678 <LL_RCC_GetUSARTClockSource>
 8001820:	0003      	movs	r3, r0
 8001822:	4a20      	ldr	r2, [pc, #128]	; (80018a4 <LL_RCC_GetUSARTClockFreq+0x180>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d00e      	beq.n	8001846 <LL_RCC_GetUSARTClockFreq+0x122>
 8001828:	4a1e      	ldr	r2, [pc, #120]	; (80018a4 <LL_RCC_GetUSARTClockFreq+0x180>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d81a      	bhi.n	8001864 <LL_RCC_GetUSARTClockFreq+0x140>
 800182e:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <LL_RCC_GetUSARTClockFreq+0x184>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d003      	beq.n	800183c <LL_RCC_GetUSARTClockFreq+0x118>
 8001834:	4a1d      	ldr	r2, [pc, #116]	; (80018ac <LL_RCC_GetUSARTClockFreq+0x188>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d00c      	beq.n	8001854 <LL_RCC_GetUSARTClockFreq+0x130>
 800183a:	e013      	b.n	8001864 <LL_RCC_GetUSARTClockFreq+0x140>
    {
      case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800183c:	f000 f838 	bl	80018b0 <RCC_GetSystemClockFreq>
 8001840:	0003      	movs	r3, r0
 8001842:	60fb      	str	r3, [r7, #12]
        break;
 8001844:	e020      	b.n	8001888 <LL_RCC_GetUSARTClockFreq+0x164>

      case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001846:	f7ff fed3 	bl	80015f0 <LL_RCC_HSI_IsReady>
 800184a:	1e03      	subs	r3, r0, #0
 800184c:	d019      	beq.n	8001882 <LL_RCC_GetUSARTClockFreq+0x15e>
        {
          usart_frequency = HSI_VALUE;
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <LL_RCC_GetUSARTClockFreq+0x170>)
 8001850:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001852:	e016      	b.n	8001882 <LL_RCC_GetUSARTClockFreq+0x15e>

      case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001854:	f7ff fedc 	bl	8001610 <LL_RCC_LSE_IsReady>
 8001858:	1e03      	subs	r3, r0, #0
 800185a:	d014      	beq.n	8001886 <LL_RCC_GetUSARTClockFreq+0x162>
        {
          usart_frequency = LSE_VALUE;
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001862:	e010      	b.n	8001886 <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001864:	f000 f824 	bl	80018b0 <RCC_GetSystemClockFreq>
 8001868:	0003      	movs	r3, r0
 800186a:	0018      	movs	r0, r3
 800186c:	f000 f84e 	bl	800190c <RCC_GetHCLKClockFreq>
 8001870:	0003      	movs	r3, r0
 8001872:	0018      	movs	r0, r3
 8001874:	f000 f860 	bl	8001938 <RCC_GetPCLK1ClockFreq>
 8001878:	0003      	movs	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]
        break;
 800187c:	e004      	b.n	8001888 <LL_RCC_GetUSARTClockFreq+0x164>
    }
  }
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	e002      	b.n	8001888 <LL_RCC_GetUSARTClockFreq+0x164>
        break;
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	e000      	b.n	8001888 <LL_RCC_GetUSARTClockFreq+0x164>
        break;
 8001886:	46c0      	nop			; (mov r8, r8)

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001888:	68fb      	ldr	r3, [r7, #12]
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b004      	add	sp, #16
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	007a1200 	.word	0x007a1200
 8001898:	10030000 	.word	0x10030000
 800189c:	10010000 	.word	0x10010000
 80018a0:	10020000 	.word	0x10020000
 80018a4:	120c0000 	.word	0x120c0000
 80018a8:	12040000 	.word	0x12040000
 80018ac:	12080000 	.word	0x12080000

080018b0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80018ba:	f7ff feb9 	bl	8001630 <LL_RCC_GetSysClkSource>
 80018be:	0003      	movs	r3, r0
 80018c0:	2b0c      	cmp	r3, #12
 80018c2:	d013      	beq.n	80018ec <RCC_GetSystemClockFreq+0x3c>
 80018c4:	d815      	bhi.n	80018f2 <RCC_GetSystemClockFreq+0x42>
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d00b      	beq.n	80018e2 <RCC_GetSystemClockFreq+0x32>
 80018ca:	d812      	bhi.n	80018f2 <RCC_GetSystemClockFreq+0x42>
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <RCC_GetSystemClockFreq+0x26>
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d003      	beq.n	80018dc <RCC_GetSystemClockFreq+0x2c>
 80018d4:	e00d      	b.n	80018f2 <RCC_GetSystemClockFreq+0x42>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <RCC_GetSystemClockFreq+0x54>)
 80018d8:	607b      	str	r3, [r7, #4]
      break;
 80018da:	e00d      	b.n	80018f8 <RCC_GetSystemClockFreq+0x48>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <RCC_GetSystemClockFreq+0x54>)
 80018de:	607b      	str	r3, [r7, #4]
      break;
 80018e0:	e00a      	b.n	80018f8 <RCC_GetSystemClockFreq+0x48>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80018e2:	f000 f83d 	bl	8001960 <RCC_PLL_GetFreqDomain_SYS>
 80018e6:	0003      	movs	r3, r0
 80018e8:	607b      	str	r3, [r7, #4]
      break;
 80018ea:	e005      	b.n	80018f8 <RCC_GetSystemClockFreq+0x48>

#if defined(RCC_HSI48_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI48:/* HSI48 used as system clock  source */
      frequency = HSI48_VALUE;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <RCC_GetSystemClockFreq+0x58>)
 80018ee:	607b      	str	r3, [r7, #4]
      break;
 80018f0:	e002      	b.n	80018f8 <RCC_GetSystemClockFreq+0x48>
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <RCC_GetSystemClockFreq+0x54>)
 80018f4:	607b      	str	r3, [r7, #4]
      break;
 80018f6:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b002      	add	sp, #8
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	007a1200 	.word	0x007a1200
 8001908:	02dc6c00 	.word	0x02dc6c00

0800190c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001914:	f7ff fe98 	bl	8001648 <LL_RCC_GetAHBPrescaler>
 8001918:	0003      	movs	r3, r0
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	220f      	movs	r2, #15
 800191e:	4013      	ands	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <RCC_GetHCLKClockFreq+0x28>)
 8001922:	5cd3      	ldrb	r3, [r2, r3]
 8001924:	001a      	movs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	40d3      	lsrs	r3, r2
}
 800192a:	0018      	movs	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	b002      	add	sp, #8
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	080023c0 	.word	0x080023c0

08001938 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001940:	f7ff fe8e 	bl	8001660 <LL_RCC_GetAPB1Prescaler>
 8001944:	0003      	movs	r3, r0
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <RCC_GetPCLK1ClockFreq+0x24>)
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	001a      	movs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	40d3      	lsrs	r3, r2
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b002      	add	sp, #8
 8001958:	bd80      	pop	{r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	080023d0 	.word	0x080023d0

08001960 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800196e:	f7ff fe97 	bl	80016a0 <LL_RCC_PLL_GetMainSource>
 8001972:	0003      	movs	r3, r0
 8001974:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	23c0      	movs	r3, #192	; 0xc0
 800197a:	025b      	lsls	r3, r3, #9
 800197c:	429a      	cmp	r2, r3
 800197e:	d012      	beq.n	80019a6 <RCC_PLL_GetFreqDomain_SYS+0x46>
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	23c0      	movs	r3, #192	; 0xc0
 8001984:	025b      	lsls	r3, r3, #9
 8001986:	429a      	cmp	r2, r3
 8001988:	d813      	bhi.n	80019b2 <RCC_PLL_GetFreqDomain_SYS+0x52>
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	429a      	cmp	r2, r3
 8001992:	d005      	beq.n	80019a0 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	025b      	lsls	r3, r3, #9
 800199a:	429a      	cmp	r2, r3
 800199c:	d006      	beq.n	80019ac <RCC_PLL_GetFreqDomain_SYS+0x4c>
 800199e:	e008      	b.n	80019b2 <RCC_PLL_GetFreqDomain_SYS+0x52>
  {
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 80019a2:	607b      	str	r3, [r7, #4]
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80019a4:	e008      	b.n	80019b8 <RCC_PLL_GetFreqDomain_SYS+0x58>

#if defined(RCC_HSI48_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI48:     /* HSI48 used as PLL clock source */
      pllinputfreq = HSI48_VALUE;
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <RCC_PLL_GetFreqDomain_SYS+0x8c>)
 80019a8:	607b      	str	r3, [r7, #4]
      break;
 80019aa:	e005      	b.n	80019b8 <RCC_PLL_GetFreqDomain_SYS+0x58>
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 80019ae:	607b      	str	r3, [r7, #4]
      break;
 80019b0:	e002      	b.n	80019b8 <RCC_PLL_GetFreqDomain_SYS+0x58>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 80019b4:	607b      	str	r3, [r7, #4]
#else
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80019b6:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 80019b8:	f7ff fe8a 	bl	80016d0 <LL_RCC_PLL_GetPrediv>
 80019bc:	0003      	movs	r3, r0
 80019be:	220f      	movs	r2, #15
 80019c0:	4013      	ands	r3, r2
 80019c2:	3301      	adds	r3, #1
 80019c4:	0019      	movs	r1, r3
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7fe fb9c 	bl	8000104 <__udivsi3>
 80019cc:	0003      	movs	r3, r0
 80019ce:	001c      	movs	r4, r3
 80019d0:	f7ff fe72 	bl	80016b8 <LL_RCC_PLL_GetMultiplicator>
 80019d4:	0003      	movs	r3, r0
 80019d6:	0c9b      	lsrs	r3, r3, #18
 80019d8:	220f      	movs	r2, #15
 80019da:	4013      	ands	r3, r2
 80019dc:	3302      	adds	r3, #2
 80019de:	4363      	muls	r3, r4
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80019e0:	0018      	movs	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b003      	add	sp, #12
 80019e6:	bd90      	pop	{r4, r7, pc}
 80019e8:	007a1200 	.word	0x007a1200
 80019ec:	02dc6c00 	.word	0x02dc6c00

080019f0 <LL_TIM_SetPrescaler>:
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a00:	46c0      	nop			; (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b002      	add	sp, #8
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <LL_TIM_SetAutoReload>:
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b002      	add	sp, #8
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <LL_TIM_SetRepetitionCounter>:
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001a30:	46c0      	nop			; (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b002      	add	sp, #8
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <LL_TIM_OC_SetCompareCH1>:
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b002      	add	sp, #8
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <LL_TIM_OC_SetCompareCH2>:
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a60:	46c0      	nop			; (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b002      	add	sp, #8
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <LL_TIM_OC_SetCompareCH3>:
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <LL_TIM_OC_SetCompareCH4>:
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b002      	add	sp, #8
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	615a      	str	r2, [r3, #20]
}
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a35      	ldr	r2, [pc, #212]	; (8001b9c <LL_TIM_Init+0xe8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d008      	beq.n	8001ade <LL_TIM_Init+0x2a>
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	05db      	lsls	r3, r3, #23
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d003      	beq.n	8001ade <LL_TIM_Init+0x2a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a31      	ldr	r2, [pc, #196]	; (8001ba0 <LL_TIM_Init+0xec>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d107      	bne.n	8001aee <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2270      	movs	r2, #112	; 0x70
 8001ae2:	4393      	bics	r3, r2
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a2a      	ldr	r2, [pc, #168]	; (8001b9c <LL_TIM_Init+0xe8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d018      	beq.n	8001b28 <LL_TIM_Init+0x74>
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	05db      	lsls	r3, r3, #23
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d013      	beq.n	8001b28 <LL_TIM_Init+0x74>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a27      	ldr	r2, [pc, #156]	; (8001ba0 <LL_TIM_Init+0xec>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00f      	beq.n	8001b28 <LL_TIM_Init+0x74>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a26      	ldr	r2, [pc, #152]	; (8001ba4 <LL_TIM_Init+0xf0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00b      	beq.n	8001b28 <LL_TIM_Init+0x74>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a25      	ldr	r2, [pc, #148]	; (8001ba8 <LL_TIM_Init+0xf4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d007      	beq.n	8001b28 <LL_TIM_Init+0x74>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a24      	ldr	r2, [pc, #144]	; (8001bac <LL_TIM_Init+0xf8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d003      	beq.n	8001b28 <LL_TIM_Init+0x74>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a23      	ldr	r2, [pc, #140]	; (8001bb0 <LL_TIM_Init+0xfc>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d106      	bne.n	8001b36 <LL_TIM_Init+0x82>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4a22      	ldr	r2, [pc, #136]	; (8001bb4 <LL_TIM_Init+0x100>)
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0011      	movs	r1, r2
 8001b44:	0018      	movs	r0, r3
 8001b46:	f7ff ff5f 	bl	8001a08 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	001a      	movs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	0011      	movs	r1, r2
 8001b54:	0018      	movs	r0, r3
 8001b56:	f7ff ff4b 	bl	80019f0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <LL_TIM_Init+0xe8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00b      	beq.n	8001b7a <LL_TIM_Init+0xc6>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <LL_TIM_Init+0xf4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d007      	beq.n	8001b7a <LL_TIM_Init+0xc6>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <LL_TIM_Init+0xf8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d003      	beq.n	8001b7a <LL_TIM_Init+0xc6>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a0e      	ldr	r2, [pc, #56]	; (8001bb0 <LL_TIM_Init+0xfc>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d106      	bne.n	8001b88 <LL_TIM_Init+0xd4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	0011      	movs	r1, r2
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7ff ff4c 	bl	8001a20 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f7ff ff84 	bl	8001a98 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b004      	add	sp, #16
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	40012c00 	.word	0x40012c00
 8001ba0:	40000400 	.word	0x40000400
 8001ba4:	40002000 	.word	0x40002000
 8001ba8:	40014000 	.word	0x40014000
 8001bac:	40014400 	.word	0x40014400
 8001bb0:	40014800 	.word	0x40014800
 8001bb4:	fffffcff 	.word	0xfffffcff

08001bb8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001bc4:	2317      	movs	r3, #23
 8001bc6:	18fb      	adds	r3, r7, r3
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	015b      	lsls	r3, r3, #5
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d036      	beq.n	8001c44 <LL_TIM_OC_Init+0x8c>
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	015b      	lsls	r3, r3, #5
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d83c      	bhi.n	8001c5a <LL_TIM_OC_Init+0xa2>
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d021      	beq.n	8001c2e <LL_TIM_OC_Init+0x76>
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d832      	bhi.n	8001c5a <LL_TIM_OC_Init+0xa2>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d003      	beq.n	8001c02 <LL_TIM_OC_Init+0x4a>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b10      	cmp	r3, #16
 8001bfe:	d00b      	beq.n	8001c18 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001c00:	e02b      	b.n	8001c5a <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001c02:	2317      	movs	r3, #23
 8001c04:	18fc      	adds	r4, r7, r3
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	0011      	movs	r1, r2
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f000 f82d 	bl	8001c6c <OC1Config>
 8001c12:	0003      	movs	r3, r0
 8001c14:	7023      	strb	r3, [r4, #0]
      break;
 8001c16:	e021      	b.n	8001c5c <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001c18:	2317      	movs	r3, #23
 8001c1a:	18fc      	adds	r4, r7, r3
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	0011      	movs	r1, r2
 8001c22:	0018      	movs	r0, r3
 8001c24:	f000 f8a6 	bl	8001d74 <OC2Config>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	7023      	strb	r3, [r4, #0]
      break;
 8001c2c:	e016      	b.n	8001c5c <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001c2e:	2317      	movs	r3, #23
 8001c30:	18fc      	adds	r4, r7, r3
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	0011      	movs	r1, r2
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f000 f925 	bl	8001e88 <OC3Config>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	7023      	strb	r3, [r4, #0]
      break;
 8001c42:	e00b      	b.n	8001c5c <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001c44:	2317      	movs	r3, #23
 8001c46:	18fc      	adds	r4, r7, r3
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0011      	movs	r1, r2
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 f9a4 	bl	8001f9c <OC4Config>
 8001c54:	0003      	movs	r3, r0
 8001c56:	7023      	strb	r3, [r4, #0]
      break;
 8001c58:	e000      	b.n	8001c5c <LL_TIM_OC_Init+0xa4>
      break;
 8001c5a:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8001c5c:	2317      	movs	r3, #23
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	781b      	ldrb	r3, [r3, #0]
}
 8001c62:	0018      	movs	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b007      	add	sp, #28
 8001c68:	bd90      	pop	{r4, r7, pc}
	...

08001c6c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4393      	bics	r3, r2
 8001c7e:	001a      	movs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	4393      	bics	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2270      	movs	r2, #112	; 0x70
 8001ca2:	4393      	bics	r3, r2
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	4393      	bics	r3, r2
 8001cb4:	001a      	movs	r2, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4393      	bics	r3, r2
 8001cc4:	001a      	movs	r2, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a22      	ldr	r2, [pc, #136]	; (8001d5c <OC1Config+0xf0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00b      	beq.n	8001cee <OC1Config+0x82>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a21      	ldr	r2, [pc, #132]	; (8001d60 <OC1Config+0xf4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d007      	beq.n	8001cee <OC1Config+0x82>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a20      	ldr	r2, [pc, #128]	; (8001d64 <OC1Config+0xf8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d003      	beq.n	8001cee <OC1Config+0x82>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <OC1Config+0xfc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d120      	bne.n	8001d30 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	4393      	bics	r3, r2
 8001cf4:	001a      	movs	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2204      	movs	r2, #4
 8001d04:	4393      	bics	r3, r2
 8001d06:	001a      	movs	r2, r3
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4a15      	ldr	r2, [pc, #84]	; (8001d6c <OC1Config+0x100>)
 8001d16:	401a      	ands	r2, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <OC1Config+0x104>)
 8001d24:	401a      	ands	r2, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	0011      	movs	r1, r2
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff fe77 	bl	8001a38 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	0018      	movs	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b006      	add	sp, #24
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	40012c00 	.word	0x40012c00
 8001d60:	40014000 	.word	0x40014000
 8001d64:	40014400 	.word	0x40014400
 8001d68:	40014800 	.word	0x40014800
 8001d6c:	fffffeff 	.word	0xfffffeff
 8001d70:	fffffdff 	.word	0xfffffdff

08001d74 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	2210      	movs	r2, #16
 8001d84:	4393      	bics	r3, r2
 8001d86:	001a      	movs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4a31      	ldr	r2, [pc, #196]	; (8001e68 <OC2Config+0xf4>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4a30      	ldr	r2, [pc, #192]	; (8001e6c <OC2Config+0xf8>)
 8001daa:	401a      	ands	r2, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2220      	movs	r2, #32
 8001dba:	4393      	bics	r3, r2
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2210      	movs	r2, #16
 8001dcc:	4393      	bics	r3, r2
 8001dce:	001a      	movs	r2, r3
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a24      	ldr	r2, [pc, #144]	; (8001e70 <OC2Config+0xfc>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00b      	beq.n	8001dfa <OC2Config+0x86>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a23      	ldr	r2, [pc, #140]	; (8001e74 <OC2Config+0x100>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d007      	beq.n	8001dfa <OC2Config+0x86>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a22      	ldr	r2, [pc, #136]	; (8001e78 <OC2Config+0x104>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d003      	beq.n	8001dfa <OC2Config+0x86>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a21      	ldr	r2, [pc, #132]	; (8001e7c <OC2Config+0x108>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d121      	bne.n	8001e3e <OC2Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2280      	movs	r2, #128	; 0x80
 8001dfe:	4393      	bics	r3, r2
 8001e00:	001a      	movs	r2, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	019b      	lsls	r3, r3, #6
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2240      	movs	r2, #64	; 0x40
 8001e10:	4393      	bics	r3, r2
 8001e12:	001a      	movs	r2, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	019b      	lsls	r3, r3, #6
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <OC2Config+0x10c>)
 8001e22:	401a      	ands	r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4a14      	ldr	r2, [pc, #80]	; (8001e84 <OC2Config+0x110>)
 8001e32:	401a      	ands	r2, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	0011      	movs	r1, r2
 8001e52:	0018      	movs	r0, r3
 8001e54:	f7ff fdfc 	bl	8001a50 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	0018      	movs	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b006      	add	sp, #24
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	fffffcff 	.word	0xfffffcff
 8001e6c:	ffff8fff 	.word	0xffff8fff
 8001e70:	40012c00 	.word	0x40012c00
 8001e74:	40014000 	.word	0x40014000
 8001e78:	40014400 	.word	0x40014400
 8001e7c:	40014800 	.word	0x40014800
 8001e80:	fffffbff 	.word	0xfffffbff
 8001e84:	fffff7ff 	.word	0xfffff7ff

08001e88 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a37      	ldr	r2, [pc, #220]	; (8001f74 <OC3Config+0xec>)
 8001e98:	401a      	ands	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	4393      	bics	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2270      	movs	r2, #112	; 0x70
 8001ebc:	4393      	bics	r3, r2
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	4a2b      	ldr	r2, [pc, #172]	; (8001f78 <OC3Config+0xf0>)
 8001ecc:	401a      	ands	r2, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <OC3Config+0xec>)
 8001edc:	401a      	ands	r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a24      	ldr	r2, [pc, #144]	; (8001f7c <OC3Config+0xf4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00b      	beq.n	8001f08 <OC3Config+0x80>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a23      	ldr	r2, [pc, #140]	; (8001f80 <OC3Config+0xf8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d007      	beq.n	8001f08 <OC3Config+0x80>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a22      	ldr	r2, [pc, #136]	; (8001f84 <OC3Config+0xfc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d003      	beq.n	8001f08 <OC3Config+0x80>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a21      	ldr	r2, [pc, #132]	; (8001f88 <OC3Config+0x100>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d11f      	bne.n	8001f48 <OC3Config+0xc0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	4a20      	ldr	r2, [pc, #128]	; (8001f8c <OC3Config+0x104>)
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	029b      	lsls	r3, r3, #10
 8001f14:	4313      	orrs	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <OC3Config+0x108>)
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	029b      	lsls	r3, r3, #10
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <OC3Config+0x10c>)
 8001f2c:	401a      	ands	r2, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4a17      	ldr	r2, [pc, #92]	; (8001f98 <OC3Config+0x110>)
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	015b      	lsls	r3, r3, #5
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	0011      	movs	r1, r2
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f7ff fd83 	bl	8001a68 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b006      	add	sp, #24
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	fffffeff 	.word	0xfffffeff
 8001f78:	fffffdff 	.word	0xfffffdff
 8001f7c:	40012c00 	.word	0x40012c00
 8001f80:	40014000 	.word	0x40014000
 8001f84:	40014400 	.word	0x40014400
 8001f88:	40014800 	.word	0x40014800
 8001f8c:	fffff7ff 	.word	0xfffff7ff
 8001f90:	fffffbff 	.word	0xfffffbff
 8001f94:	ffffefff 	.word	0xffffefff
 8001f98:	ffffdfff 	.word	0xffffdfff

08001f9c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a2b      	ldr	r2, [pc, #172]	; (8002058 <OC4Config+0xbc>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4a25      	ldr	r2, [pc, #148]	; (800205c <OC4Config+0xc0>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4a24      	ldr	r2, [pc, #144]	; (8002060 <OC4Config+0xc4>)
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4a21      	ldr	r2, [pc, #132]	; (8002064 <OC4Config+0xc8>)
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	031b      	lsls	r3, r3, #12
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <OC4Config+0xbc>)
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	031b      	lsls	r3, r3, #12
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <OC4Config+0xcc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00b      	beq.n	800201c <OC4Config+0x80>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a19      	ldr	r2, [pc, #100]	; (800206c <OC4Config+0xd0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d007      	beq.n	800201c <OC4Config+0x80>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a18      	ldr	r2, [pc, #96]	; (8002070 <OC4Config+0xd4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <OC4Config+0x80>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a17      	ldr	r2, [pc, #92]	; (8002074 <OC4Config+0xd8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d107      	bne.n	800202c <OC4Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	4a16      	ldr	r2, [pc, #88]	; (8002078 <OC4Config+0xdc>)
 8002020:	401a      	ands	r2, r3
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	019b      	lsls	r3, r3, #6
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	0011      	movs	r1, r2
 8002040:	0018      	movs	r0, r3
 8002042:	f7ff fd1d 	bl	8001a80 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800204c:	2300      	movs	r3, #0
}
 800204e:	0018      	movs	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	b006      	add	sp, #24
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	ffffefff 	.word	0xffffefff
 800205c:	fffffcff 	.word	0xfffffcff
 8002060:	ffff8fff 	.word	0xffff8fff
 8002064:	ffffdfff 	.word	0xffffdfff
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40014000 	.word	0x40014000
 8002070:	40014400 	.word	0x40014400
 8002074:	40014800 	.word	0x40014800
 8002078:	ffffbfff 	.word	0xffffbfff

0800207c <LL_USART_IsEnabled>:
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	4013      	ands	r3, r2
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <LL_USART_IsEnabled+0x18>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <LL_USART_IsEnabled+0x1a>
 8002094:	2300      	movs	r3, #0
}
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <LL_USART_SetStopBitsLength>:
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <LL_USART_SetStopBitsLength+0x24>)
 80020b0:	401a      	ands	r2, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	605a      	str	r2, [r3, #4]
}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	46bd      	mov	sp, r7
 80020be:	b002      	add	sp, #8
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	ffffcfff 	.word	0xffffcfff

080020c8 <LL_USART_SetHWFlowCtrl>:
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <LL_USART_SetHWFlowCtrl+0x24>)
 80020d8:	401a      	ands	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	609a      	str	r2, [r3, #8]
}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b002      	add	sp, #8
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	fffffcff 	.word	0xfffffcff

080020f0 <LL_USART_SetBaudRate>:
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	429a      	cmp	r2, r3
 8002106:	d11c      	bne.n	8002142 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	005a      	lsls	r2, r3, #1
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	085b      	lsrs	r3, r3, #1
 8002110:	18d3      	adds	r3, r2, r3
 8002112:	6839      	ldr	r1, [r7, #0]
 8002114:	0018      	movs	r0, r3
 8002116:	f7fd fff5 	bl	8000104 <__udivsi3>
 800211a:	0003      	movs	r3, r0
 800211c:	b29b      	uxth	r3, r3
 800211e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	4a10      	ldr	r2, [pc, #64]	; (8002164 <LL_USART_SetBaudRate+0x74>)
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	085b      	lsrs	r3, r3, #1
 800212c:	b29b      	uxth	r3, r3
 800212e:	001a      	movs	r2, r3
 8002130:	2307      	movs	r3, #7
 8002132:	4013      	ands	r3, r2
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	60da      	str	r2, [r3, #12]
}
 8002140:	e00c      	b.n	800215c <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	085a      	lsrs	r2, r3, #1
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	18d3      	adds	r3, r2, r3
 800214a:	6839      	ldr	r1, [r7, #0]
 800214c:	0018      	movs	r0, r3
 800214e:	f7fd ffd9 	bl	8000104 <__udivsi3>
 8002152:	0003      	movs	r3, r0
 8002154:	b29b      	uxth	r3, r3
 8002156:	001a      	movs	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	60da      	str	r2, [r3, #12]
}
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b006      	add	sp, #24
 8002162:	bd80      	pop	{r7, pc}
 8002164:	0000fff0 	.word	0x0000fff0

08002168 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002172:	231f      	movs	r3, #31
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0018      	movs	r0, r3
 8002182:	f7ff ff7b 	bl	800207c <LL_USART_IsEnabled>
 8002186:	1e03      	subs	r3, r0, #0
 8002188:	d000      	beq.n	800218c <LL_USART_Init+0x24>
 800218a:	e090      	b.n	80022ae <LL_USART_Init+0x146>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a4a      	ldr	r2, [pc, #296]	; (80022bc <LL_USART_Init+0x154>)
 8002192:	401a      	ands	r2, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4319      	orrs	r1, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	4319      	orrs	r1, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	430b      	orrs	r3, r1
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	0011      	movs	r1, r2
 80021b8:	0018      	movs	r0, r3
 80021ba:	f7ff ff71 	bl	80020a0 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	0011      	movs	r1, r2
 80021c6:	0018      	movs	r0, r3
 80021c8:	f7ff ff7e 	bl	80020c8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a3c      	ldr	r2, [pc, #240]	; (80022c0 <LL_USART_Init+0x158>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d105      	bne.n	80021e0 <LL_USART_Init+0x78>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7ff faa5 	bl	8001724 <LL_RCC_GetUSARTClockFreq>
 80021da:	0003      	movs	r3, r0
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	e053      	b.n	8002288 <LL_USART_Init+0x120>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a38      	ldr	r2, [pc, #224]	; (80022c4 <LL_USART_Init+0x15c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d105      	bne.n	80021f4 <LL_USART_Init+0x8c>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80021e8:	2010      	movs	r0, #16
 80021ea:	f7ff fa9b 	bl	8001724 <LL_RCC_GetUSARTClockFreq>
 80021ee:	0003      	movs	r3, r0
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	e049      	b.n	8002288 <LL_USART_Init+0x120>
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#endif /* USART2 */
#if defined(USART3)
    else if (USARTx == USART3)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a34      	ldr	r2, [pc, #208]	; (80022c8 <LL_USART_Init+0x160>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d105      	bne.n	8002208 <LL_USART_Init+0xa0>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80021fc:	2012      	movs	r0, #18
 80021fe:	f7ff fa91 	bl	8001724 <LL_RCC_GetUSARTClockFreq>
 8002202:	0003      	movs	r3, r0
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	e03f      	b.n	8002288 <LL_USART_Init+0x120>
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a30      	ldr	r2, [pc, #192]	; (80022cc <LL_USART_Init+0x164>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d108      	bne.n	8002222 <LL_USART_Init+0xba>
    {
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002210:	240c      	movs	r4, #12
 8002212:	193b      	adds	r3, r7, r4
 8002214:	0018      	movs	r0, r3
 8002216:	f7ff fa67 	bl	80016e8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800221a:	193b      	adds	r3, r7, r4
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	e032      	b.n	8002288 <LL_USART_Init+0x120>
    }
#endif /* USART4 */
#if defined(USART5)
    else if (USARTx == USART5)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <LL_USART_Init+0x168>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d108      	bne.n	800223c <LL_USART_Init+0xd4>
    {
      /* USART5 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800222a:	240c      	movs	r4, #12
 800222c:	193b      	adds	r3, r7, r4
 800222e:	0018      	movs	r0, r3
 8002230:	f7ff fa5a 	bl	80016e8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002234:	193b      	adds	r3, r7, r4
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	e025      	b.n	8002288 <LL_USART_Init+0x120>
    }
#endif /* USART5 */
#if defined(USART6)
    else if (USARTx == USART6)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a25      	ldr	r2, [pc, #148]	; (80022d4 <LL_USART_Init+0x16c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d108      	bne.n	8002256 <LL_USART_Init+0xee>
    {
      /* USART6 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002244:	240c      	movs	r4, #12
 8002246:	193b      	adds	r3, r7, r4
 8002248:	0018      	movs	r0, r3
 800224a:	f7ff fa4d 	bl	80016e8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800224e:	193b      	adds	r3, r7, r4
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	61bb      	str	r3, [r7, #24]
 8002254:	e018      	b.n	8002288 <LL_USART_Init+0x120>
    }
#endif /* USART6 */
#if defined(USART7)
    else if (USARTx == USART7)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a1f      	ldr	r2, [pc, #124]	; (80022d8 <LL_USART_Init+0x170>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d108      	bne.n	8002270 <LL_USART_Init+0x108>
    {
      /* USART7 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800225e:	240c      	movs	r4, #12
 8002260:	193b      	adds	r3, r7, r4
 8002262:	0018      	movs	r0, r3
 8002264:	f7ff fa40 	bl	80016e8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002268:	193b      	adds	r3, r7, r4
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	e00b      	b.n	8002288 <LL_USART_Init+0x120>
    }
#endif /* USART7 */
#if defined(USART8)
    else if (USARTx == USART8)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <LL_USART_Init+0x174>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d107      	bne.n	8002288 <LL_USART_Init+0x120>
    {
      /* USART8 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002278:	240c      	movs	r4, #12
 800227a:	193b      	adds	r3, r7, r4
 800227c:	0018      	movs	r0, r3
 800227e:	f7ff fa33 	bl	80016e8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002282:	193b      	adds	r3, r7, r4
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00f      	beq.n	80022ae <LL_USART_Init+0x146>
        && (USART_InitStruct->BaudRate != 0U))
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <LL_USART_Init+0x146>
    {
      status = SUCCESS;
 8002296:	231f      	movs	r3, #31
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69b9      	ldr	r1, [r7, #24]
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff21 	bl	80020f0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80022ae:	231f      	movs	r3, #31
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	781b      	ldrb	r3, [r3, #0]
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b009      	add	sp, #36	; 0x24
 80022ba:	bd90      	pop	{r4, r7, pc}
 80022bc:	efff69f3 	.word	0xefff69f3
 80022c0:	40013800 	.word	0x40013800
 80022c4:	40004400 	.word	0x40004400
 80022c8:	40004800 	.word	0x40004800
 80022cc:	40004c00 	.word	0x40004c00
 80022d0:	40005000 	.word	0x40005000
 80022d4:	40011400 	.word	0x40011400
 80022d8:	40011800 	.word	0x40011800
 80022dc:	40011c00 	.word	0x40011c00

080022e0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80022ea:	6839      	ldr	r1, [r7, #0]
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7fd ff09 	bl	8000104 <__udivsi3>
 80022f2:	0003      	movs	r3, r0
 80022f4:	001a      	movs	r2, r3
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <LL_InitTick+0x30>)
 80022f8:	3a01      	subs	r2, #1
 80022fa:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <LL_InitTick+0x30>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002302:	4b03      	ldr	r3, [pc, #12]	; (8002310 <LL_InitTick+0x30>)
 8002304:	2205      	movs	r2, #5
 8002306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002308:	46c0      	nop			; (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	b002      	add	sp, #8
 800230e:	bd80      	pop	{r7, pc}
 8002310:	e000e010 	.word	0xe000e010

08002314 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800231c:	23fa      	movs	r3, #250	; 0xfa
 800231e:	009a      	lsls	r2, r3, #2
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	0011      	movs	r1, r2
 8002324:	0018      	movs	r0, r3
 8002326:	f7ff ffdb 	bl	80022e0 <LL_InitTick>
}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b002      	add	sp, #8
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <LL_SetSystemCoreClock+0x18>)
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	601a      	str	r2, [r3, #0]
}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	46bd      	mov	sp, r7
 8002346:	b002      	add	sp, #8
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	20000000 	.word	0x20000000

08002350 <__libc_init_array>:
 8002350:	b570      	push	{r4, r5, r6, lr}
 8002352:	2600      	movs	r6, #0
 8002354:	4d0c      	ldr	r5, [pc, #48]	; (8002388 <__libc_init_array+0x38>)
 8002356:	4c0d      	ldr	r4, [pc, #52]	; (800238c <__libc_init_array+0x3c>)
 8002358:	1b64      	subs	r4, r4, r5
 800235a:	10a4      	asrs	r4, r4, #2
 800235c:	42a6      	cmp	r6, r4
 800235e:	d109      	bne.n	8002374 <__libc_init_array+0x24>
 8002360:	2600      	movs	r6, #0
 8002362:	f000 f821 	bl	80023a8 <_init>
 8002366:	4d0a      	ldr	r5, [pc, #40]	; (8002390 <__libc_init_array+0x40>)
 8002368:	4c0a      	ldr	r4, [pc, #40]	; (8002394 <__libc_init_array+0x44>)
 800236a:	1b64      	subs	r4, r4, r5
 800236c:	10a4      	asrs	r4, r4, #2
 800236e:	42a6      	cmp	r6, r4
 8002370:	d105      	bne.n	800237e <__libc_init_array+0x2e>
 8002372:	bd70      	pop	{r4, r5, r6, pc}
 8002374:	00b3      	lsls	r3, r6, #2
 8002376:	58eb      	ldr	r3, [r5, r3]
 8002378:	4798      	blx	r3
 800237a:	3601      	adds	r6, #1
 800237c:	e7ee      	b.n	800235c <__libc_init_array+0xc>
 800237e:	00b3      	lsls	r3, r6, #2
 8002380:	58eb      	ldr	r3, [r5, r3]
 8002382:	4798      	blx	r3
 8002384:	3601      	adds	r6, #1
 8002386:	e7f2      	b.n	800236e <__libc_init_array+0x1e>
 8002388:	080023e8 	.word	0x080023e8
 800238c:	080023e8 	.word	0x080023e8
 8002390:	080023e8 	.word	0x080023e8
 8002394:	080023ec 	.word	0x080023ec

08002398 <memset>:
 8002398:	0003      	movs	r3, r0
 800239a:	1882      	adds	r2, r0, r2
 800239c:	4293      	cmp	r3, r2
 800239e:	d100      	bne.n	80023a2 <memset+0xa>
 80023a0:	4770      	bx	lr
 80023a2:	7019      	strb	r1, [r3, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	e7f9      	b.n	800239c <memset+0x4>

080023a8 <_init>:
 80023a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ae:	bc08      	pop	{r3}
 80023b0:	469e      	mov	lr, r3
 80023b2:	4770      	bx	lr

080023b4 <_fini>:
 80023b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ba:	bc08      	pop	{r3}
 80023bc:	469e      	mov	lr, r3
 80023be:	4770      	bx	lr
