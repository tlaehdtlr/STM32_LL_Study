
STM32_LL_basics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027e0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800289c  0800289c  0001289c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c4  080028c4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080028c4  080028c4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028c4  080028c4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c4  080028c4  000128c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028c8  080028c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080028cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000004  080028d0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080028d0  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005eb2  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ef  00000000  00000000  00025ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  000275d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  00027dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015636  00000000  00000000  000284e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ff4  00000000  00000000  0003db1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000707ca  00000000  00000000  00043b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b42dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b0c  00000000  00000000  000b432c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002884 	.word	0x08002884

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08002884 	.word	0x08002884

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000336:	6959      	ldr	r1, [r3, #20]
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <LL_AHB1_GRP1_EnableClock+0x28>)
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	430a      	orrs	r2, r1
 800033e:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	4013      	ands	r3, r2
 8000348:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800034a:	68fb      	ldr	r3, [r7, #12]
}
 800034c:	46c0      	nop			; (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	b004      	add	sp, #16
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40021000 	.word	0x40021000

08000358 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 8000362:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <LL_SYSCFG_SetEXTISource+0x48>)
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	21ff      	movs	r1, #255	; 0xff
 8000368:	400b      	ands	r3, r1
 800036a:	3302      	adds	r3, #2
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	589b      	ldr	r3, [r3, r2]
 8000370:	683a      	ldr	r2, [r7, #0]
 8000372:	0c12      	lsrs	r2, r2, #16
 8000374:	210f      	movs	r1, #15
 8000376:	4091      	lsls	r1, r2
 8000378:	000a      	movs	r2, r1
 800037a:	43d2      	mvns	r2, r2
 800037c:	401a      	ands	r2, r3
 800037e:	0011      	movs	r1, r2
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	0c1b      	lsrs	r3, r3, #16
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	409a      	lsls	r2, r3
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <LL_SYSCFG_SetEXTISource+0x48>)
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	24ff      	movs	r4, #255	; 0xff
 800038e:	4023      	ands	r3, r4
 8000390:	430a      	orrs	r2, r1
 8000392:	3302      	adds	r3, #2
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	501a      	str	r2, [r3, r0]
}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	b003      	add	sp, #12
 800039e:	bd90      	pop	{r4, r7, pc}
 80003a0:	40010000 	.word	0x40010000

080003a4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	6819      	ldr	r1, [r3, #0]
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	435b      	muls	r3, r3
 80003b8:	001a      	movs	r2, r3
 80003ba:	0013      	movs	r3, r2
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	189b      	adds	r3, r3, r2
 80003c0:	43db      	mvns	r3, r3
 80003c2:	400b      	ands	r3, r1
 80003c4:	001a      	movs	r2, r3
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	435b      	muls	r3, r3
 80003ca:	6879      	ldr	r1, [r7, #4]
 80003cc:	434b      	muls	r3, r1
 80003ce:	431a      	orrs	r2, r3
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	601a      	str	r2, [r3, #0]
}
 80003d4:	46c0      	nop			; (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b004      	add	sp, #16
 80003da:	bd80      	pop	{r7, pc}

080003dc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	68d9      	ldr	r1, [r3, #12]
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	435b      	muls	r3, r3
 80003f0:	001a      	movs	r2, r3
 80003f2:	0013      	movs	r3, r2
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	189b      	adds	r3, r3, r2
 80003f8:	43db      	mvns	r3, r3
 80003fa:	400b      	ands	r3, r1
 80003fc:	001a      	movs	r2, r3
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	435b      	muls	r3, r3
 8000402:	6879      	ldr	r1, [r7, #4]
 8000404:	434b      	muls	r3, r1
 8000406:	431a      	orrs	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	60da      	str	r2, [r3, #12]
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b004      	add	sp, #16
 8000412:	bd80      	pop	{r7, pc}

08000414 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800041a:	003b      	movs	r3, r7
 800041c:	0018      	movs	r0, r3
 800041e:	2308      	movs	r3, #8
 8000420:	001a      	movs	r2, r3
 8000422:	2100      	movs	r1, #0
 8000424:	f002 fa26 	bl	8002874 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	031b      	lsls	r3, r3, #12
 800042c:	0018      	movs	r0, r3
 800042e:	f7ff ff7d 	bl	800032c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000432:	2380      	movs	r3, #128	; 0x80
 8000434:	03db      	lsls	r3, r3, #15
 8000436:	0018      	movs	r0, r3
 8000438:	f7ff ff78 	bl	800032c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	029b      	lsls	r3, r3, #10
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff ff73 	bl	800032c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <MX_GPIO_Init+0x90>)
 8000448:	0019      	movs	r1, r3
 800044a:	2002      	movs	r0, #2
 800044c:	f7ff ff84 	bl	8000358 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_13, LL_GPIO_PULL_NO);
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	019b      	lsls	r3, r3, #6
 8000454:	4814      	ldr	r0, [pc, #80]	; (80004a8 <MX_GPIO_Init+0x94>)
 8000456:	2200      	movs	r2, #0
 8000458:	0019      	movs	r1, r3
 800045a:	f7ff ffbf 	bl	80003dc <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_13, LL_GPIO_MODE_INPUT);
 800045e:	2380      	movs	r3, #128	; 0x80
 8000460:	019b      	lsls	r3, r3, #6
 8000462:	4811      	ldr	r0, [pc, #68]	; (80004a8 <MX_GPIO_Init+0x94>)
 8000464:	2200      	movs	r2, #0
 8000466:	0019      	movs	r1, r3
 8000468:	f7ff ff9c 	bl	80003a4 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800046c:	003b      	movs	r3, r7
 800046e:	2280      	movs	r2, #128	; 0x80
 8000470:	0192      	lsls	r2, r2, #6
 8000472:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000474:	003b      	movs	r3, r7
 8000476:	2201      	movs	r2, #1
 8000478:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800047a:	003b      	movs	r3, r7
 800047c:	2200      	movs	r2, #0
 800047e:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000480:	003b      	movs	r3, r7
 8000482:	2202      	movs	r2, #2
 8000484:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000486:	003b      	movs	r3, r7
 8000488:	0018      	movs	r0, r3
 800048a:	f001 f981 	bl	8001790 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 800048e:	2100      	movs	r1, #0
 8000490:	2007      	movs	r0, #7
 8000492:	f7ff fedd 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000496:	2007      	movs	r0, #7
 8000498:	f7ff fec0 	bl	800021c <__NVIC_EnableIRQ>

}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	00040003 	.word	0x00040003
 80004a8:	48000800 	.word	0x48000800

080004ac <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <LL_RCC_HSI_Enable+0x18>)
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <LL_RCC_HSI_Enable+0x18>)
 80004b6:	2101      	movs	r1, #1
 80004b8:	430a      	orrs	r2, r1
 80004ba:	601a      	str	r2, [r3, #0]
}
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	40021000 	.word	0x40021000

080004c8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <LL_RCC_HSI_IsReady+0x1c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2202      	movs	r2, #2
 80004d2:	4013      	ands	r3, r2
 80004d4:	3b02      	subs	r3, #2
 80004d6:	425a      	negs	r2, r3
 80004d8:	4153      	adcs	r3, r2
 80004da:	b2db      	uxtb	r3, r3
}
 80004dc:	0018      	movs	r0, r3
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40021000 	.word	0x40021000

080004e8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	22f8      	movs	r2, #248	; 0xf8
 80004f6:	4393      	bics	r3, r2
 80004f8:	0019      	movs	r1, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	00da      	lsls	r2, r3, #3
 80004fe:	4b03      	ldr	r3, [pc, #12]	; (800050c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000500:	430a      	orrs	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b002      	add	sp, #8
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000

08000510 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <LL_RCC_SetSysClkSource+0x24>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	2203      	movs	r2, #3
 800051e:	4393      	bics	r3, r2
 8000520:	0019      	movs	r1, r3
 8000522:	4b04      	ldr	r3, [pc, #16]	; (8000534 <LL_RCC_SetSysClkSource+0x24>)
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	430a      	orrs	r2, r1
 8000528:	605a      	str	r2, [r3, #4]
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b002      	add	sp, #8
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	40021000 	.word	0x40021000

08000538 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <LL_RCC_GetSysClkSource+0x14>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	220c      	movs	r2, #12
 8000542:	4013      	ands	r3, r2
}
 8000544:	0018      	movs	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40021000 	.word	0x40021000

08000550 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <LL_RCC_SetAHBPrescaler+0x24>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	22f0      	movs	r2, #240	; 0xf0
 800055e:	4393      	bics	r3, r2
 8000560:	0019      	movs	r1, r3
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <LL_RCC_SetAHBPrescaler+0x24>)
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	430a      	orrs	r2, r1
 8000568:	605a      	str	r2, [r3, #4]
}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40021000 	.word	0x40021000

08000578 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000586:	4013      	ands	r3, r2
 8000588:	0019      	movs	r1, r3
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <LL_RCC_SetAPB1Prescaler+0x24>)
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	430a      	orrs	r2, r1
 8000590:	605a      	str	r2, [r3, #4]
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b002      	add	sp, #8
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	40021000 	.word	0x40021000
 80005a0:	fffff8ff 	.word	0xfffff8ff

080005a4 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <LL_RCC_SetUSARTClockSource+0x30>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	0e12      	lsrs	r2, r2, #24
 80005b4:	2103      	movs	r1, #3
 80005b6:	4091      	lsls	r1, r2
 80005b8:	000a      	movs	r2, r1
 80005ba:	43d2      	mvns	r2, r2
 80005bc:	401a      	ands	r2, r3
 80005be:	0011      	movs	r1, r2
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	021b      	lsls	r3, r3, #8
 80005c4:	0a1a      	lsrs	r2, r3, #8
 80005c6:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <LL_RCC_SetUSARTClockSource+0x30>)
 80005c8:	430a      	orrs	r2, r1
 80005ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b002      	add	sp, #8
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000

080005d8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <LL_RCC_PLL_Enable+0x18>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <LL_RCC_PLL_Enable+0x18>)
 80005e2:	2180      	movs	r1, #128	; 0x80
 80005e4:	0449      	lsls	r1, r1, #17
 80005e6:	430a      	orrs	r2, r1
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40021000 	.word	0x40021000

080005f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <LL_RCC_PLL_IsReady+0x24>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	049b      	lsls	r3, r3, #18
 8000600:	4013      	ands	r3, r2
 8000602:	22fe      	movs	r2, #254	; 0xfe
 8000604:	0612      	lsls	r2, r2, #24
 8000606:	4694      	mov	ip, r2
 8000608:	4463      	add	r3, ip
 800060a:	425a      	negs	r2, r3
 800060c:	4153      	adcs	r3, r2
 800060e:	b2db      	uxtb	r3, r3
}
 8000610:	0018      	movs	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	40021000 	.word	0x40021000

0800061c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 800062e:	4013      	ands	r3, r2
 8000630:	0019      	movs	r1, r3
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	431a      	orrs	r2, r3
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800063a:	430a      	orrs	r2, r1
 800063c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000642:	220f      	movs	r2, #15
 8000644:	4393      	bics	r3, r2
 8000646:	0019      	movs	r1, r3
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	430a      	orrs	r2, r1
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b004      	add	sp, #16
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000
 800065c:	ffc27fff 	.word	0xffc27fff

08000660 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <LL_APB1_GRP1_EnableClock+0x28>)
 800066a:	69d9      	ldr	r1, [r3, #28]
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <LL_APB1_GRP1_EnableClock+0x28>)
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	430a      	orrs	r2, r1
 8000672:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <LL_APB1_GRP1_EnableClock+0x28>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	4013      	ands	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b004      	add	sp, #16
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000

0800068c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <LL_APB1_GRP2_EnableClock+0x28>)
 8000696:	6999      	ldr	r1, [r3, #24]
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <LL_APB1_GRP2_EnableClock+0x28>)
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	430a      	orrs	r2, r1
 800069e:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <LL_APB1_GRP2_EnableClock+0x28>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	4013      	ands	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006aa:	68fb      	ldr	r3, [r7, #12]
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b004      	add	sp, #16
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021000 	.word	0x40021000

080006b8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <LL_FLASH_SetLatency+0x24>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2201      	movs	r2, #1
 80006c6:	4393      	bics	r3, r2
 80006c8:	0019      	movs	r1, r3
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <LL_FLASH_SetLatency+0x24>)
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	430a      	orrs	r2, r1
 80006d0:	601a      	str	r2, [r3, #0]
}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	40022000 	.word	0x40022000

080006e0 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <LL_FLASH_GetLatency+0x14>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2201      	movs	r2, #1
 80006ea:	4013      	ands	r3, r2
}
 80006ec:	0018      	movs	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	40022000 	.word	0x40022000

080006f8 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000700:	f3ef 8310 	mrs	r3, PRIMASK
 8000704:	60bb      	str	r3, [r7, #8]
  return(result);
 8000706:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	2301      	movs	r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f383 8810 	msr	PRIMASK, r3
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2210      	movs	r2, #16
 800071c:	431a      	orrs	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	f383 8810 	msr	PRIMASK, r3
}
 800072c:	46c0      	nop			; (mov r8, r8)
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b006      	add	sp, #24
 8000734:	bd80      	pop	{r7, pc}

08000736 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b086      	sub	sp, #24
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800073e:	f3ef 8310 	mrs	r3, PRIMASK
 8000742:	60bb      	str	r3, [r7, #8]
  return(result);
 8000744:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	2301      	movs	r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f383 8810 	msr	PRIMASK, r3
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2220      	movs	r2, #32
 800075a:	431a      	orrs	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	f383 8810 	msr	PRIMASK, r3
}
 800076a:	46c0      	nop			; (mov r8, r8)
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b006      	add	sp, #24
 8000772:	bd80      	pop	{r7, pc}

08000774 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800077c:	f3ef 8310 	mrs	r3, PRIMASK
 8000780:	60bb      	str	r3, [r7, #8]
  return(result);
 8000782:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	2301      	movs	r3, #1
 8000788:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f383 8810 	msr	PRIMASK, r3
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	2201      	movs	r2, #1
 8000798:	431a      	orrs	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	f383 8810 	msr	PRIMASK, r3
}
 80007a8:	46c0      	nop			; (mov r8, r8)
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b006      	add	sp, #24
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 80007b8:	2001      	movs	r0, #1
 80007ba:	f7ff ff67 	bl	800068c <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	055b      	lsls	r3, r3, #21
 80007c2:	0018      	movs	r0, r3
 80007c4:	f7ff ff4c 	bl	8000660 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 f81c 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007cc:	f7ff fe22 	bl	8000414 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007d0:	f000 fa51 	bl	8000c76 <MX_TIM2_Init>
  MX_TIM6_Init();
 80007d4:	f000 fade 	bl	8000d94 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80007d8:	f000 fd64 	bl	80012a4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007dc:	f000 fde8 	bl	80013b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LL_USART_EnableIT_RXNE(USART2);
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <main+0x4c>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff ffa7 	bl	8000736 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_IDLE(USART2);
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <main+0x4c>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff ff84 	bl	80006f8 <LL_USART_EnableIT_IDLE>
  LL_USART_EnableIT_ERROR(USART2);
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <main+0x4c>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff ffbe 	bl	8000774 <LL_USART_EnableIT_ERROR>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uart_idle();
 80007f8:	f000 fe5e 	bl	80014b8 <uart_idle>
 80007fc:	e7fc      	b.n	80007f8 <main+0x44>
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40004400 	.word	0x40004400

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff ff55 	bl	80006b8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	f7ff ff66 	bl	80006e0 <LL_FLASH_GetLatency>
 8000814:	0003      	movs	r3, r0
 8000816:	2b01      	cmp	r3, #1
 8000818:	d1fa      	bne.n	8000810 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800081a:	f7ff fe47 	bl	80004ac <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	f7ff fe52 	bl	80004c8 <LL_RCC_HSI_IsReady>
 8000824:	0003      	movs	r3, r0
 8000826:	2b01      	cmp	r3, #1
 8000828:	d1fa      	bne.n	8000820 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800082a:	2010      	movs	r0, #16
 800082c:	f7ff fe5c 	bl	80004e8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_12, LL_RCC_PREDIV_DIV_2);
 8000830:	23a0      	movs	r3, #160	; 0xa0
 8000832:	0399      	lsls	r1, r3, #14
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	2201      	movs	r2, #1
 800083a:	0018      	movs	r0, r3
 800083c:	f7ff feee 	bl	800061c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000840:	f7ff feca 	bl	80005d8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	f7ff fed5 	bl	80005f4 <LL_RCC_PLL_IsReady>
 800084a:	0003      	movs	r3, r0
 800084c:	2b01      	cmp	r3, #1
 800084e:	d1fa      	bne.n	8000846 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fe7d 	bl	8000550 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fe8e 	bl	8000578 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800085c:	2002      	movs	r0, #2
 800085e:	f7ff fe57 	bl	8000510 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	f7ff fe68 	bl	8000538 <LL_RCC_GetSysClkSource>
 8000868:	0003      	movs	r3, r0
 800086a:	2b08      	cmp	r3, #8
 800086c:	d1fa      	bne.n	8000864 <SystemClock_Config+0x60>
  {

  }
  LL_Init1msTick(48000000);
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <SystemClock_Config+0x90>)
 8000870:	0018      	movs	r0, r3
 8000872:	f001 ffbd 	bl	80027f0 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <SystemClock_Config+0x90>)
 8000878:	0018      	movs	r0, r3
 800087a:	f001 ffc9 	bl	8002810 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff fe90 	bl	80005a4 <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	055b      	lsls	r3, r3, #21
 8000888:	0018      	movs	r0, r3
 800088a:	f7ff fe8b 	bl	80005a4 <LL_RCC_SetUSARTClockSource>
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	02dc6c00 	.word	0x02dc6c00

08000898 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <LL_EXTI_IsActiveFlag_0_31+0x24>)
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	4013      	ands	r3, r2
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	425a      	negs	r2, r3
 80008ae:	4153      	adcs	r3, r2
 80008b0:	b2db      	uxtb	r3, r3
}
 80008b2:	0018      	movs	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b002      	add	sp, #8
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	40010400 	.word	0x40010400

080008c0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <LL_EXTI_ClearFlag_0_31+0x18>)
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	615a      	str	r2, [r3, #20]
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	40010400 	.word	0x40010400

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <NMI_Handler+0x4>

080008e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <HardFault_Handler+0x4>

080008e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 800090a:	2380      	movs	r3, #128	; 0x80
 800090c:	019b      	lsls	r3, r3, #6
 800090e:	0018      	movs	r0, r3
 8000910:	f7ff ffc2 	bl	8000898 <LL_EXTI_IsActiveFlag_0_31>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d004      	beq.n	8000922 <EXTI4_15_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	019b      	lsls	r3, r3, #6
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff ffcf 	bl	80008c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  uart_irq_rx_callback(USART2);
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <USART2_IRQHandler+0x14>)
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fe16 	bl	8001580 <uart_irq_rx_callback>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40004400 	.word	0x40004400

08000960 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <__NVIC_EnableIRQ>:
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	0002      	movs	r2, r0
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b7f      	cmp	r3, #127	; 0x7f
 800097e:	d809      	bhi.n	8000994 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	001a      	movs	r2, r3
 8000986:	231f      	movs	r3, #31
 8000988:	401a      	ands	r2, r3
 800098a:	4b04      	ldr	r3, [pc, #16]	; (800099c <__NVIC_EnableIRQ+0x30>)
 800098c:	2101      	movs	r1, #1
 800098e:	4091      	lsls	r1, r2
 8000990:	000a      	movs	r2, r1
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b002      	add	sp, #8
 800099a:	bd80      	pop	{r7, pc}
 800099c:	e000e100 	.word	0xe000e100

080009a0 <__NVIC_SetPriority>:
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	0002      	movs	r2, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b7f      	cmp	r3, #127	; 0x7f
 80009b4:	d828      	bhi.n	8000a08 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b6:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <__NVIC_SetPriority+0xd4>)
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	089b      	lsrs	r3, r3, #2
 80009c0:	33c0      	adds	r3, #192	; 0xc0
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	589b      	ldr	r3, [r3, r2]
 80009c6:	1dfa      	adds	r2, r7, #7
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	0011      	movs	r1, r2
 80009cc:	2203      	movs	r2, #3
 80009ce:	400a      	ands	r2, r1
 80009d0:	00d2      	lsls	r2, r2, #3
 80009d2:	21ff      	movs	r1, #255	; 0xff
 80009d4:	4091      	lsls	r1, r2
 80009d6:	000a      	movs	r2, r1
 80009d8:	43d2      	mvns	r2, r2
 80009da:	401a      	ands	r2, r3
 80009dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	019b      	lsls	r3, r3, #6
 80009e2:	22ff      	movs	r2, #255	; 0xff
 80009e4:	401a      	ands	r2, r3
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	0018      	movs	r0, r3
 80009ec:	2303      	movs	r3, #3
 80009ee:	4003      	ands	r3, r0
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f4:	481f      	ldr	r0, [pc, #124]	; (8000a74 <__NVIC_SetPriority+0xd4>)
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b25b      	sxtb	r3, r3
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	430a      	orrs	r2, r1
 8000a00:	33c0      	adds	r3, #192	; 0xc0
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	501a      	str	r2, [r3, r0]
}
 8000a06:	e031      	b.n	8000a6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <__NVIC_SetPriority+0xd8>)
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	0019      	movs	r1, r3
 8000a10:	230f      	movs	r3, #15
 8000a12:	400b      	ands	r3, r1
 8000a14:	3b08      	subs	r3, #8
 8000a16:	089b      	lsrs	r3, r3, #2
 8000a18:	3306      	adds	r3, #6
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	18d3      	adds	r3, r2, r3
 8000a1e:	3304      	adds	r3, #4
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	1dfa      	adds	r2, r7, #7
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	0011      	movs	r1, r2
 8000a28:	2203      	movs	r2, #3
 8000a2a:	400a      	ands	r2, r1
 8000a2c:	00d2      	lsls	r2, r2, #3
 8000a2e:	21ff      	movs	r1, #255	; 0xff
 8000a30:	4091      	lsls	r1, r2
 8000a32:	000a      	movs	r2, r1
 8000a34:	43d2      	mvns	r2, r2
 8000a36:	401a      	ands	r2, r3
 8000a38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	019b      	lsls	r3, r3, #6
 8000a3e:	22ff      	movs	r2, #255	; 0xff
 8000a40:	401a      	ands	r2, r3
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	0018      	movs	r0, r3
 8000a48:	2303      	movs	r3, #3
 8000a4a:	4003      	ands	r3, r0
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <__NVIC_SetPriority+0xd8>)
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	001c      	movs	r4, r3
 8000a58:	230f      	movs	r3, #15
 8000a5a:	4023      	ands	r3, r4
 8000a5c:	3b08      	subs	r3, #8
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	430a      	orrs	r2, r1
 8000a62:	3306      	adds	r3, #6
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	18c3      	adds	r3, r0, r3
 8000a68:	3304      	adds	r3, #4
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b003      	add	sp, #12
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <LL_AHB1_GRP1_EnableClock>:
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000a86:	6959      	ldr	r1, [r3, #20]
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	4013      	ands	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b004      	add	sp, #16
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <LL_APB1_GRP1_EnableClock>:
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ab2:	69d9      	ldr	r1, [r3, #28]
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <LL_APB1_GRP1_EnableClock+0x28>)
 8000abe:	69db      	ldr	r3, [r3, #28]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b004      	add	sp, #16
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	601a      	str	r2, [r3, #0]
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	4393      	bics	r3, r2
 8000b00:	001a      	movs	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b002      	add	sp, #8
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d01e      	beq.n	8000b5e <LL_TIM_OC_DisableFast+0x4e>
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d019      	beq.n	8000b5a <LL_TIM_OC_DisableFast+0x4a>
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	2b10      	cmp	r3, #16
 8000b2a:	d014      	beq.n	8000b56 <LL_TIM_OC_DisableFast+0x46>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b40      	cmp	r3, #64	; 0x40
 8000b30:	d00f      	beq.n	8000b52 <LL_TIM_OC_DisableFast+0x42>
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d008      	beq.n	8000b4e <LL_TIM_OC_DisableFast+0x3e>
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d101      	bne.n	8000b4a <LL_TIM_OC_DisableFast+0x3a>
 8000b46:	2305      	movs	r3, #5
 8000b48:	e00a      	b.n	8000b60 <LL_TIM_OC_DisableFast+0x50>
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	e008      	b.n	8000b60 <LL_TIM_OC_DisableFast+0x50>
 8000b4e:	2304      	movs	r3, #4
 8000b50:	e006      	b.n	8000b60 <LL_TIM_OC_DisableFast+0x50>
 8000b52:	2303      	movs	r3, #3
 8000b54:	e004      	b.n	8000b60 <LL_TIM_OC_DisableFast+0x50>
 8000b56:	2302      	movs	r3, #2
 8000b58:	e002      	b.n	8000b60 <LL_TIM_OC_DisableFast+0x50>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <LL_TIM_OC_DisableFast+0x50>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	200f      	movs	r0, #15
 8000b62:	183a      	adds	r2, r7, r0
 8000b64:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3318      	adds	r3, #24
 8000b6a:	0019      	movs	r1, r3
 8000b6c:	183b      	adds	r3, r7, r0
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <LL_TIM_OC_DisableFast+0x8c>)
 8000b72:	5cd3      	ldrb	r3, [r2, r3]
 8000b74:	18cb      	adds	r3, r1, r3
 8000b76:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	183a      	adds	r2, r7, r0
 8000b7e:	7812      	ldrb	r2, [r2, #0]
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <LL_TIM_OC_DisableFast+0x90>)
 8000b82:	5c8a      	ldrb	r2, [r1, r2]
 8000b84:	0011      	movs	r1, r2
 8000b86:	2204      	movs	r2, #4
 8000b88:	408a      	lsls	r2, r1
 8000b8a:	43d2      	mvns	r2, r2
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	601a      	str	r2, [r3, #0]

}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b004      	add	sp, #16
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	080028b4 	.word	0x080028b4
 8000ba0:	080028bc 	.word	0x080028bc

08000ba4 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d01e      	beq.n	8000bf2 <LL_TIM_OC_EnablePreload+0x4e>
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	d019      	beq.n	8000bee <LL_TIM_OC_EnablePreload+0x4a>
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	2b10      	cmp	r3, #16
 8000bbe:	d014      	beq.n	8000bea <LL_TIM_OC_EnablePreload+0x46>
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	2b40      	cmp	r3, #64	; 0x40
 8000bc4:	d00f      	beq.n	8000be6 <LL_TIM_OC_EnablePreload+0x42>
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d008      	beq.n	8000be2 <LL_TIM_OC_EnablePreload+0x3e>
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d101      	bne.n	8000bde <LL_TIM_OC_EnablePreload+0x3a>
 8000bda:	2305      	movs	r3, #5
 8000bdc:	e00a      	b.n	8000bf4 <LL_TIM_OC_EnablePreload+0x50>
 8000bde:	2306      	movs	r3, #6
 8000be0:	e008      	b.n	8000bf4 <LL_TIM_OC_EnablePreload+0x50>
 8000be2:	2304      	movs	r3, #4
 8000be4:	e006      	b.n	8000bf4 <LL_TIM_OC_EnablePreload+0x50>
 8000be6:	2303      	movs	r3, #3
 8000be8:	e004      	b.n	8000bf4 <LL_TIM_OC_EnablePreload+0x50>
 8000bea:	2302      	movs	r3, #2
 8000bec:	e002      	b.n	8000bf4 <LL_TIM_OC_EnablePreload+0x50>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e000      	b.n	8000bf4 <LL_TIM_OC_EnablePreload+0x50>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	200f      	movs	r0, #15
 8000bf6:	183a      	adds	r2, r7, r0
 8000bf8:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3318      	adds	r3, #24
 8000bfe:	0019      	movs	r1, r3
 8000c00:	183b      	adds	r3, r7, r0
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <LL_TIM_OC_EnablePreload+0x88>)
 8000c06:	5cd3      	ldrb	r3, [r2, r3]
 8000c08:	18cb      	adds	r3, r1, r3
 8000c0a:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	183b      	adds	r3, r7, r0
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4906      	ldr	r1, [pc, #24]	; (8000c30 <LL_TIM_OC_EnablePreload+0x8c>)
 8000c16:	5ccb      	ldrb	r3, [r1, r3]
 8000c18:	0019      	movs	r1, r3
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	601a      	str	r2, [r3, #0]
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b004      	add	sp, #16
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	080028b4 	.word	0x080028b4
 8000c30:	080028bc 	.word	0x080028bc

08000c34 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2270      	movs	r2, #112	; 0x70
 8000c44:	4393      	bics	r3, r2
 8000c46:	001a      	movs	r2, r3
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	605a      	str	r2, [r3, #4]
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	4393      	bics	r3, r2
 8000c68:	001a      	movs	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c76:	b5b0      	push	{r4, r5, r7, lr}
 8000c78:	b094      	sub	sp, #80	; 0x50
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000c7c:	253c      	movs	r5, #60	; 0x3c
 8000c7e:	197b      	adds	r3, r7, r5
 8000c80:	0018      	movs	r0, r3
 8000c82:	2314      	movs	r3, #20
 8000c84:	001a      	movs	r2, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	f001 fdf4 	bl	8002874 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000c8c:	241c      	movs	r4, #28
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	0018      	movs	r0, r3
 8000c92:	2320      	movs	r3, #32
 8000c94:	001a      	movs	r2, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	f001 fdec 	bl	8002874 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	2318      	movs	r3, #24
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	f001 fde5 	bl	8002874 <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fefc 	bl	8000aa8 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, 0);
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f7ff fe74 	bl	80009a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000cb8:	200f      	movs	r0, #15
 8000cba:	f7ff fe57 	bl	800096c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 48;
 8000cbe:	197b      	adds	r3, r7, r5
 8000cc0:	2230      	movs	r2, #48	; 0x30
 8000cc2:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000cc4:	197b      	adds	r3, r7, r5
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 1000;
 8000cca:	197b      	adds	r3, r7, r5
 8000ccc:	22fa      	movs	r2, #250	; 0xfa
 8000cce:	0092      	lsls	r2, r2, #2
 8000cd0:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000cd2:	197b      	adds	r3, r7, r5
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000cd8:	197a      	adds	r2, r7, r5
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	05db      	lsls	r3, r3, #23
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f001 f955 	bl	8001f90 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	05db      	lsls	r3, r3, #23
 8000cea:	0018      	movs	r0, r3
 8000cec:	f7ff fef2 	bl	8000ad4 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	05db      	lsls	r3, r3, #23
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff ff54 	bl	8000ba4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000cfc:	0021      	movs	r1, r4
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2260      	movs	r2, #96	; 0x60
 8000d02:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.CompareValue = 500;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	22fa      	movs	r2, #250	; 0xfa
 8000d14:	0052      	lsls	r2, r2, #1
 8000d16:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000d1e:	187a      	adds	r2, r7, r1
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	05db      	lsls	r3, r3, #23
 8000d24:	2101      	movs	r1, #1
 8000d26:	0018      	movs	r0, r3
 8000d28:	f001 f9b4 	bl	8002094 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	2101      	movs	r1, #1
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff feec 	bl	8000b10 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	05db      	lsls	r3, r3, #23
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f7ff ff78 	bl	8000c34 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	05db      	lsls	r3, r3, #23
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f7ff ff85 	bl	8000c58 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	029b      	lsls	r3, r3, #10
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff fe92 	bl	8000a7c <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2220      	movs	r2, #32
 8000d5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2202      	movs	r2, #2
 8000d62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2202      	movs	r2, #2
 8000d7a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	1d3a      	adds	r2, r7, #4
 8000d7e:	2390      	movs	r3, #144	; 0x90
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	0011      	movs	r1, r2
 8000d84:	0018      	movs	r0, r3
 8000d86:	f000 fe45 	bl	8001a14 <LL_GPIO_Init>

}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b014      	add	sp, #80	; 0x50
 8000d90:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d94 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	2314      	movs	r3, #20
 8000da0:	001a      	movs	r2, r3
 8000da2:	2100      	movs	r1, #0
 8000da4:	f001 fd66 	bl	8002874 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8000da8:	2010      	movs	r0, #16
 8000daa:	f7ff fe7d 	bl	8000aa8 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, 0);
 8000dae:	2100      	movs	r1, #0
 8000db0:	2011      	movs	r0, #17
 8000db2:	f7ff fdf5 	bl	80009a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000db6:	2011      	movs	r0, #17
 8000db8:	f7ff fdd8 	bl	800096c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4a0c      	ldr	r2, [pc, #48]	; (8000dfc <MX_TIM6_Init+0x68>)
 8000dcc:	609a      	str	r2, [r3, #8]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <MX_TIM6_Init+0x6c>)
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	0010      	movs	r0, r2
 8000dd6:	f001 f8db 	bl	8001f90 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_TIM6_Init+0x6c>)
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff fe87 	bl	8000af0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <MX_TIM6_Init+0x6c>)
 8000de4:	2100      	movs	r1, #0
 8000de6:	0018      	movs	r0, r3
 8000de8:	f7ff ff24 	bl	8000c34 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <MX_TIM6_Init+0x6c>)
 8000dee:	0018      	movs	r0, r3
 8000df0:	f7ff ff32 	bl	8000c58 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b006      	add	sp, #24
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	0000ffff 	.word	0x0000ffff
 8000e00:	40001000 	.word	0x40001000

08000e04 <__NVIC_EnableIRQ>:
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	1dfb      	adds	r3, r7, #7
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b7f      	cmp	r3, #127	; 0x7f
 8000e16:	d809      	bhi.n	8000e2c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	231f      	movs	r3, #31
 8000e20:	401a      	ands	r2, r3
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_EnableIRQ+0x30>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	4091      	lsls	r1, r2
 8000e28:	000a      	movs	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b002      	add	sp, #8
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <__NVIC_SetPriority>:
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	0002      	movs	r2, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e4c:	d828      	bhi.n	8000ea0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e4e:	4a2f      	ldr	r2, [pc, #188]	; (8000f0c <__NVIC_SetPriority+0xd4>)
 8000e50:	1dfb      	adds	r3, r7, #7
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b25b      	sxtb	r3, r3
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	33c0      	adds	r3, #192	; 0xc0
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	589b      	ldr	r3, [r3, r2]
 8000e5e:	1dfa      	adds	r2, r7, #7
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	0011      	movs	r1, r2
 8000e64:	2203      	movs	r2, #3
 8000e66:	400a      	ands	r2, r1
 8000e68:	00d2      	lsls	r2, r2, #3
 8000e6a:	21ff      	movs	r1, #255	; 0xff
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	43d2      	mvns	r2, r2
 8000e72:	401a      	ands	r2, r3
 8000e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	019b      	lsls	r3, r3, #6
 8000e7a:	22ff      	movs	r2, #255	; 0xff
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	0018      	movs	r0, r3
 8000e84:	2303      	movs	r3, #3
 8000e86:	4003      	ands	r3, r0
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8c:	481f      	ldr	r0, [pc, #124]	; (8000f0c <__NVIC_SetPriority+0xd4>)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	430a      	orrs	r2, r1
 8000e98:	33c0      	adds	r3, #192	; 0xc0
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	501a      	str	r2, [r3, r0]
}
 8000e9e:	e031      	b.n	8000f04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <__NVIC_SetPriority+0xd8>)
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	0019      	movs	r1, r3
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	400b      	ands	r3, r1
 8000eac:	3b08      	subs	r3, #8
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	3306      	adds	r3, #6
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	18d3      	adds	r3, r2, r3
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	1dfa      	adds	r2, r7, #7
 8000ebc:	7812      	ldrb	r2, [r2, #0]
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	400a      	ands	r2, r1
 8000ec4:	00d2      	lsls	r2, r2, #3
 8000ec6:	21ff      	movs	r1, #255	; 0xff
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	000a      	movs	r2, r1
 8000ecc:	43d2      	mvns	r2, r2
 8000ece:	401a      	ands	r2, r3
 8000ed0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	019b      	lsls	r3, r3, #6
 8000ed6:	22ff      	movs	r2, #255	; 0xff
 8000ed8:	401a      	ands	r2, r3
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	0018      	movs	r0, r3
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	4003      	ands	r3, r0
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <__NVIC_SetPriority+0xd8>)
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	001c      	movs	r4, r3
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	4023      	ands	r3, r4
 8000ef4:	3b08      	subs	r3, #8
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	3306      	adds	r3, #6
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	18c3      	adds	r3, r0, r3
 8000f00:	3304      	adds	r3, #4
 8000f02:	601a      	str	r2, [r3, #0]
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b003      	add	sp, #12
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <LL_AHB1_GRP1_EnableClock>:
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <LL_AHB1_GRP1_EnableClock+0x28>)
 8000f1e:	6959      	ldr	r1, [r3, #20]
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <LL_AHB1_GRP1_EnableClock+0x28>)
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <LL_AHB1_GRP1_EnableClock+0x28>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b004      	add	sp, #16
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000

08000f40 <LL_APB1_GRP1_EnableClock>:
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <LL_APB1_GRP1_EnableClock+0x28>)
 8000f4a:	69d9      	ldr	r1, [r3, #28]
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <LL_APB1_GRP1_EnableClock+0x28>)
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <LL_APB1_GRP1_EnableClock+0x28>)
 8000f56:	69db      	ldr	r3, [r3, #28]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40021000 	.word	0x40021000

08000f6c <LL_APB1_GRP2_EnableClock>:
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <LL_APB1_GRP2_EnableClock+0x28>)
 8000f76:	6999      	ldr	r1, [r3, #24]
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <LL_APB1_GRP2_EnableClock+0x28>)
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <LL_APB1_GRP2_EnableClock+0x28>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	4013      	ands	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b004      	add	sp, #16
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40021000 	.word	0x40021000

08000f98 <LL_USART_Enable>:
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	601a      	str	r2, [r3, #0]
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <LL_USART_Disable>:
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4393      	bics	r3, r2
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	601a      	str	r2, [r3, #0]
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <LL_USART_ConfigAsyncMode>:
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <LL_USART_ConfigAsyncMode+0x2c>)
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	222a      	movs	r2, #42	; 0x2a
 8000fee:	4393      	bics	r3, r2
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b002      	add	sp, #8
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	ffffb7ff 	.word	0xffffb7ff

08001004 <LL_USART_IsActiveFlag_FE>:
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	2202      	movs	r2, #2
 8001012:	4013      	ands	r3, r2
 8001014:	2b02      	cmp	r3, #2
 8001016:	d101      	bne.n	800101c <LL_USART_IsActiveFlag_FE+0x18>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <LL_USART_IsActiveFlag_FE+0x1a>
 800101c:	2300      	movs	r3, #0
}
 800101e:	0018      	movs	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}

08001026 <LL_USART_IsActiveFlag_NE>:
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	2204      	movs	r2, #4
 8001034:	4013      	ands	r3, r2
 8001036:	2b04      	cmp	r3, #4
 8001038:	d101      	bne.n	800103e <LL_USART_IsActiveFlag_NE+0x18>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <LL_USART_IsActiveFlag_NE+0x1a>
 800103e:	2300      	movs	r3, #0
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	b002      	add	sp, #8
 8001046:	bd80      	pop	{r7, pc}

08001048 <LL_USART_IsActiveFlag_ORE>:
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	2208      	movs	r2, #8
 8001056:	4013      	ands	r3, r2
 8001058:	2b08      	cmp	r3, #8
 800105a:	d101      	bne.n	8001060 <LL_USART_IsActiveFlag_ORE+0x18>
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <LL_USART_IsActiveFlag_ORE+0x1a>
 8001060:	2300      	movs	r3, #0
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	b002      	add	sp, #8
 8001068:	bd80      	pop	{r7, pc}

0800106a <LL_USART_IsActiveFlag_IDLE>:
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	2210      	movs	r2, #16
 8001078:	4013      	ands	r3, r2
 800107a:	2b10      	cmp	r3, #16
 800107c:	d101      	bne.n	8001082 <LL_USART_IsActiveFlag_IDLE+0x18>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8001082:	2300      	movs	r3, #0
}
 8001084:	0018      	movs	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}

0800108c <LL_USART_IsActiveFlag_RXNE>:
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	2220      	movs	r2, #32
 800109a:	4013      	ands	r3, r2
 800109c:	2b20      	cmp	r3, #32
 800109e:	d101      	bne.n	80010a4 <LL_USART_IsActiveFlag_RXNE+0x18>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <LL_USART_IsActiveFlag_RXNE+0x1a>
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b002      	add	sp, #8
 80010ac:	bd80      	pop	{r7, pc}

080010ae <LL_USART_IsActiveFlag_TXE>:
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	4013      	ands	r3, r2
 80010be:	2b80      	cmp	r3, #128	; 0x80
 80010c0:	d101      	bne.n	80010c6 <LL_USART_IsActiveFlag_TXE+0x18>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <LL_USART_IsActiveFlag_TXE+0x1a>
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	0018      	movs	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b002      	add	sp, #8
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <LL_USART_ClearFlag_FE>:
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2202      	movs	r2, #2
 80010dc:	621a      	str	r2, [r3, #32]
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b002      	add	sp, #8
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <LL_USART_ClearFlag_NE>:
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2204      	movs	r2, #4
 80010f2:	621a      	str	r2, [r3, #32]
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b002      	add	sp, #8
 80010fa:	bd80      	pop	{r7, pc}

080010fc <LL_USART_ClearFlag_ORE>:
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2208      	movs	r2, #8
 8001108:	621a      	str	r2, [r3, #32]
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}

08001112 <LL_USART_ClearFlag_IDLE>:
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2210      	movs	r2, #16
 800111e:	621a      	str	r2, [r3, #32]
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b002      	add	sp, #8
 8001126:	bd80      	pop	{r7, pc}

08001128 <LL_USART_EnableIT_RXNE>:
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001130:	f3ef 8310 	mrs	r3, PRIMASK
 8001134:	60bb      	str	r3, [r7, #8]
  return(result);
 8001136:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	2301      	movs	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f383 8810 	msr	PRIMASK, r3
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2220      	movs	r2, #32
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	f383 8810 	msr	PRIMASK, r3
}
 800115c:	46c0      	nop			; (mov r8, r8)
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b006      	add	sp, #24
 8001164:	bd80      	pop	{r7, pc}

08001166 <LL_USART_DisableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800116e:	f3ef 8310 	mrs	r3, PRIMASK
 8001172:	60bb      	str	r3, [r7, #8]
  return(result);
 8001174:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	2301      	movs	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f383 8810 	msr	PRIMASK, r3
}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2210      	movs	r2, #16
 800118a:	4393      	bics	r3, r2
 800118c:	001a      	movs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	f383 8810 	msr	PRIMASK, r3
}
 800119c:	46c0      	nop			; (mov r8, r8)
}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b006      	add	sp, #24
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011ae:	f3ef 8310 	mrs	r3, PRIMASK
 80011b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80011b4:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	2301      	movs	r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f383 8810 	msr	PRIMASK, r3
}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2220      	movs	r2, #32
 80011ca:	4393      	bics	r3, r2
 80011cc:	001a      	movs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	f383 8810 	msr	PRIMASK, r3
}
 80011dc:	46c0      	nop			; (mov r8, r8)
}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b006      	add	sp, #24
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <LL_USART_DisableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011ee:	f3ef 8310 	mrs	r3, PRIMASK
 80011f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80011f4:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	2301      	movs	r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f383 8810 	msr	PRIMASK, r3
}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2201      	movs	r2, #1
 800120a:	4393      	bics	r3, r2
 800120c:	001a      	movs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	f383 8810 	msr	PRIMASK, r3
}
 800121c:	46c0      	nop			; (mov r8, r8)
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b006      	add	sp, #24
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001230:	f3ef 8310 	mrs	r3, PRIMASK
 8001234:	60bb      	str	r3, [r7, #8]
  return(result);
 8001236:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	2301      	movs	r3, #1
 800123c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f383 8810 	msr	PRIMASK, r3
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	4a07      	ldr	r2, [pc, #28]	; (8001268 <LL_USART_DisableIT_CTS+0x40>)
 800124c:	401a      	ands	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	f383 8810 	msr	PRIMASK, r3
}
 800125c:	46c0      	nop			; (mov r8, r8)
}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	46bd      	mov	sp, r7
 8001262:	b006      	add	sp, #24
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	fffffbff 	.word	0xfffffbff

0800126c <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001278:	b29b      	uxth	r3, r3
 800127a:	b2db      	uxtb	r3, r3
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}

08001284 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	000a      	movs	r2, r1
 800128e:	1cfb      	adds	r3, r7, #3
 8001290:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 8001292:	1cfb      	adds	r3, r7, #3
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b29a      	uxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b08f      	sub	sp, #60	; 0x3c
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80012aa:	241c      	movs	r4, #28
 80012ac:	193b      	adds	r3, r7, r4
 80012ae:	0018      	movs	r0, r3
 80012b0:	231c      	movs	r3, #28
 80012b2:	001a      	movs	r2, r3
 80012b4:	2100      	movs	r1, #0
 80012b6:	f001 fadd 	bl	8002874 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	0018      	movs	r0, r3
 80012be:	2318      	movs	r3, #24
 80012c0:	001a      	movs	r2, r3
 80012c2:	2100      	movs	r1, #0
 80012c4:	f001 fad6 	bl	8002874 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	01db      	lsls	r3, r3, #7
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7ff fe4d 	bl	8000f6c <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	029b      	lsls	r3, r3, #10
 80012d6:	0018      	movs	r0, r3
 80012d8:	f7ff fe1c 	bl	8000f14 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2202      	movs	r2, #2
 80012e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2203      	movs	r2, #3
 80012ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2201      	movs	r2, #1
 8001300:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	1d3a      	adds	r2, r7, #4
 8001304:	2390      	movs	r3, #144	; 0x90
 8001306:	05db      	lsls	r3, r3, #23
 8001308:	0011      	movs	r1, r2
 800130a:	0018      	movs	r0, r3
 800130c:	f000 fb82 	bl	8001a14 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2280      	movs	r2, #128	; 0x80
 8001314:	00d2      	lsls	r2, r2, #3
 8001316:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2202      	movs	r2, #2
 800131c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2203      	movs	r2, #3
 8001322:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2201      	movs	r2, #1
 8001334:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	1d3a      	adds	r2, r7, #4
 8001338:	2390      	movs	r3, #144	; 0x90
 800133a:	05db      	lsls	r3, r3, #23
 800133c:	0011      	movs	r1, r2
 800133e:	0018      	movs	r0, r3
 8001340:	f000 fb68 	bl	8001a14 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 8001344:	2100      	movs	r1, #0
 8001346:	201b      	movs	r0, #27
 8001348:	f7ff fd76 	bl	8000e38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800134c:	201b      	movs	r0, #27
 800134e:	f7ff fd59 	bl	8000e04 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001352:	193b      	adds	r3, r7, r4
 8001354:	22e1      	movs	r2, #225	; 0xe1
 8001356:	0252      	lsls	r2, r2, #9
 8001358:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800135a:	0021      	movs	r1, r4
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800136e:	187b      	adds	r3, r7, r1
 8001370:	220c      	movs	r2, #12
 8001372:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800137a:	187b      	adds	r3, r7, r1
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 8001380:	187b      	adds	r3, r7, r1
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <MX_USART1_UART_Init+0x108>)
 8001384:	0019      	movs	r1, r3
 8001386:	0010      	movs	r0, r2
 8001388:	f001 f95c 	bl	8002644 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MX_USART1_UART_Init+0x108>)
 800138e:	0018      	movs	r0, r3
 8001390:	f7ff ff4a 	bl	8001228 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <MX_USART1_UART_Init+0x108>)
 8001396:	0018      	movs	r0, r3
 8001398:	f7ff fe1c 	bl	8000fd4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <MX_USART1_UART_Init+0x108>)
 800139e:	0018      	movs	r0, r3
 80013a0:	f7ff fdfa 	bl	8000f98 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b00f      	add	sp, #60	; 0x3c
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	40013800 	.word	0x40013800

080013b0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b08f      	sub	sp, #60	; 0x3c
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80013b6:	241c      	movs	r4, #28
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	0018      	movs	r0, r3
 80013bc:	231c      	movs	r3, #28
 80013be:	001a      	movs	r2, r3
 80013c0:	2100      	movs	r1, #0
 80013c2:	f001 fa57 	bl	8002874 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	0018      	movs	r0, r3
 80013ca:	2318      	movs	r3, #24
 80013cc:	001a      	movs	r2, r3
 80013ce:	2100      	movs	r1, #0
 80013d0:	f001 fa50 	bl	8002874 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	029b      	lsls	r3, r3, #10
 80013d8:	0018      	movs	r0, r3
 80013da:	f7ff fdb1 	bl	8000f40 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013de:	2380      	movs	r3, #128	; 0x80
 80013e0:	029b      	lsls	r3, r3, #10
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7ff fd96 	bl	8000f14 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2204      	movs	r2, #4
 80013ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2202      	movs	r2, #2
 80013f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2201      	movs	r2, #1
 800140a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	1d3a      	adds	r2, r7, #4
 800140e:	2390      	movs	r3, #144	; 0x90
 8001410:	05db      	lsls	r3, r3, #23
 8001412:	0011      	movs	r1, r2
 8001414:	0018      	movs	r0, r3
 8001416:	f000 fafd 	bl	8001a14 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2208      	movs	r2, #8
 800141e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2202      	movs	r2, #2
 8001424:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2201      	movs	r2, #1
 800143c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	1d3a      	adds	r2, r7, #4
 8001440:	2390      	movs	r3, #144	; 0x90
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f000 fae4 	bl	8001a14 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 800144c:	2100      	movs	r1, #0
 800144e:	201c      	movs	r0, #28
 8001450:	f7ff fcf2 	bl	8000e38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001454:	201c      	movs	r0, #28
 8001456:	f7ff fcd5 	bl	8000e04 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800145a:	193b      	adds	r3, r7, r4
 800145c:	22e1      	movs	r2, #225	; 0xe1
 800145e:	0252      	lsls	r2, r2, #9
 8001460:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001462:	0021      	movs	r1, r4
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001476:	187b      	adds	r3, r7, r1
 8001478:	220c      	movs	r2, #12
 800147a:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800147c:	187b      	adds	r3, r7, r1
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001482:	187b      	adds	r3, r7, r1
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8001488:	187b      	adds	r3, r7, r1
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <MX_USART2_UART_Init+0x104>)
 800148c:	0019      	movs	r1, r3
 800148e:	0010      	movs	r0, r2
 8001490:	f001 f8d8 	bl	8002644 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <MX_USART2_UART_Init+0x104>)
 8001496:	0018      	movs	r0, r3
 8001498:	f7ff fec6 	bl	8001228 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <MX_USART2_UART_Init+0x104>)
 800149e:	0018      	movs	r0, r3
 80014a0:	f7ff fd98 	bl	8000fd4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <MX_USART2_UART_Init+0x104>)
 80014a6:	0018      	movs	r0, r3
 80014a8:	f7ff fd76 	bl	8000f98 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b00f      	add	sp, #60	; 0x3c
 80014b2:	bd90      	pop	{r4, r7, pc}
 80014b4:	40004400 	.word	0x40004400

080014b8 <uart_idle>:

/* USER CODE BEGIN 1 */
void uart_idle(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	if (uart2_idle)
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <uart_idle+0x64>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d026      	beq.n	8001514 <uart_idle+0x5c>
	{
		LL_USART_DisableIT_RXNE(USART2);
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <uart_idle+0x68>)
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff fe6c 	bl	80011a6 <LL_USART_DisableIT_RXNE>

		while (uart2_rx_idx != uart2_read_idx)
 80014ce:	e014      	b.n	80014fa <uart_idle+0x42>
    {
      while(!LL_USART_IsActiveFlag_TXE(USART2));
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <uart_idle+0x68>)
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff fdea 	bl	80010ae <LL_USART_IsActiveFlag_TXE>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d0f9      	beq.n	80014d2 <uart_idle+0x1a>
      LL_USART_TransmitData8(USART2, uart2_rx_buf[uart2_read_idx++ & (UART_RX_BUF_SIZE-1)]);
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <uart_idle+0x6c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	1c59      	adds	r1, r3, #1
 80014e4:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <uart_idle+0x6c>)
 80014e6:	6011      	str	r1, [r2, #0]
 80014e8:	22ff      	movs	r2, #255	; 0xff
 80014ea:	4013      	ands	r3, r2
 80014ec:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <uart_idle+0x70>)
 80014ee:	5cd3      	ldrb	r3, [r2, r3]
 80014f0:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <uart_idle+0x68>)
 80014f2:	0019      	movs	r1, r3
 80014f4:	0010      	movs	r0, r2
 80014f6:	f7ff fec5 	bl	8001284 <LL_USART_TransmitData8>
		while (uart2_rx_idx != uart2_read_idx)
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <uart_idle+0x74>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <uart_idle+0x6c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d1e4      	bne.n	80014d0 <uart_idle+0x18>
    }

    LL_USART_EnableIT_RXNE(USART2);
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <uart_idle+0x68>)
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff fe0d 	bl	8001128 <LL_USART_EnableIT_RXNE>

		uart2_idle = 0;
 800150e:	4b03      	ldr	r3, [pc, #12]	; (800151c <uart_idle+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
	}
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	20000020 	.word	0x20000020
 8001520:	40004400 	.word	0x40004400
 8001524:	20000128 	.word	0x20000128
 8001528:	20000024 	.word	0x20000024
 800152c:	20000124 	.word	0x20000124

08001530 <uart_error_callback>:

void uart_error_callback(USART_TypeDef *USARTx)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  LL_USART_DisableIT_RXNE(USARTx);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	0018      	movs	r0, r3
 800153c:	f7ff fe33 	bl	80011a6 <LL_USART_DisableIT_RXNE>
  LL_USART_DisableIT_IDLE(USARTx);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	0018      	movs	r0, r3
 8001544:	f7ff fe0f 	bl	8001166 <LL_USART_DisableIT_IDLE>
  LL_USART_DisableIT_ERROR(USARTx);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff fe4b 	bl	80011e6 <LL_USART_DisableIT_ERROR>

  // LL_USART_ClearFlag_RXNE(USARTx);
  LL_USART_ClearFlag_IDLE(USARTx);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	0018      	movs	r0, r3
 8001554:	f7ff fddd 	bl	8001112 <LL_USART_ClearFlag_IDLE>
  LL_USART_ClearFlag_FE(USARTx);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	0018      	movs	r0, r3
 800155c:	f7ff fdb8 	bl	80010d0 <LL_USART_ClearFlag_FE>
  LL_USART_ClearFlag_ORE(USARTx);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	0018      	movs	r0, r3
 8001564:	f7ff fdca 	bl	80010fc <LL_USART_ClearFlag_ORE>
  LL_USART_ClearFlag_NE(USARTx);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	0018      	movs	r0, r3
 800156c:	f7ff fdbb 	bl	80010e6 <LL_USART_ClearFlag_NE>

  LL_USART_Disable(USARTx);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	0018      	movs	r0, r3
 8001574:	f7ff fd1e 	bl	8000fb4 <LL_USART_Disable>

  //add your error handling here
}
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	b002      	add	sp, #8
 800157e:	bd80      	pop	{r7, pc}

08001580 <uart_irq_rx_callback>:

void uart_irq_rx_callback(USART_TypeDef *USARTx)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if (USARTx == USART2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a24      	ldr	r2, [pc, #144]	; (800161c <uart_irq_rx_callback+0x9c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d122      	bne.n	80015d6 <uart_irq_rx_callback+0x56>
  {
    //read data register not exmpty
    if(LL_USART_IsActiveFlag_RXNE(USART2))
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <uart_irq_rx_callback+0x9c>)
 8001592:	0018      	movs	r0, r3
 8001594:	f7ff fd7a 	bl	800108c <LL_USART_IsActiveFlag_RXNE>
 8001598:	1e03      	subs	r3, r0, #0
 800159a:	d00f      	beq.n	80015bc <uart_irq_rx_callback+0x3c>
    {
      uart2_rx_buf[uart2_rx_idx++ & (UART_RX_BUF_SIZE-1)] = LL_USART_ReceiveData8(USART2);
 800159c:	4b20      	ldr	r3, [pc, #128]	; (8001620 <uart_irq_rx_callback+0xa0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	1c59      	adds	r1, r3, #1
 80015a2:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <uart_irq_rx_callback+0xa0>)
 80015a4:	6011      	str	r1, [r2, #0]
 80015a6:	22ff      	movs	r2, #255	; 0xff
 80015a8:	4013      	ands	r3, r2
 80015aa:	001c      	movs	r4, r3
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <uart_irq_rx_callback+0x9c>)
 80015ae:	0018      	movs	r0, r3
 80015b0:	f7ff fe5c 	bl	800126c <LL_USART_ReceiveData8>
 80015b4:	0003      	movs	r3, r0
 80015b6:	001a      	movs	r2, r3
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <uart_irq_rx_callback+0xa4>)
 80015ba:	551a      	strb	r2, [r3, r4]
      // LL_USART_ClearFlag_RXNE(USART2);
    }

    //idle
    if(LL_USART_IsActiveFlag_IDLE(USART2))
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <uart_irq_rx_callback+0x9c>)
 80015be:	0018      	movs	r0, r3
 80015c0:	f7ff fd53 	bl	800106a <LL_USART_IsActiveFlag_IDLE>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d006      	beq.n	80015d6 <uart_irq_rx_callback+0x56>
    {
      uart2_idle = 1;
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <uart_irq_rx_callback+0xa8>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
      LL_USART_ClearFlag_IDLE(USART2);
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <uart_irq_rx_callback+0x9c>)
 80015d0:	0018      	movs	r0, r3
 80015d2:	f7ff fd9e 	bl	8001112 <LL_USART_ClearFlag_IDLE>
    }
  }


  // frame error
  if(LL_USART_IsActiveFlag_FE(USARTx))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff fd13 	bl	8001004 <LL_USART_IsActiveFlag_FE>
 80015de:	1e03      	subs	r3, r0, #0
 80015e0:	d003      	beq.n	80015ea <uart_irq_rx_callback+0x6a>
  {
    uart_error_callback(USARTx);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff ffa3 	bl	8001530 <uart_error_callback>
  }

  // overrun error
  if(LL_USART_IsActiveFlag_ORE(USARTx))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7ff fd2b 	bl	8001048 <LL_USART_IsActiveFlag_ORE>
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	d003      	beq.n	80015fe <uart_irq_rx_callback+0x7e>
  {
    uart_error_callback(USARTx);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff ff99 	bl	8001530 <uart_error_callback>
  }

  // noise error
  if(LL_USART_IsActiveFlag_NE(USARTx))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	0018      	movs	r0, r3
 8001602:	f7ff fd10 	bl	8001026 <LL_USART_IsActiveFlag_NE>
 8001606:	1e03      	subs	r3, r0, #0
 8001608:	d003      	beq.n	8001612 <uart_irq_rx_callback+0x92>
  {
    uart_error_callback(USARTx);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	0018      	movs	r0, r3
 800160e:	f7ff ff8f 	bl	8001530 <uart_error_callback>
  }
}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b003      	add	sp, #12
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	40004400 	.word	0x40004400
 8001620:	20000124 	.word	0x20000124
 8001624:	20000024 	.word	0x20000024
 8001628:	20000020 	.word	0x20000020

0800162c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800162e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001630:	f7ff f996 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001634:	480c      	ldr	r0, [pc, #48]	; (8001668 <LoopForever+0x6>)
  ldr r1, =_edata
 8001636:	490d      	ldr	r1, [pc, #52]	; (800166c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <LoopForever+0xe>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800164c:	4c0a      	ldr	r4, [pc, #40]	; (8001678 <LoopForever+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800165a:	f001 f8e7 	bl	800282c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800165e:	f7ff f8a9 	bl	80007b4 <main>

08001662 <LoopForever>:

LoopForever:
    b LoopForever
 8001662:	e7fe      	b.n	8001662 <LoopForever>
  ldr   r0, =_estack
 8001664:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001670:	080028cc 	.word	0x080028cc
  ldr r2, =_sbss
 8001674:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001678:	2000012c 	.word	0x2000012c

0800167c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC1_COMP_IRQHandler>
	...

08001680 <LL_EXTI_EnableIT_0_31>:
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <LL_EXTI_EnableIT_0_31+0x1c>)
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <LL_EXTI_EnableIT_0_31+0x1c>)
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]
}
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b002      	add	sp, #8
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40010400 	.word	0x40010400

080016a0 <LL_EXTI_DisableIT_0_31>:
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <LL_EXTI_DisableIT_0_31+0x20>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <LL_EXTI_DisableIT_0_31+0x20>)
 80016b2:	400a      	ands	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]
}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b002      	add	sp, #8
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	40010400 	.word	0x40010400

080016c4 <LL_EXTI_EnableEvent_0_31>:
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <LL_EXTI_EnableEvent_0_31+0x1c>)
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <LL_EXTI_EnableEvent_0_31+0x1c>)
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]
}
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b002      	add	sp, #8
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40010400 	.word	0x40010400

080016e4 <LL_EXTI_DisableEvent_0_31>:
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <LL_EXTI_DisableEvent_0_31+0x20>)
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <LL_EXTI_DisableEvent_0_31+0x20>)
 80016f6:	400a      	ands	r2, r1
 80016f8:	605a      	str	r2, [r3, #4]
}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b002      	add	sp, #8
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	40010400 	.word	0x40010400

08001708 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001712:	6899      	ldr	r1, [r3, #8]
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	430a      	orrs	r2, r1
 800171a:	609a      	str	r2, [r3, #8]
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40010400 	.word	0x40010400

08001728 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	43d9      	mvns	r1, r3
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800173a:	400a      	ands	r2, r1
 800173c:	609a      	str	r2, [r3, #8]
}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b002      	add	sp, #8
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	40010400 	.word	0x40010400

0800174c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001756:	68d9      	ldr	r1, [r3, #12]
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	430a      	orrs	r2, r1
 800175e:	60da      	str	r2, [r3, #12]
}
 8001760:	46c0      	nop			; (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	b002      	add	sp, #8
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40010400 	.word	0x40010400

0800176c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	43d9      	mvns	r1, r3
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800177e:	400a      	ands	r2, r1
 8001780:	60da      	str	r2, [r3, #12]
}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	46bd      	mov	sp, r7
 8001786:	b002      	add	sp, #8
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	40010400 	.word	0x40010400

08001790 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001798:	230f      	movs	r3, #15
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	791b      	ldrb	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d100      	bne.n	80017aa <LL_EXTI_Init+0x1a>
 80017a8:	e068      	b.n	800187c <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d100      	bne.n	80017b4 <LL_EXTI_Init+0x24>
 80017b2:	e06e      	b.n	8001892 <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	795b      	ldrb	r3, [r3, #5]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d01b      	beq.n	80017f4 <LL_EXTI_Init+0x64>
 80017bc:	dc25      	bgt.n	800180a <LL_EXTI_Init+0x7a>
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <LL_EXTI_Init+0x38>
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d00b      	beq.n	80017de <LL_EXTI_Init+0x4e>
 80017c6:	e020      	b.n	800180a <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff ff89 	bl	80016e4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0018      	movs	r0, r3
 80017d8:	f7ff ff52 	bl	8001680 <LL_EXTI_EnableIT_0_31>
          break;
 80017dc:	e01a      	b.n	8001814 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	0018      	movs	r0, r3
 80017e4:	f7ff ff5c 	bl	80016a0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7ff ff69 	bl	80016c4 <LL_EXTI_EnableEvent_0_31>
          break;
 80017f2:	e00f      	b.n	8001814 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff ff41 	bl	8001680 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	0018      	movs	r0, r3
 8001804:	f7ff ff5e 	bl	80016c4 <LL_EXTI_EnableEvent_0_31>
          break;
 8001808:	e004      	b.n	8001814 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 800180a:	230f      	movs	r3, #15
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
          break;
 8001812:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	799b      	ldrb	r3, [r3, #6]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d03a      	beq.n	8001892 <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	799b      	ldrb	r3, [r3, #6]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d01b      	beq.n	800185c <LL_EXTI_Init+0xcc>
 8001824:	dc25      	bgt.n	8001872 <LL_EXTI_Init+0xe2>
 8001826:	2b01      	cmp	r3, #1
 8001828:	d002      	beq.n	8001830 <LL_EXTI_Init+0xa0>
 800182a:	2b02      	cmp	r3, #2
 800182c:	d00b      	beq.n	8001846 <LL_EXTI_Init+0xb6>
 800182e:	e020      	b.n	8001872 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0018      	movs	r0, r3
 8001836:	f7ff ff99 	bl	800176c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	0018      	movs	r0, r3
 8001840:	f7ff ff62 	bl	8001708 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001844:	e026      	b.n	8001894 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	0018      	movs	r0, r3
 800184c:	f7ff ff6c 	bl	8001728 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0018      	movs	r0, r3
 8001856:	f7ff ff79 	bl	800174c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800185a:	e01b      	b.n	8001894 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0018      	movs	r0, r3
 8001862:	f7ff ff51 	bl	8001708 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	0018      	movs	r0, r3
 800186c:	f7ff ff6e 	bl	800174c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001870:	e010      	b.n	8001894 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8001872:	230f      	movs	r3, #15
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
            break;
 800187a:	e00b      	b.n	8001894 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff ff0d 	bl	80016a0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	0018      	movs	r0, r3
 800188c:	f7ff ff2a 	bl	80016e4 <LL_EXTI_DisableEvent_0_31>
 8001890:	e000      	b.n	8001894 <LL_EXTI_Init+0x104>
      }
 8001892:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8001894:	230f      	movs	r3, #15
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	781b      	ldrb	r3, [r3, #0]
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	b004      	add	sp, #16
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <LL_GPIO_SetPinMode>:
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6819      	ldr	r1, [r3, #0]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	435b      	muls	r3, r3
 80018b6:	001a      	movs	r2, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	189b      	adds	r3, r3, r2
 80018be:	43db      	mvns	r3, r3
 80018c0:	400b      	ands	r3, r1
 80018c2:	001a      	movs	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	435b      	muls	r3, r3
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	434b      	muls	r3, r1
 80018cc:	431a      	orrs	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	601a      	str	r2, [r3, #0]
}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b004      	add	sp, #16
 80018d8:	bd80      	pop	{r7, pc}

080018da <LL_GPIO_SetPinOutputType>:
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	43d2      	mvns	r2, r2
 80018ee:	401a      	ands	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	434b      	muls	r3, r1
 80018f6:	431a      	orrs	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	605a      	str	r2, [r3, #4]
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b004      	add	sp, #16
 8001902:	bd80      	pop	{r7, pc}

08001904 <LL_GPIO_SetPinSpeed>:
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6899      	ldr	r1, [r3, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	435b      	muls	r3, r3
 8001918:	001a      	movs	r2, r3
 800191a:	0013      	movs	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	189b      	adds	r3, r3, r2
 8001920:	43db      	mvns	r3, r3
 8001922:	400b      	ands	r3, r1
 8001924:	001a      	movs	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	435b      	muls	r3, r3
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	434b      	muls	r3, r1
 800192e:	431a      	orrs	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	609a      	str	r2, [r3, #8]
}
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	b004      	add	sp, #16
 800193a:	bd80      	pop	{r7, pc}

0800193c <LL_GPIO_SetPinPull>:
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	68d9      	ldr	r1, [r3, #12]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	435b      	muls	r3, r3
 8001950:	001a      	movs	r2, r3
 8001952:	0013      	movs	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	189b      	adds	r3, r3, r2
 8001958:	43db      	mvns	r3, r3
 800195a:	400b      	ands	r3, r1
 800195c:	001a      	movs	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	435b      	muls	r3, r3
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	434b      	muls	r3, r1
 8001966:	431a      	orrs	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	60da      	str	r2, [r3, #12]
}
 800196c:	46c0      	nop			; (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b004      	add	sp, #16
 8001972:	bd80      	pop	{r7, pc}

08001974 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6a19      	ldr	r1, [r3, #32]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	435b      	muls	r3, r3
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	4353      	muls	r3, r2
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	435a      	muls	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	43db      	mvns	r3, r3
 8001998:	400b      	ands	r3, r1
 800199a:	001a      	movs	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	435b      	muls	r3, r3
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	434b      	muls	r3, r1
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	434b      	muls	r3, r1
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	434b      	muls	r3, r1
 80019ac:	431a      	orrs	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b004      	add	sp, #16
 80019b8:	bd80      	pop	{r7, pc}

080019ba <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b084      	sub	sp, #16
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	0a12      	lsrs	r2, r2, #8
 80019d2:	4353      	muls	r3, r2
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	0a12      	lsrs	r2, r2, #8
 80019d8:	4353      	muls	r3, r2
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	0a12      	lsrs	r2, r2, #8
 80019de:	435a      	muls	r2, r3
 80019e0:	0013      	movs	r3, r2
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	43db      	mvns	r3, r3
 80019e8:	400b      	ands	r3, r1
 80019ea:	001a      	movs	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	0a09      	lsrs	r1, r1, #8
 80019f4:	434b      	muls	r3, r1
 80019f6:	68b9      	ldr	r1, [r7, #8]
 80019f8:	0a09      	lsrs	r1, r1, #8
 80019fa:	434b      	muls	r3, r1
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	0a09      	lsrs	r1, r1, #8
 8001a00:	434b      	muls	r3, r1
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	434b      	muls	r3, r1
 8001a06:	431a      	orrs	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b004      	add	sp, #16
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001a22:	e048      	b.n	8001ab6 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2101      	movs	r1, #1
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4091      	lsls	r1, r2
 8001a2e:	000a      	movs	r2, r1
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d03a      	beq.n	8001ab0 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d003      	beq.n	8001a4a <LL_GPIO_Init+0x36>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d10e      	bne.n	8001a68 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	0018      	movs	r0, r3
 8001a54:	f7ff ff56 	bl	8001904 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	6819      	ldr	r1, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	0018      	movs	r0, r3
 8001a64:	f7ff ff39 	bl	80018da <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff ff63 	bl	800193c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d111      	bne.n	8001aa2 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2bff      	cmp	r3, #255	; 0xff
 8001a82:	d807      	bhi.n	8001a94 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7ff ff71 	bl	8001974 <LL_GPIO_SetAFPin_0_7>
 8001a92:	e006      	b.n	8001aa2 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff ff8c 	bl	80019ba <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f7ff fef9 	bl	80018a2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	40da      	lsrs	r2, r3
 8001abe:	1e13      	subs	r3, r2, #0
 8001ac0:	d1b0      	bne.n	8001a24 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b004      	add	sp, #16
 8001aca:	bd80      	pop	{r7, pc}

08001acc <LL_RCC_HSI_IsReady>:
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <LL_RCC_HSI_IsReady+0x1c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	3b02      	subs	r3, #2
 8001ada:	425a      	negs	r2, r3
 8001adc:	4153      	adcs	r3, r2
 8001ade:	b2db      	uxtb	r3, r3
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	40021000 	.word	0x40021000

08001aec <LL_RCC_LSE_IsReady>:
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <LL_RCC_LSE_IsReady+0x1c>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	2202      	movs	r2, #2
 8001af6:	4013      	ands	r3, r2
 8001af8:	3b02      	subs	r3, #2
 8001afa:	425a      	negs	r2, r3
 8001afc:	4153      	adcs	r3, r2
 8001afe:	b2db      	uxtb	r3, r3
}
 8001b00:	0018      	movs	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	40021000 	.word	0x40021000

08001b0c <LL_RCC_GetSysClkSource>:
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <LL_RCC_GetSysClkSource+0x14>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	220c      	movs	r2, #12
 8001b16:	4013      	ands	r3, r2
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	40021000 	.word	0x40021000

08001b24 <LL_RCC_GetAHBPrescaler>:
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <LL_RCC_GetAHBPrescaler+0x14>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	22f0      	movs	r2, #240	; 0xf0
 8001b2e:	4013      	ands	r3, r2
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	40021000 	.word	0x40021000

08001b3c <LL_RCC_GetAPB1Prescaler>:
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	23e0      	movs	r3, #224	; 0xe0
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4013      	ands	r3, r2
}
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000

08001b54 <LL_RCC_GetUSARTClockSource>:
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <LL_RCC_GetUSARTClockSource+0x24>)
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	2103      	movs	r1, #3
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4091      	lsls	r1, r2
 8001b66:	000a      	movs	r2, r1
 8001b68:	401a      	ands	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	4313      	orrs	r3, r2
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b002      	add	sp, #8
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000

08001b7c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <LL_RCC_PLL_GetMainSource+0x14>)
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	23c0      	movs	r3, #192	; 0xc0
 8001b86:	025b      	lsls	r3, r3, #9
 8001b88:	4013      	ands	r3, r2
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000

08001b94 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	23f0      	movs	r3, #240	; 0xf0
 8001b9e:	039b      	lsls	r3, r3, #14
 8001ba0:	4013      	ands	r3, r2
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000

08001bac <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <LL_RCC_PLL_GetPrediv+0x14>)
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	4013      	ands	r3, r2
}
 8001bb8:	0018      	movs	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001bcc:	f000 f8de 	bl	8001d8c <RCC_GetSystemClockFreq>
 8001bd0:	0002      	movs	r2, r0
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f000 f904 	bl	8001de8 <RCC_GetHCLKClockFreq>
 8001be0:	0002      	movs	r2, r0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	0018      	movs	r0, r3
 8001bec:	f000 f912 	bl	8001e14 <RCC_GetPCLK1ClockFreq>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b002      	add	sp, #8
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d12d      	bne.n	8001c6e <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff ff9d 	bl	8001b54 <LL_RCC_GetUSARTClockSource>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d00a      	beq.n	8001c36 <LL_RCC_GetUSARTClockFreq+0x36>
 8001c20:	d818      	bhi.n	8001c54 <LL_RCC_GetUSARTClockFreq+0x54>
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d002      	beq.n	8001c2c <LL_RCC_GetUSARTClockFreq+0x2c>
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d00c      	beq.n	8001c44 <LL_RCC_GetUSARTClockFreq+0x44>
 8001c2a:	e013      	b.n	8001c54 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001c2c:	f000 f8ae 	bl	8001d8c <RCC_GetSystemClockFreq>
 8001c30:	0003      	movs	r3, r0
 8001c32:	60fb      	str	r3, [r7, #12]
        break;
 8001c34:	e020      	b.n	8001c78 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001c36:	f7ff ff49 	bl	8001acc <LL_RCC_HSI_IsReady>
 8001c3a:	1e03      	subs	r3, r0, #0
 8001c3c:	d019      	beq.n	8001c72 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <LL_RCC_GetUSARTClockFreq+0x170>)
 8001c40:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c42:	e016      	b.n	8001c72 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001c44:	f7ff ff52 	bl	8001aec <LL_RCC_LSE_IsReady>
 8001c48:	1e03      	subs	r3, r0, #0
 8001c4a:	d014      	beq.n	8001c76 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c52:	e010      	b.n	8001c76 <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001c54:	f000 f89a 	bl	8001d8c <RCC_GetSystemClockFreq>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f000 f8c4 	bl	8001de8 <RCC_GetHCLKClockFreq>
 8001c60:	0003      	movs	r3, r0
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 f8d6 	bl	8001e14 <RCC_GetPCLK1ClockFreq>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	60fb      	str	r3, [r7, #12]
        break;
 8001c6c:	e004      	b.n	8001c78 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	e002      	b.n	8001c78 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	e000      	b.n	8001c78 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001c76:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CFGR3_USART1SW  */

#if defined(RCC_CFGR3_USART2SW)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d132      	bne.n	8001ce4 <LL_RCC_GetUSARTClockFreq+0xe4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7ff ff67 	bl	8001b54 <LL_RCC_GetUSARTClockSource>
 8001c86:	0003      	movs	r3, r0
 8001c88:	4a3a      	ldr	r2, [pc, #232]	; (8001d74 <LL_RCC_GetUSARTClockFreq+0x174>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00e      	beq.n	8001cac <LL_RCC_GetUSARTClockFreq+0xac>
 8001c8e:	4a39      	ldr	r2, [pc, #228]	; (8001d74 <LL_RCC_GetUSARTClockFreq+0x174>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d81a      	bhi.n	8001cca <LL_RCC_GetUSARTClockFreq+0xca>
 8001c94:	4a38      	ldr	r2, [pc, #224]	; (8001d78 <LL_RCC_GetUSARTClockFreq+0x178>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <LL_RCC_GetUSARTClockFreq+0xa2>
 8001c9a:	4a38      	ldr	r2, [pc, #224]	; (8001d7c <LL_RCC_GetUSARTClockFreq+0x17c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00c      	beq.n	8001cba <LL_RCC_GetUSARTClockFreq+0xba>
 8001ca0:	e013      	b.n	8001cca <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001ca2:	f000 f873 	bl	8001d8c <RCC_GetSystemClockFreq>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	60fb      	str	r3, [r7, #12]
        break;
 8001caa:	e020      	b.n	8001cee <LL_RCC_GetUSARTClockFreq+0xee>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001cac:	f7ff ff0e 	bl	8001acc <LL_RCC_HSI_IsReady>
 8001cb0:	1e03      	subs	r3, r0, #0
 8001cb2:	d019      	beq.n	8001ce8 <LL_RCC_GetUSARTClockFreq+0xe8>
        {
          usart_frequency = HSI_VALUE;
 8001cb4:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <LL_RCC_GetUSARTClockFreq+0x170>)
 8001cb6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001cb8:	e016      	b.n	8001ce8 <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001cba:	f7ff ff17 	bl	8001aec <LL_RCC_LSE_IsReady>
 8001cbe:	1e03      	subs	r3, r0, #0
 8001cc0:	d014      	beq.n	8001cec <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = LSE_VALUE;
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001cc8:	e010      	b.n	8001cec <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001cca:	f000 f85f 	bl	8001d8c <RCC_GetSystemClockFreq>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f000 f889 	bl	8001de8 <RCC_GetHCLKClockFreq>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f000 f89b 	bl	8001e14 <RCC_GetPCLK1ClockFreq>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	60fb      	str	r3, [r7, #12]
        break;
 8001ce2:	e004      	b.n	8001cee <LL_RCC_GetUSARTClockFreq+0xee>
    }
  }
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	e002      	b.n	8001cee <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	e000      	b.n	8001cee <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 8001cec:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b12      	cmp	r3, #18
 8001cf2:	d132      	bne.n	8001d5a <LL_RCC_GetUSARTClockFreq+0x15a>
  {
    /* USART3CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7ff ff2c 	bl	8001b54 <LL_RCC_GetUSARTClockSource>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <LL_RCC_GetUSARTClockFreq+0x180>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00e      	beq.n	8001d22 <LL_RCC_GetUSARTClockFreq+0x122>
 8001d04:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <LL_RCC_GetUSARTClockFreq+0x180>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d81a      	bhi.n	8001d40 <LL_RCC_GetUSARTClockFreq+0x140>
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <LL_RCC_GetUSARTClockFreq+0x184>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d003      	beq.n	8001d18 <LL_RCC_GetUSARTClockFreq+0x118>
 8001d10:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <LL_RCC_GetUSARTClockFreq+0x188>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d00c      	beq.n	8001d30 <LL_RCC_GetUSARTClockFreq+0x130>
 8001d16:	e013      	b.n	8001d40 <LL_RCC_GetUSARTClockFreq+0x140>
    {
      case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001d18:	f000 f838 	bl	8001d8c <RCC_GetSystemClockFreq>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	60fb      	str	r3, [r7, #12]
        break;
 8001d20:	e020      	b.n	8001d64 <LL_RCC_GetUSARTClockFreq+0x164>

      case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001d22:	f7ff fed3 	bl	8001acc <LL_RCC_HSI_IsReady>
 8001d26:	1e03      	subs	r3, r0, #0
 8001d28:	d019      	beq.n	8001d5e <LL_RCC_GetUSARTClockFreq+0x15e>
        {
          usart_frequency = HSI_VALUE;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <LL_RCC_GetUSARTClockFreq+0x170>)
 8001d2c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001d2e:	e016      	b.n	8001d5e <LL_RCC_GetUSARTClockFreq+0x15e>

      case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001d30:	f7ff fedc 	bl	8001aec <LL_RCC_LSE_IsReady>
 8001d34:	1e03      	subs	r3, r0, #0
 8001d36:	d014      	beq.n	8001d62 <LL_RCC_GetUSARTClockFreq+0x162>
        {
          usart_frequency = LSE_VALUE;
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001d3e:	e010      	b.n	8001d62 <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001d40:	f000 f824 	bl	8001d8c <RCC_GetSystemClockFreq>
 8001d44:	0003      	movs	r3, r0
 8001d46:	0018      	movs	r0, r3
 8001d48:	f000 f84e 	bl	8001de8 <RCC_GetHCLKClockFreq>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f000 f860 	bl	8001e14 <RCC_GetPCLK1ClockFreq>
 8001d54:	0003      	movs	r3, r0
 8001d56:	60fb      	str	r3, [r7, #12]
        break;
 8001d58:	e004      	b.n	8001d64 <LL_RCC_GetUSARTClockFreq+0x164>
    }
  }
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	e002      	b.n	8001d64 <LL_RCC_GetUSARTClockFreq+0x164>
        break;
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	e000      	b.n	8001d64 <LL_RCC_GetUSARTClockFreq+0x164>
        break;
 8001d62:	46c0      	nop			; (mov r8, r8)

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001d64:	68fb      	ldr	r3, [r7, #12]
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b004      	add	sp, #16
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	007a1200 	.word	0x007a1200
 8001d74:	10030000 	.word	0x10030000
 8001d78:	10010000 	.word	0x10010000
 8001d7c:	10020000 	.word	0x10020000
 8001d80:	120c0000 	.word	0x120c0000
 8001d84:	12040000 	.word	0x12040000
 8001d88:	12080000 	.word	0x12080000

08001d8c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001d96:	f7ff feb9 	bl	8001b0c <LL_RCC_GetSysClkSource>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	2b0c      	cmp	r3, #12
 8001d9e:	d013      	beq.n	8001dc8 <RCC_GetSystemClockFreq+0x3c>
 8001da0:	d815      	bhi.n	8001dce <RCC_GetSystemClockFreq+0x42>
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d00b      	beq.n	8001dbe <RCC_GetSystemClockFreq+0x32>
 8001da6:	d812      	bhi.n	8001dce <RCC_GetSystemClockFreq+0x42>
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <RCC_GetSystemClockFreq+0x26>
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d003      	beq.n	8001db8 <RCC_GetSystemClockFreq+0x2c>
 8001db0:	e00d      	b.n	8001dce <RCC_GetSystemClockFreq+0x42>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <RCC_GetSystemClockFreq+0x54>)
 8001db4:	607b      	str	r3, [r7, #4]
      break;
 8001db6:	e00d      	b.n	8001dd4 <RCC_GetSystemClockFreq+0x48>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <RCC_GetSystemClockFreq+0x54>)
 8001dba:	607b      	str	r3, [r7, #4]
      break;
 8001dbc:	e00a      	b.n	8001dd4 <RCC_GetSystemClockFreq+0x48>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001dbe:	f000 f83d 	bl	8001e3c <RCC_PLL_GetFreqDomain_SYS>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	607b      	str	r3, [r7, #4]
      break;
 8001dc6:	e005      	b.n	8001dd4 <RCC_GetSystemClockFreq+0x48>

#if defined(RCC_HSI48_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI48:/* HSI48 used as system clock  source */
      frequency = HSI48_VALUE;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <RCC_GetSystemClockFreq+0x58>)
 8001dca:	607b      	str	r3, [r7, #4]
      break;
 8001dcc:	e002      	b.n	8001dd4 <RCC_GetSystemClockFreq+0x48>
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <RCC_GetSystemClockFreq+0x54>)
 8001dd0:	607b      	str	r3, [r7, #4]
      break;
 8001dd2:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8001dd4:	687b      	ldr	r3, [r7, #4]
}
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b002      	add	sp, #8
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	007a1200 	.word	0x007a1200
 8001de4:	02dc6c00 	.word	0x02dc6c00

08001de8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001df0:	f7ff fe98 	bl	8001b24 <LL_RCC_GetAHBPrescaler>
 8001df4:	0003      	movs	r3, r0
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	220f      	movs	r2, #15
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <RCC_GetHCLKClockFreq+0x28>)
 8001dfe:	5cd3      	ldrb	r3, [r2, r3]
 8001e00:	001a      	movs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	40d3      	lsrs	r3, r2
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	0800289c 	.word	0x0800289c

08001e14 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001e1c:	f7ff fe8e 	bl	8001b3c <LL_RCC_GetAPB1Prescaler>
 8001e20:	0003      	movs	r3, r0
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <RCC_GetPCLK1ClockFreq+0x24>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	001a      	movs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	40d3      	lsrs	r3, r2
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b002      	add	sp, #8
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	080028ac 	.word	0x080028ac

08001e3c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	2300      	movs	r3, #0
 8001e48:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001e4a:	f7ff fe97 	bl	8001b7c <LL_RCC_PLL_GetMainSource>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	23c0      	movs	r3, #192	; 0xc0
 8001e56:	025b      	lsls	r3, r3, #9
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d012      	beq.n	8001e82 <RCC_PLL_GetFreqDomain_SYS+0x46>
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	23c0      	movs	r3, #192	; 0xc0
 8001e60:	025b      	lsls	r3, r3, #9
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d813      	bhi.n	8001e8e <RCC_PLL_GetFreqDomain_SYS+0x52>
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d005      	beq.n	8001e7c <RCC_PLL_GetFreqDomain_SYS+0x40>
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	025b      	lsls	r3, r3, #9
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d006      	beq.n	8001e88 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8001e7a:	e008      	b.n	8001e8e <RCC_PLL_GetFreqDomain_SYS+0x52>
  {
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 8001e7e:	607b      	str	r3, [r7, #4]
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001e80:	e008      	b.n	8001e94 <RCC_PLL_GetFreqDomain_SYS+0x58>

#if defined(RCC_HSI48_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI48:     /* HSI48 used as PLL clock source */
      pllinputfreq = HSI48_VALUE;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <RCC_PLL_GetFreqDomain_SYS+0x8c>)
 8001e84:	607b      	str	r3, [r7, #4]
      break;
 8001e86:	e005      	b.n	8001e94 <RCC_PLL_GetFreqDomain_SYS+0x58>
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001e88:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 8001e8a:	607b      	str	r3, [r7, #4]
      break;
 8001e8c:	e002      	b.n	8001e94 <RCC_PLL_GetFreqDomain_SYS+0x58>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 8001e90:	607b      	str	r3, [r7, #4]
#else
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001e92:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 8001e94:	f7ff fe8a 	bl	8001bac <LL_RCC_PLL_GetPrediv>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	220f      	movs	r2, #15
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe f92e 	bl	8000104 <__udivsi3>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	001c      	movs	r4, r3
 8001eac:	f7ff fe72 	bl	8001b94 <LL_RCC_PLL_GetMultiplicator>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	0c9b      	lsrs	r3, r3, #18
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	4363      	muls	r3, r4
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b003      	add	sp, #12
 8001ec2:	bd90      	pop	{r4, r7, pc}
 8001ec4:	007a1200 	.word	0x007a1200
 8001ec8:	02dc6c00 	.word	0x02dc6c00

08001ecc <LL_TIM_SetPrescaler>:
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001edc:	46c0      	nop			; (mov r8, r8)
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b002      	add	sp, #8
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <LL_TIM_SetAutoReload>:
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001ef4:	46c0      	nop			; (mov r8, r8)
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b002      	add	sp, #8
 8001efa:	bd80      	pop	{r7, pc}

08001efc <LL_TIM_SetRepetitionCounter>:
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001f0c:	46c0      	nop			; (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b002      	add	sp, #8
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <LL_TIM_OC_SetCompareCH1>:
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b002      	add	sp, #8
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <LL_TIM_OC_SetCompareCH2>:
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b002      	add	sp, #8
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <LL_TIM_OC_SetCompareCH3>:
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f54:	46c0      	nop			; (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <LL_TIM_OC_SetCompareCH4>:
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f6c:	46c0      	nop			; (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b002      	add	sp, #8
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	2201      	movs	r2, #1
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	615a      	str	r2, [r3, #20]
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a35      	ldr	r2, [pc, #212]	; (8002078 <LL_TIM_Init+0xe8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d008      	beq.n	8001fba <LL_TIM_Init+0x2a>
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	05db      	lsls	r3, r3, #23
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d003      	beq.n	8001fba <LL_TIM_Init+0x2a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a31      	ldr	r2, [pc, #196]	; (800207c <LL_TIM_Init+0xec>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d107      	bne.n	8001fca <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2270      	movs	r2, #112	; 0x70
 8001fbe:	4393      	bics	r3, r2
 8001fc0:	001a      	movs	r2, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a2a      	ldr	r2, [pc, #168]	; (8002078 <LL_TIM_Init+0xe8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d018      	beq.n	8002004 <LL_TIM_Init+0x74>
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	05db      	lsls	r3, r3, #23
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d013      	beq.n	8002004 <LL_TIM_Init+0x74>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a27      	ldr	r2, [pc, #156]	; (800207c <LL_TIM_Init+0xec>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00f      	beq.n	8002004 <LL_TIM_Init+0x74>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a26      	ldr	r2, [pc, #152]	; (8002080 <LL_TIM_Init+0xf0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00b      	beq.n	8002004 <LL_TIM_Init+0x74>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a25      	ldr	r2, [pc, #148]	; (8002084 <LL_TIM_Init+0xf4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d007      	beq.n	8002004 <LL_TIM_Init+0x74>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a24      	ldr	r2, [pc, #144]	; (8002088 <LL_TIM_Init+0xf8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d003      	beq.n	8002004 <LL_TIM_Init+0x74>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a23      	ldr	r2, [pc, #140]	; (800208c <LL_TIM_Init+0xfc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d106      	bne.n	8002012 <LL_TIM_Init+0x82>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4a22      	ldr	r2, [pc, #136]	; (8002090 <LL_TIM_Init+0x100>)
 8002008:	401a      	ands	r2, r3
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	0011      	movs	r1, r2
 8002020:	0018      	movs	r0, r3
 8002022:	f7ff ff5f 	bl	8001ee4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	001a      	movs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	0011      	movs	r1, r2
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff ff4b 	bl	8001ecc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <LL_TIM_Init+0xe8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00b      	beq.n	8002056 <LL_TIM_Init+0xc6>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a10      	ldr	r2, [pc, #64]	; (8002084 <LL_TIM_Init+0xf4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d007      	beq.n	8002056 <LL_TIM_Init+0xc6>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a0f      	ldr	r2, [pc, #60]	; (8002088 <LL_TIM_Init+0xf8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d003      	beq.n	8002056 <LL_TIM_Init+0xc6>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a0e      	ldr	r2, [pc, #56]	; (800208c <LL_TIM_Init+0xfc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d106      	bne.n	8002064 <LL_TIM_Init+0xd4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0011      	movs	r1, r2
 800205e:	0018      	movs	r0, r3
 8002060:	f7ff ff4c 	bl	8001efc <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	0018      	movs	r0, r3
 8002068:	f7ff ff84 	bl	8001f74 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800206c:	2300      	movs	r3, #0
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b004      	add	sp, #16
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	40012c00 	.word	0x40012c00
 800207c:	40000400 	.word	0x40000400
 8002080:	40002000 	.word	0x40002000
 8002084:	40014000 	.word	0x40014000
 8002088:	40014400 	.word	0x40014400
 800208c:	40014800 	.word	0x40014800
 8002090:	fffffcff 	.word	0xfffffcff

08002094 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80020a0:	2317      	movs	r3, #23
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	2201      	movs	r2, #1
 80020a6:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	015b      	lsls	r3, r3, #5
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d036      	beq.n	8002120 <LL_TIM_OC_Init+0x8c>
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	015b      	lsls	r3, r3, #5
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d83c      	bhi.n	8002136 <LL_TIM_OC_Init+0xa2>
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d021      	beq.n	800210a <LL_TIM_OC_Init+0x76>
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d832      	bhi.n	8002136 <LL_TIM_OC_Init+0xa2>
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d003      	beq.n	80020de <LL_TIM_OC_Init+0x4a>
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b10      	cmp	r3, #16
 80020da:	d00b      	beq.n	80020f4 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80020dc:	e02b      	b.n	8002136 <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80020de:	2317      	movs	r3, #23
 80020e0:	18fc      	adds	r4, r7, r3
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	0011      	movs	r1, r2
 80020e8:	0018      	movs	r0, r3
 80020ea:	f000 f82d 	bl	8002148 <OC1Config>
 80020ee:	0003      	movs	r3, r0
 80020f0:	7023      	strb	r3, [r4, #0]
      break;
 80020f2:	e021      	b.n	8002138 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80020f4:	2317      	movs	r3, #23
 80020f6:	18fc      	adds	r4, r7, r3
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	0011      	movs	r1, r2
 80020fe:	0018      	movs	r0, r3
 8002100:	f000 f8a6 	bl	8002250 <OC2Config>
 8002104:	0003      	movs	r3, r0
 8002106:	7023      	strb	r3, [r4, #0]
      break;
 8002108:	e016      	b.n	8002138 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800210a:	2317      	movs	r3, #23
 800210c:	18fc      	adds	r4, r7, r3
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	0011      	movs	r1, r2
 8002114:	0018      	movs	r0, r3
 8002116:	f000 f925 	bl	8002364 <OC3Config>
 800211a:	0003      	movs	r3, r0
 800211c:	7023      	strb	r3, [r4, #0]
      break;
 800211e:	e00b      	b.n	8002138 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002120:	2317      	movs	r3, #23
 8002122:	18fc      	adds	r4, r7, r3
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	0011      	movs	r1, r2
 800212a:	0018      	movs	r0, r3
 800212c:	f000 f9a4 	bl	8002478 <OC4Config>
 8002130:	0003      	movs	r3, r0
 8002132:	7023      	strb	r3, [r4, #0]
      break;
 8002134:	e000      	b.n	8002138 <LL_TIM_OC_Init+0xa4>
      break;
 8002136:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8002138:	2317      	movs	r3, #23
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	781b      	ldrb	r3, [r3, #0]
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b007      	add	sp, #28
 8002144:	bd90      	pop	{r4, r7, pc}
	...

08002148 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	2201      	movs	r2, #1
 8002158:	4393      	bics	r3, r2
 800215a:	001a      	movs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2203      	movs	r2, #3
 8002176:	4393      	bics	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2270      	movs	r2, #112	; 0x70
 800217e:	4393      	bics	r3, r2
 8002180:	001a      	movs	r2, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2202      	movs	r2, #2
 800218e:	4393      	bics	r3, r2
 8002190:	001a      	movs	r2, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2201      	movs	r2, #1
 800219e:	4393      	bics	r3, r2
 80021a0:	001a      	movs	r2, r3
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a22      	ldr	r2, [pc, #136]	; (8002238 <OC1Config+0xf0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00b      	beq.n	80021ca <OC1Config+0x82>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a21      	ldr	r2, [pc, #132]	; (800223c <OC1Config+0xf4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d007      	beq.n	80021ca <OC1Config+0x82>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a20      	ldr	r2, [pc, #128]	; (8002240 <OC1Config+0xf8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d003      	beq.n	80021ca <OC1Config+0x82>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a1f      	ldr	r2, [pc, #124]	; (8002244 <OC1Config+0xfc>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d120      	bne.n	800220c <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2208      	movs	r2, #8
 80021ce:	4393      	bics	r3, r2
 80021d0:	001a      	movs	r2, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2204      	movs	r2, #4
 80021e0:	4393      	bics	r3, r2
 80021e2:	001a      	movs	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4a15      	ldr	r2, [pc, #84]	; (8002248 <OC1Config+0x100>)
 80021f2:	401a      	ands	r2, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4a13      	ldr	r2, [pc, #76]	; (800224c <OC1Config+0x104>)
 8002200:	401a      	ands	r2, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	0011      	movs	r1, r2
 8002220:	0018      	movs	r0, r3
 8002222:	f7ff fe77 	bl	8001f14 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800222c:	2300      	movs	r3, #0
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b006      	add	sp, #24
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	40012c00 	.word	0x40012c00
 800223c:	40014000 	.word	0x40014000
 8002240:	40014400 	.word	0x40014400
 8002244:	40014800 	.word	0x40014800
 8002248:	fffffeff 	.word	0xfffffeff
 800224c:	fffffdff 	.word	0xfffffdff

08002250 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	2210      	movs	r2, #16
 8002260:	4393      	bics	r3, r2
 8002262:	001a      	movs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a31      	ldr	r2, [pc, #196]	; (8002344 <OC2Config+0xf4>)
 800227e:	4013      	ands	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4a30      	ldr	r2, [pc, #192]	; (8002348 <OC2Config+0xf8>)
 8002286:	401a      	ands	r2, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2220      	movs	r2, #32
 8002296:	4393      	bics	r3, r2
 8002298:	001a      	movs	r2, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2210      	movs	r2, #16
 80022a8:	4393      	bics	r3, r2
 80022aa:	001a      	movs	r2, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	4313      	orrs	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a24      	ldr	r2, [pc, #144]	; (800234c <OC2Config+0xfc>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00b      	beq.n	80022d6 <OC2Config+0x86>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a23      	ldr	r2, [pc, #140]	; (8002350 <OC2Config+0x100>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d007      	beq.n	80022d6 <OC2Config+0x86>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a22      	ldr	r2, [pc, #136]	; (8002354 <OC2Config+0x104>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d003      	beq.n	80022d6 <OC2Config+0x86>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a21      	ldr	r2, [pc, #132]	; (8002358 <OC2Config+0x108>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d121      	bne.n	800231a <OC2Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2280      	movs	r2, #128	; 0x80
 80022da:	4393      	bics	r3, r2
 80022dc:	001a      	movs	r2, r3
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	019b      	lsls	r3, r3, #6
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2240      	movs	r2, #64	; 0x40
 80022ec:	4393      	bics	r3, r2
 80022ee:	001a      	movs	r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	019b      	lsls	r3, r3, #6
 80022f6:	4313      	orrs	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4a17      	ldr	r2, [pc, #92]	; (800235c <OC2Config+0x10c>)
 80022fe:	401a      	ands	r2, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <OC2Config+0x110>)
 800230e:	401a      	ands	r2, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	0011      	movs	r1, r2
 800232e:	0018      	movs	r0, r3
 8002330:	f7ff fdfc 	bl	8001f2c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800233a:	2300      	movs	r3, #0
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b006      	add	sp, #24
 8002342:	bd80      	pop	{r7, pc}
 8002344:	fffffcff 	.word	0xfffffcff
 8002348:	ffff8fff 	.word	0xffff8fff
 800234c:	40012c00 	.word	0x40012c00
 8002350:	40014000 	.word	0x40014000
 8002354:	40014400 	.word	0x40014400
 8002358:	40014800 	.word	0x40014800
 800235c:	fffffbff 	.word	0xfffffbff
 8002360:	fffff7ff 	.word	0xfffff7ff

08002364 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4a37      	ldr	r2, [pc, #220]	; (8002450 <OC3Config+0xec>)
 8002374:	401a      	ands	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2203      	movs	r2, #3
 8002390:	4393      	bics	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2270      	movs	r2, #112	; 0x70
 8002398:	4393      	bics	r3, r2
 800239a:	001a      	movs	r2, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	4a2b      	ldr	r2, [pc, #172]	; (8002454 <OC3Config+0xf0>)
 80023a8:	401a      	ands	r2, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	4a26      	ldr	r2, [pc, #152]	; (8002450 <OC3Config+0xec>)
 80023b8:	401a      	ands	r2, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a24      	ldr	r2, [pc, #144]	; (8002458 <OC3Config+0xf4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d00b      	beq.n	80023e4 <OC3Config+0x80>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a23      	ldr	r2, [pc, #140]	; (800245c <OC3Config+0xf8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d007      	beq.n	80023e4 <OC3Config+0x80>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a22      	ldr	r2, [pc, #136]	; (8002460 <OC3Config+0xfc>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d003      	beq.n	80023e4 <OC3Config+0x80>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a21      	ldr	r2, [pc, #132]	; (8002464 <OC3Config+0x100>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d11f      	bne.n	8002424 <OC3Config+0xc0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	4a20      	ldr	r2, [pc, #128]	; (8002468 <OC3Config+0x104>)
 80023e8:	401a      	ands	r2, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	029b      	lsls	r3, r3, #10
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	4a1d      	ldr	r2, [pc, #116]	; (800246c <OC3Config+0x108>)
 80023f8:	401a      	ands	r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	029b      	lsls	r3, r3, #10
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4a1a      	ldr	r2, [pc, #104]	; (8002470 <OC3Config+0x10c>)
 8002408:	401a      	ands	r2, r3
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4a17      	ldr	r2, [pc, #92]	; (8002474 <OC3Config+0x110>)
 8002418:	401a      	ands	r2, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	015b      	lsls	r3, r3, #5
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	0011      	movs	r1, r2
 8002438:	0018      	movs	r0, r3
 800243a:	f7ff fd83 	bl	8001f44 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002444:	2300      	movs	r3, #0
}
 8002446:	0018      	movs	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	b006      	add	sp, #24
 800244c:	bd80      	pop	{r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	fffffeff 	.word	0xfffffeff
 8002454:	fffffdff 	.word	0xfffffdff
 8002458:	40012c00 	.word	0x40012c00
 800245c:	40014000 	.word	0x40014000
 8002460:	40014400 	.word	0x40014400
 8002464:	40014800 	.word	0x40014800
 8002468:	fffff7ff 	.word	0xfffff7ff
 800246c:	fffffbff 	.word	0xfffffbff
 8002470:	ffffefff 	.word	0xffffefff
 8002474:	ffffdfff 	.word	0xffffdfff

08002478 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a2b      	ldr	r2, [pc, #172]	; (8002534 <OC4Config+0xbc>)
 8002488:	401a      	ands	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a25      	ldr	r2, [pc, #148]	; (8002538 <OC4Config+0xc0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4a24      	ldr	r2, [pc, #144]	; (800253c <OC4Config+0xc4>)
 80024ac:	401a      	ands	r2, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4a21      	ldr	r2, [pc, #132]	; (8002540 <OC4Config+0xc8>)
 80024bc:	401a      	ands	r2, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	031b      	lsls	r3, r3, #12
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <OC4Config+0xbc>)
 80024cc:	401a      	ands	r2, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	031b      	lsls	r3, r3, #12
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a1a      	ldr	r2, [pc, #104]	; (8002544 <OC4Config+0xcc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00b      	beq.n	80024f8 <OC4Config+0x80>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a19      	ldr	r2, [pc, #100]	; (8002548 <OC4Config+0xd0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d007      	beq.n	80024f8 <OC4Config+0x80>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a18      	ldr	r2, [pc, #96]	; (800254c <OC4Config+0xd4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d003      	beq.n	80024f8 <OC4Config+0x80>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a17      	ldr	r2, [pc, #92]	; (8002550 <OC4Config+0xd8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d107      	bne.n	8002508 <OC4Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	4a16      	ldr	r2, [pc, #88]	; (8002554 <OC4Config+0xdc>)
 80024fc:	401a      	ands	r2, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	019b      	lsls	r3, r3, #6
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	0011      	movs	r1, r2
 800251c:	0018      	movs	r0, r3
 800251e:	f7ff fd1d 	bl	8001f5c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002528:	2300      	movs	r3, #0
}
 800252a:	0018      	movs	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	b006      	add	sp, #24
 8002530:	bd80      	pop	{r7, pc}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	ffffefff 	.word	0xffffefff
 8002538:	fffffcff 	.word	0xfffffcff
 800253c:	ffff8fff 	.word	0xffff8fff
 8002540:	ffffdfff 	.word	0xffffdfff
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40014000 	.word	0x40014000
 800254c:	40014400 	.word	0x40014400
 8002550:	40014800 	.word	0x40014800
 8002554:	ffffbfff 	.word	0xffffbfff

08002558 <LL_USART_IsEnabled>:
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2201      	movs	r2, #1
 8002566:	4013      	ands	r3, r2
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <LL_USART_IsEnabled+0x18>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <LL_USART_IsEnabled+0x1a>
 8002570:	2300      	movs	r3, #0
}
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b002      	add	sp, #8
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <LL_USART_SetStopBitsLength>:
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <LL_USART_SetStopBitsLength+0x24>)
 800258c:	401a      	ands	r2, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	605a      	str	r2, [r3, #4]
}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	46bd      	mov	sp, r7
 800259a:	b002      	add	sp, #8
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	ffffcfff 	.word	0xffffcfff

080025a4 <LL_USART_SetHWFlowCtrl>:
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <LL_USART_SetHWFlowCtrl+0x24>)
 80025b4:	401a      	ands	r2, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	609a      	str	r2, [r3, #8]
}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b002      	add	sp, #8
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	fffffcff 	.word	0xfffffcff

080025cc <LL_USART_SetBaudRate>:
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d11c      	bne.n	800261e <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	005a      	lsls	r2, r3, #1
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	085b      	lsrs	r3, r3, #1
 80025ec:	18d3      	adds	r3, r2, r3
 80025ee:	6839      	ldr	r1, [r7, #0]
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7fd fd87 	bl	8000104 <__udivsi3>
 80025f6:	0003      	movs	r3, r0
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	4a10      	ldr	r2, [pc, #64]	; (8002640 <LL_USART_SetBaudRate+0x74>)
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	b29b      	uxth	r3, r3
 800260a:	001a      	movs	r2, r3
 800260c:	2307      	movs	r3, #7
 800260e:	4013      	ands	r3, r2
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	60da      	str	r2, [r3, #12]
}
 800261c:	e00c      	b.n	8002638 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	085a      	lsrs	r2, r3, #1
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	18d3      	adds	r3, r2, r3
 8002626:	6839      	ldr	r1, [r7, #0]
 8002628:	0018      	movs	r0, r3
 800262a:	f7fd fd6b 	bl	8000104 <__udivsi3>
 800262e:	0003      	movs	r3, r0
 8002630:	b29b      	uxth	r3, r3
 8002632:	001a      	movs	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	60da      	str	r2, [r3, #12]
}
 8002638:	46c0      	nop			; (mov r8, r8)
 800263a:	46bd      	mov	sp, r7
 800263c:	b006      	add	sp, #24
 800263e:	bd80      	pop	{r7, pc}
 8002640:	0000fff0 	.word	0x0000fff0

08002644 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800264e:	231f      	movs	r3, #31
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	2201      	movs	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0018      	movs	r0, r3
 800265e:	f7ff ff7b 	bl	8002558 <LL_USART_IsEnabled>
 8002662:	1e03      	subs	r3, r0, #0
 8002664:	d000      	beq.n	8002668 <LL_USART_Init+0x24>
 8002666:	e090      	b.n	800278a <LL_USART_Init+0x146>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a4a      	ldr	r2, [pc, #296]	; (8002798 <LL_USART_Init+0x154>)
 800266e:	401a      	ands	r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6859      	ldr	r1, [r3, #4]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4319      	orrs	r1, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	4319      	orrs	r1, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	430b      	orrs	r3, r1
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	0011      	movs	r1, r2
 8002694:	0018      	movs	r0, r3
 8002696:	f7ff ff71 	bl	800257c <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0011      	movs	r1, r2
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7ff ff7e 	bl	80025a4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a3c      	ldr	r2, [pc, #240]	; (800279c <LL_USART_Init+0x158>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d105      	bne.n	80026bc <LL_USART_Init+0x78>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80026b0:	2000      	movs	r0, #0
 80026b2:	f7ff faa5 	bl	8001c00 <LL_RCC_GetUSARTClockFreq>
 80026b6:	0003      	movs	r3, r0
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	e053      	b.n	8002764 <LL_USART_Init+0x120>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a38      	ldr	r2, [pc, #224]	; (80027a0 <LL_USART_Init+0x15c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d105      	bne.n	80026d0 <LL_USART_Init+0x8c>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80026c4:	2010      	movs	r0, #16
 80026c6:	f7ff fa9b 	bl	8001c00 <LL_RCC_GetUSARTClockFreq>
 80026ca:	0003      	movs	r3, r0
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	e049      	b.n	8002764 <LL_USART_Init+0x120>
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#endif /* USART2 */
#if defined(USART3)
    else if (USARTx == USART3)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a34      	ldr	r2, [pc, #208]	; (80027a4 <LL_USART_Init+0x160>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d105      	bne.n	80026e4 <LL_USART_Init+0xa0>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80026d8:	2012      	movs	r0, #18
 80026da:	f7ff fa91 	bl	8001c00 <LL_RCC_GetUSARTClockFreq>
 80026de:	0003      	movs	r3, r0
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	e03f      	b.n	8002764 <LL_USART_Init+0x120>
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a30      	ldr	r2, [pc, #192]	; (80027a8 <LL_USART_Init+0x164>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d108      	bne.n	80026fe <LL_USART_Init+0xba>
    {
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80026ec:	240c      	movs	r4, #12
 80026ee:	193b      	adds	r3, r7, r4
 80026f0:	0018      	movs	r0, r3
 80026f2:	f7ff fa67 	bl	8001bc4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80026f6:	193b      	adds	r3, r7, r4
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	61bb      	str	r3, [r7, #24]
 80026fc:	e032      	b.n	8002764 <LL_USART_Init+0x120>
    }
#endif /* USART4 */
#if defined(USART5)
    else if (USARTx == USART5)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a2a      	ldr	r2, [pc, #168]	; (80027ac <LL_USART_Init+0x168>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d108      	bne.n	8002718 <LL_USART_Init+0xd4>
    {
      /* USART5 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002706:	240c      	movs	r4, #12
 8002708:	193b      	adds	r3, r7, r4
 800270a:	0018      	movs	r0, r3
 800270c:	f7ff fa5a 	bl	8001bc4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002710:	193b      	adds	r3, r7, r4
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	e025      	b.n	8002764 <LL_USART_Init+0x120>
    }
#endif /* USART5 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <LL_USART_Init+0x16c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d108      	bne.n	8002732 <LL_USART_Init+0xee>
    {
      /* USART6 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002720:	240c      	movs	r4, #12
 8002722:	193b      	adds	r3, r7, r4
 8002724:	0018      	movs	r0, r3
 8002726:	f7ff fa4d 	bl	8001bc4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800272a:	193b      	adds	r3, r7, r4
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	e018      	b.n	8002764 <LL_USART_Init+0x120>
    }
#endif /* USART6 */
#if defined(USART7)
    else if (USARTx == USART7)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1f      	ldr	r2, [pc, #124]	; (80027b4 <LL_USART_Init+0x170>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d108      	bne.n	800274c <LL_USART_Init+0x108>
    {
      /* USART7 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800273a:	240c      	movs	r4, #12
 800273c:	193b      	adds	r3, r7, r4
 800273e:	0018      	movs	r0, r3
 8002740:	f7ff fa40 	bl	8001bc4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002744:	193b      	adds	r3, r7, r4
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	e00b      	b.n	8002764 <LL_USART_Init+0x120>
    }
#endif /* USART7 */
#if defined(USART8)
    else if (USARTx == USART8)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a1a      	ldr	r2, [pc, #104]	; (80027b8 <LL_USART_Init+0x174>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d107      	bne.n	8002764 <LL_USART_Init+0x120>
    {
      /* USART8 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002754:	240c      	movs	r4, #12
 8002756:	193b      	adds	r3, r7, r4
 8002758:	0018      	movs	r0, r3
 800275a:	f7ff fa33 	bl	8001bc4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800275e:	193b      	adds	r3, r7, r4
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00f      	beq.n	800278a <LL_USART_Init+0x146>
        && (USART_InitStruct->BaudRate != 0U))
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <LL_USART_Init+0x146>
    {
      status = SUCCESS;
 8002772:	231f      	movs	r3, #31
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff21 	bl	80025cc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800278a:	231f      	movs	r3, #31
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	781b      	ldrb	r3, [r3, #0]
}
 8002790:	0018      	movs	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	b009      	add	sp, #36	; 0x24
 8002796:	bd90      	pop	{r4, r7, pc}
 8002798:	efff69f3 	.word	0xefff69f3
 800279c:	40013800 	.word	0x40013800
 80027a0:	40004400 	.word	0x40004400
 80027a4:	40004800 	.word	0x40004800
 80027a8:	40004c00 	.word	0x40004c00
 80027ac:	40005000 	.word	0x40005000
 80027b0:	40011400 	.word	0x40011400
 80027b4:	40011800 	.word	0x40011800
 80027b8:	40011c00 	.word	0x40011c00

080027bc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80027c6:	6839      	ldr	r1, [r7, #0]
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7fd fc9b 	bl	8000104 <__udivsi3>
 80027ce:	0003      	movs	r3, r0
 80027d0:	001a      	movs	r2, r3
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <LL_InitTick+0x30>)
 80027d4:	3a01      	subs	r2, #1
 80027d6:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <LL_InitTick+0x30>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027de:	4b03      	ldr	r3, [pc, #12]	; (80027ec <LL_InitTick+0x30>)
 80027e0:	2205      	movs	r2, #5
 80027e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b002      	add	sp, #8
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	e000e010 	.word	0xe000e010

080027f0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80027f8:	23fa      	movs	r3, #250	; 0xfa
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	0011      	movs	r1, r2
 8002800:	0018      	movs	r0, r3
 8002802:	f7ff ffdb 	bl	80027bc <LL_InitTick>
}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b002      	add	sp, #8
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <LL_SetSystemCoreClock+0x18>)
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	601a      	str	r2, [r3, #0]
}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	b002      	add	sp, #8
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	20000000 	.word	0x20000000

0800282c <__libc_init_array>:
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	2600      	movs	r6, #0
 8002830:	4d0c      	ldr	r5, [pc, #48]	; (8002864 <__libc_init_array+0x38>)
 8002832:	4c0d      	ldr	r4, [pc, #52]	; (8002868 <__libc_init_array+0x3c>)
 8002834:	1b64      	subs	r4, r4, r5
 8002836:	10a4      	asrs	r4, r4, #2
 8002838:	42a6      	cmp	r6, r4
 800283a:	d109      	bne.n	8002850 <__libc_init_array+0x24>
 800283c:	2600      	movs	r6, #0
 800283e:	f000 f821 	bl	8002884 <_init>
 8002842:	4d0a      	ldr	r5, [pc, #40]	; (800286c <__libc_init_array+0x40>)
 8002844:	4c0a      	ldr	r4, [pc, #40]	; (8002870 <__libc_init_array+0x44>)
 8002846:	1b64      	subs	r4, r4, r5
 8002848:	10a4      	asrs	r4, r4, #2
 800284a:	42a6      	cmp	r6, r4
 800284c:	d105      	bne.n	800285a <__libc_init_array+0x2e>
 800284e:	bd70      	pop	{r4, r5, r6, pc}
 8002850:	00b3      	lsls	r3, r6, #2
 8002852:	58eb      	ldr	r3, [r5, r3]
 8002854:	4798      	blx	r3
 8002856:	3601      	adds	r6, #1
 8002858:	e7ee      	b.n	8002838 <__libc_init_array+0xc>
 800285a:	00b3      	lsls	r3, r6, #2
 800285c:	58eb      	ldr	r3, [r5, r3]
 800285e:	4798      	blx	r3
 8002860:	3601      	adds	r6, #1
 8002862:	e7f2      	b.n	800284a <__libc_init_array+0x1e>
 8002864:	080028c4 	.word	0x080028c4
 8002868:	080028c4 	.word	0x080028c4
 800286c:	080028c4 	.word	0x080028c4
 8002870:	080028c8 	.word	0x080028c8

08002874 <memset>:
 8002874:	0003      	movs	r3, r0
 8002876:	1882      	adds	r2, r0, r2
 8002878:	4293      	cmp	r3, r2
 800287a:	d100      	bne.n	800287e <memset+0xa>
 800287c:	4770      	bx	lr
 800287e:	7019      	strb	r1, [r3, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	e7f9      	b.n	8002878 <memset+0x4>

08002884 <_init>:
 8002884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288a:	bc08      	pop	{r3}
 800288c:	469e      	mov	lr, r3
 800288e:	4770      	bx	lr

08002890 <_fini>:
 8002890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002896:	bc08      	pop	{r3}
 8002898:	469e      	mov	lr, r3
 800289a:	4770      	bx	lr
