
STM32_LL_basics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004094  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800425c  0800425c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800425c  0800425c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800425c  0800425c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800425c  0800425c  0001425c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004260  08004260  00014260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000068  080042cc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  080042cc  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007228  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6d  00000000  00000000  000272b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00028d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  00029658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017751  00000000  00000000  00029ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000773c  00000000  00000000  000415f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076415  00000000  00000000  00048d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bf142  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028ac  00000000  00000000  000bf194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004138 	.word	0x08004138

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08004138 	.word	0x08004138

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	0002      	movs	r2, r0
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b7f      	cmp	r3, #127	; 0x7f
 8000242:	d809      	bhi.n	8000258 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000244:	1dfb      	adds	r3, r7, #7
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	001a      	movs	r2, r3
 800024a:	231f      	movs	r3, #31
 800024c:	401a      	ands	r2, r3
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <__NVIC_EnableIRQ+0x30>)
 8000250:	2101      	movs	r1, #1
 8000252:	4091      	lsls	r1, r2
 8000254:	000a      	movs	r2, r1
 8000256:	601a      	str	r2, [r3, #0]
  }
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	b002      	add	sp, #8
 800025e:	bd80      	pop	{r7, pc}
 8000260:	e000e100 	.word	0xe000e100

08000264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	0002      	movs	r2, r0
 800026c:	6039      	str	r1, [r7, #0]
 800026e:	1dfb      	adds	r3, r7, #7
 8000270:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000272:	1dfb      	adds	r3, r7, #7
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b7f      	cmp	r3, #127	; 0x7f
 8000278:	d828      	bhi.n	80002cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800027a:	4a2f      	ldr	r2, [pc, #188]	; (8000338 <__NVIC_SetPriority+0xd4>)
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	b25b      	sxtb	r3, r3
 8000282:	089b      	lsrs	r3, r3, #2
 8000284:	33c0      	adds	r3, #192	; 0xc0
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	589b      	ldr	r3, [r3, r2]
 800028a:	1dfa      	adds	r2, r7, #7
 800028c:	7812      	ldrb	r2, [r2, #0]
 800028e:	0011      	movs	r1, r2
 8000290:	2203      	movs	r2, #3
 8000292:	400a      	ands	r2, r1
 8000294:	00d2      	lsls	r2, r2, #3
 8000296:	21ff      	movs	r1, #255	; 0xff
 8000298:	4091      	lsls	r1, r2
 800029a:	000a      	movs	r2, r1
 800029c:	43d2      	mvns	r2, r2
 800029e:	401a      	ands	r2, r3
 80002a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	019b      	lsls	r3, r3, #6
 80002a6:	22ff      	movs	r2, #255	; 0xff
 80002a8:	401a      	ands	r2, r3
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	0018      	movs	r0, r3
 80002b0:	2303      	movs	r3, #3
 80002b2:	4003      	ands	r3, r0
 80002b4:	00db      	lsls	r3, r3, #3
 80002b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	481f      	ldr	r0, [pc, #124]	; (8000338 <__NVIC_SetPriority+0xd4>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	b25b      	sxtb	r3, r3
 80002c0:	089b      	lsrs	r3, r3, #2
 80002c2:	430a      	orrs	r2, r1
 80002c4:	33c0      	adds	r3, #192	; 0xc0
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002ca:	e031      	b.n	8000330 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002cc:	4a1b      	ldr	r2, [pc, #108]	; (800033c <__NVIC_SetPriority+0xd8>)
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	0019      	movs	r1, r3
 80002d4:	230f      	movs	r3, #15
 80002d6:	400b      	ands	r3, r1
 80002d8:	3b08      	subs	r3, #8
 80002da:	089b      	lsrs	r3, r3, #2
 80002dc:	3306      	adds	r3, #6
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	18d3      	adds	r3, r2, r3
 80002e2:	3304      	adds	r3, #4
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	1dfa      	adds	r2, r7, #7
 80002e8:	7812      	ldrb	r2, [r2, #0]
 80002ea:	0011      	movs	r1, r2
 80002ec:	2203      	movs	r2, #3
 80002ee:	400a      	ands	r2, r1
 80002f0:	00d2      	lsls	r2, r2, #3
 80002f2:	21ff      	movs	r1, #255	; 0xff
 80002f4:	4091      	lsls	r1, r2
 80002f6:	000a      	movs	r2, r1
 80002f8:	43d2      	mvns	r2, r2
 80002fa:	401a      	ands	r2, r3
 80002fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	019b      	lsls	r3, r3, #6
 8000302:	22ff      	movs	r2, #255	; 0xff
 8000304:	401a      	ands	r2, r3
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	0018      	movs	r0, r3
 800030c:	2303      	movs	r3, #3
 800030e:	4003      	ands	r3, r0
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000314:	4809      	ldr	r0, [pc, #36]	; (800033c <__NVIC_SetPriority+0xd8>)
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	001c      	movs	r4, r3
 800031c:	230f      	movs	r3, #15
 800031e:	4023      	ands	r3, r4
 8000320:	3b08      	subs	r3, #8
 8000322:	089b      	lsrs	r3, r3, #2
 8000324:	430a      	orrs	r2, r1
 8000326:	3306      	adds	r3, #6
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	18c3      	adds	r3, r0, r3
 800032c:	3304      	adds	r3, #4
 800032e:	601a      	str	r2, [r3, #0]
}
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	b003      	add	sp, #12
 8000336:	bd90      	pop	{r4, r7, pc}
 8000338:	e000e100 	.word	0xe000e100
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000348:	4b07      	ldr	r3, [pc, #28]	; (8000368 <LL_AHB1_GRP1_EnableClock+0x28>)
 800034a:	6959      	ldr	r1, [r3, #20]
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <LL_AHB1_GRP1_EnableClock+0x28>)
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	430a      	orrs	r2, r1
 8000352:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	4013      	ands	r3, r2
 800035c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800035e:	68fb      	ldr	r3, [r7, #12]
}
 8000360:	46c0      	nop			; (mov r8, r8)
 8000362:	46bd      	mov	sp, r7
 8000364:	b004      	add	sp, #16
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40021000 	.word	0x40021000

0800036c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 8000376:	4a0f      	ldr	r2, [pc, #60]	; (80003b4 <LL_SYSCFG_SetEXTISource+0x48>)
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	21ff      	movs	r1, #255	; 0xff
 800037c:	400b      	ands	r3, r1
 800037e:	3302      	adds	r3, #2
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	589b      	ldr	r3, [r3, r2]
 8000384:	683a      	ldr	r2, [r7, #0]
 8000386:	0c12      	lsrs	r2, r2, #16
 8000388:	210f      	movs	r1, #15
 800038a:	4091      	lsls	r1, r2
 800038c:	000a      	movs	r2, r1
 800038e:	43d2      	mvns	r2, r2
 8000390:	401a      	ands	r2, r3
 8000392:	0011      	movs	r1, r2
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	0c1b      	lsrs	r3, r3, #16
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	409a      	lsls	r2, r3
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <LL_SYSCFG_SetEXTISource+0x48>)
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	24ff      	movs	r4, #255	; 0xff
 80003a2:	4023      	ands	r3, r4
 80003a4:	430a      	orrs	r2, r1
 80003a6:	3302      	adds	r3, #2
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	501a      	str	r2, [r3, r0]
}
 80003ac:	46c0      	nop			; (mov r8, r8)
 80003ae:	46bd      	mov	sp, r7
 80003b0:	b003      	add	sp, #12
 80003b2:	bd90      	pop	{r4, r7, pc}
 80003b4:	40010000 	.word	0x40010000

080003b8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80003c0:	4b04      	ldr	r3, [pc, #16]	; (80003d4 <LL_EXTI_EnableIT_0_31+0x1c>)
 80003c2:	6819      	ldr	r1, [r3, #0]
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <LL_EXTI_EnableIT_0_31+0x1c>)
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	430a      	orrs	r2, r1
 80003ca:	601a      	str	r2, [r3, #0]
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	b002      	add	sp, #8
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40010400 	.word	0x40010400

080003d8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	6819      	ldr	r1, [r3, #0]
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	435b      	muls	r3, r3
 80003ec:	001a      	movs	r2, r3
 80003ee:	0013      	movs	r3, r2
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	189b      	adds	r3, r3, r2
 80003f4:	43db      	mvns	r3, r3
 80003f6:	400b      	ands	r3, r1
 80003f8:	001a      	movs	r2, r3
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	435b      	muls	r3, r3
 80003fe:	6879      	ldr	r1, [r7, #4]
 8000400:	434b      	muls	r3, r1
 8000402:	431a      	orrs	r2, r3
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	601a      	str	r2, [r3, #0]
}
 8000408:	46c0      	nop			; (mov r8, r8)
 800040a:	46bd      	mov	sp, r7
 800040c:	b004      	add	sp, #16
 800040e:	bd80      	pop	{r7, pc}

08000410 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	68d9      	ldr	r1, [r3, #12]
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	435b      	muls	r3, r3
 8000424:	001a      	movs	r2, r3
 8000426:	0013      	movs	r3, r2
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	189b      	adds	r3, r3, r2
 800042c:	43db      	mvns	r3, r3
 800042e:	400b      	ands	r3, r1
 8000430:	001a      	movs	r2, r3
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	435b      	muls	r3, r3
 8000436:	6879      	ldr	r1, [r7, #4]
 8000438:	434b      	muls	r3, r1
 800043a:	431a      	orrs	r2, r3
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	60da      	str	r2, [r3, #12]
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b004      	add	sp, #16
 8000446:	bd80      	pop	{r7, pc}

08000448 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800044e:	003b      	movs	r3, r7
 8000450:	0018      	movs	r0, r3
 8000452:	2308      	movs	r3, #8
 8000454:	001a      	movs	r2, r3
 8000456:	2100      	movs	r1, #0
 8000458:	f002 fcd8 	bl	8002e0c <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	031b      	lsls	r3, r3, #12
 8000460:	0018      	movs	r0, r3
 8000462:	f7ff ff6d 	bl	8000340 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	03db      	lsls	r3, r3, #15
 800046a:	0018      	movs	r0, r3
 800046c:	f7ff ff68 	bl	8000340 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	029b      	lsls	r3, r3, #10
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ff63 	bl	8000340 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <MX_GPIO_Init+0x90>)
 800047c:	0019      	movs	r1, r3
 800047e:	2002      	movs	r0, #2
 8000480:	f7ff ff74 	bl	800036c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	019b      	lsls	r3, r3, #6
 8000488:	4814      	ldr	r0, [pc, #80]	; (80004dc <MX_GPIO_Init+0x94>)
 800048a:	2200      	movs	r2, #0
 800048c:	0019      	movs	r1, r3
 800048e:	f7ff ffbf 	bl	8000410 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	019b      	lsls	r3, r3, #6
 8000496:	4811      	ldr	r0, [pc, #68]	; (80004dc <MX_GPIO_Init+0x94>)
 8000498:	2200      	movs	r2, #0
 800049a:	0019      	movs	r1, r3
 800049c:	f7ff ff9c 	bl	80003d8 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80004a0:	003b      	movs	r3, r7
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	0192      	lsls	r2, r2, #6
 80004a6:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80004a8:	003b      	movs	r3, r7
 80004aa:	2201      	movs	r2, #1
 80004ac:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80004ae:	003b      	movs	r3, r7
 80004b0:	2200      	movs	r2, #0
 80004b2:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80004b4:	003b      	movs	r3, r7
 80004b6:	2202      	movs	r2, #2
 80004b8:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80004ba:	003b      	movs	r3, r7
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fc2d 	bl	8001d1c <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
 80004c2:	2100      	movs	r1, #0
 80004c4:	2007      	movs	r0, #7
 80004c6:	f7ff fecd 	bl	8000264 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004ca:	2007      	movs	r0, #7
 80004cc:	f7ff feb0 	bl	8000230 <__NVIC_EnableIRQ>

}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	00040003 	.word	0x00040003
 80004dc:	48000800 	.word	0x48000800

080004e0 <gpio_init>:

/* USER CODE BEGIN 2 */
void gpio_init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_13);
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	019b      	lsls	r3, r3, #6
 80004e8:	0018      	movs	r0, r3
 80004ea:	f7ff ff65 	bl	80003b8 <LL_EXTI_EnableIT_0_31>
}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <gpio_irq_callback>:


void gpio_irq_callback(uint32_t ExtiLine)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if (ExtiLine == LL_EXTI_LINE_13)
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	2380      	movs	r3, #128	; 0x80
 8000500:	019b      	lsls	r3, r3, #6
 8000502:	429a      	cmp	r2, r3
 8000504:	d101      	bne.n	800050a <gpio_irq_callback+0x16>
  {
    tim_set_duty();
 8000506:	f000 fd49 	bl	8000f9c <tim_set_duty>
  }
}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	b002      	add	sp, #8
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_RCC_HSI_Enable+0x18>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <LL_RCC_HSI_Enable+0x18>)
 800051e:	2101      	movs	r1, #1
 8000520:	430a      	orrs	r2, r1
 8000522:	601a      	str	r2, [r3, #0]
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	40021000 	.word	0x40021000

08000530 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <LL_RCC_HSI_IsReady+0x1c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2202      	movs	r2, #2
 800053a:	4013      	ands	r3, r2
 800053c:	3b02      	subs	r3, #2
 800053e:	425a      	negs	r2, r3
 8000540:	4153      	adcs	r3, r2
 8000542:	b2db      	uxtb	r3, r3
}
 8000544:	0018      	movs	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40021000 	.word	0x40021000

08000550 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	22f8      	movs	r2, #248	; 0xf8
 800055e:	4393      	bics	r3, r2
 8000560:	0019      	movs	r1, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	00da      	lsls	r2, r3, #3
 8000566:	4b03      	ldr	r3, [pc, #12]	; (8000574 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000568:	430a      	orrs	r2, r1
 800056a:	601a      	str	r2, [r3, #0]
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b002      	add	sp, #8
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40021000 	.word	0x40021000

08000578 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <LL_RCC_SetSysClkSource+0x24>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	2203      	movs	r2, #3
 8000586:	4393      	bics	r3, r2
 8000588:	0019      	movs	r1, r3
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <LL_RCC_SetSysClkSource+0x24>)
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	430a      	orrs	r2, r1
 8000590:	605a      	str	r2, [r3, #4]
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b002      	add	sp, #8
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	40021000 	.word	0x40021000

080005a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <LL_RCC_GetSysClkSource+0x14>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	220c      	movs	r2, #12
 80005aa:	4013      	ands	r3, r2
}
 80005ac:	0018      	movs	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	40021000 	.word	0x40021000

080005b8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <LL_RCC_SetAHBPrescaler+0x24>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	22f0      	movs	r2, #240	; 0xf0
 80005c6:	4393      	bics	r3, r2
 80005c8:	0019      	movs	r1, r3
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <LL_RCC_SetAHBPrescaler+0x24>)
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	430a      	orrs	r2, r1
 80005d0:	605a      	str	r2, [r3, #4]
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40021000 	.word	0x40021000

080005e0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <LL_RCC_SetAPB1Prescaler+0x28>)
 80005ee:	4013      	ands	r3, r2
 80005f0:	0019      	movs	r1, r3
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	430a      	orrs	r2, r1
 80005f8:	605a      	str	r2, [r3, #4]
}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b002      	add	sp, #8
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	40021000 	.word	0x40021000
 8000608:	fffff8ff 	.word	0xfffff8ff

0800060c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <LL_RCC_SetUSARTClockSource+0x30>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	0e12      	lsrs	r2, r2, #24
 800061c:	2103      	movs	r1, #3
 800061e:	4091      	lsls	r1, r2
 8000620:	000a      	movs	r2, r1
 8000622:	43d2      	mvns	r2, r2
 8000624:	401a      	ands	r2, r3
 8000626:	0011      	movs	r1, r2
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	021b      	lsls	r3, r3, #8
 800062c:	0a1a      	lsrs	r2, r3, #8
 800062e:	4b03      	ldr	r3, [pc, #12]	; (800063c <LL_RCC_SetUSARTClockSource+0x30>)
 8000630:	430a      	orrs	r2, r1
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b002      	add	sp, #8
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000

08000640 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <LL_RCC_PLL_Enable+0x18>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <LL_RCC_PLL_Enable+0x18>)
 800064a:	2180      	movs	r1, #128	; 0x80
 800064c:	0449      	lsls	r1, r1, #17
 800064e:	430a      	orrs	r2, r1
 8000650:	601a      	str	r2, [r3, #0]
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000

0800065c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <LL_RCC_PLL_IsReady+0x24>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	049b      	lsls	r3, r3, #18
 8000668:	4013      	ands	r3, r2
 800066a:	22fe      	movs	r2, #254	; 0xfe
 800066c:	0612      	lsls	r2, r2, #24
 800066e:	4694      	mov	ip, r2
 8000670:	4463      	add	r3, ip
 8000672:	425a      	negs	r2, r3
 8000674:	4153      	adcs	r3, r2
 8000676:	b2db      	uxtb	r3, r3
}
 8000678:	0018      	movs	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	40021000 	.word	0x40021000

08000684 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 8000696:	4013      	ands	r3, r2
 8000698:	0019      	movs	r1, r3
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	431a      	orrs	r2, r3
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80006a2:	430a      	orrs	r2, r1
 80006a4:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	220f      	movs	r2, #15
 80006ac:	4393      	bics	r3, r2
 80006ae:	0019      	movs	r1, r3
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	430a      	orrs	r2, r1
 80006b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b004      	add	sp, #16
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	ffc27fff 	.word	0xffc27fff

080006c8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <LL_APB1_GRP1_EnableClock+0x28>)
 80006d2:	69d9      	ldr	r1, [r3, #28]
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <LL_APB1_GRP1_EnableClock+0x28>)
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	430a      	orrs	r2, r1
 80006da:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80006dc:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <LL_APB1_GRP1_EnableClock+0x28>)
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	4013      	ands	r3, r2
 80006e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006e6:	68fb      	ldr	r3, [r7, #12]
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b004      	add	sp, #16
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000

080006f4 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <LL_APB1_GRP2_EnableClock+0x28>)
 80006fe:	6999      	ldr	r1, [r3, #24]
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <LL_APB1_GRP2_EnableClock+0x28>)
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	430a      	orrs	r2, r1
 8000706:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <LL_APB1_GRP2_EnableClock+0x28>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4013      	ands	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000712:	68fb      	ldr	r3, [r7, #12]
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b004      	add	sp, #16
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000

08000720 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <LL_FLASH_SetLatency+0x24>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2201      	movs	r2, #1
 800072e:	4393      	bics	r3, r2
 8000730:	0019      	movs	r1, r3
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <LL_FLASH_SetLatency+0x24>)
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	430a      	orrs	r2, r1
 8000738:	601a      	str	r2, [r3, #0]
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40022000 	.word	0x40022000

08000748 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <LL_FLASH_GetLatency+0x14>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2201      	movs	r2, #1
 8000752:	4013      	ands	r3, r2
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	40022000 	.word	0x40022000

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8000766:	2001      	movs	r0, #1
 8000768:	f7ff ffc4 	bl	80006f4 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	055b      	lsls	r3, r3, #21
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff ffa9 	bl	80006c8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 f82f 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077a:	f7ff fe65 	bl	8000448 <MX_GPIO_Init>
  MX_TIM2_Init();
 800077e:	f000 fb46 	bl	8000e0e <MX_TIM2_Init>
  MX_TIM6_Init();
 8000782:	f000 fbd3 	bl	8000f2c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000786:	f000 ff1d 	bl	80015c4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800078a:	f000 ffa1 	bl	80016d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_init();
 800078e:	f001 f909 	bl	80019a4 <uart_init>
  tim_init();
 8000792:	f000 fc23 	bl	8000fdc <tim_init>
  gpio_init();
 8000796:	f7ff fea3 	bl	80004e0 <gpio_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("===== This is LL basic =====\r\n");
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <main+0x70>)
 800079c:	0018      	movs	r0, r3
 800079e:	f002 fbdd 	bl	8002f5c <puts>
  uint16_t time_delay = 0;
 80007a2:	1dbb      	adds	r3, r7, #6
 80007a4:	2200      	movs	r2, #0
 80007a6:	801a      	strh	r2, [r3, #0]
  while (1)
  {
	  uart_idle();
 80007a8:	f001 f874 	bl	8001894 <uart_idle>
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    printf("time %d s \r\n", time_delay++);
 80007ac:	1dbb      	adds	r3, r7, #6
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	1dba      	adds	r2, r7, #6
 80007b2:	1c59      	adds	r1, r3, #1
 80007b4:	8011      	strh	r1, [r2, #0]
 80007b6:	001a      	movs	r2, r3
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <main+0x74>)
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 fb2d 	bl	8002e1c <iprintf>
    tim_delay_ms(1000);
 80007c2:	23fa      	movs	r3, #250	; 0xfa
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fc22 	bl	8001010 <tim_delay_ms>
	  uart_idle();
 80007cc:	e7ec      	b.n	80007a8 <main+0x48>
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	08004150 	.word	0x08004150
 80007d4:	08004170 	.word	0x08004170

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff9f 	bl	8000720 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	f7ff ffb0 	bl	8000748 <LL_FLASH_GetLatency>
 80007e8:	0003      	movs	r3, r0
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d1fa      	bne.n	80007e4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80007ee:	f7ff fe91 	bl	8000514 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	f7ff fe9c 	bl	8000530 <LL_RCC_HSI_IsReady>
 80007f8:	0003      	movs	r3, r0
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d1fa      	bne.n	80007f4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80007fe:	2010      	movs	r0, #16
 8000800:	f7ff fea6 	bl	8000550 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_12, LL_RCC_PREDIV_DIV_2);
 8000804:	23a0      	movs	r3, #160	; 0xa0
 8000806:	0399      	lsls	r1, r3, #14
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	021b      	lsls	r3, r3, #8
 800080c:	2201      	movs	r2, #1
 800080e:	0018      	movs	r0, r3
 8000810:	f7ff ff38 	bl	8000684 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000814:	f7ff ff14 	bl	8000640 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	f7ff ff1f 	bl	800065c <LL_RCC_PLL_IsReady>
 800081e:	0003      	movs	r3, r0
 8000820:	2b01      	cmp	r3, #1
 8000822:	d1fa      	bne.n	800081a <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff fec7 	bl	80005b8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff fed8 	bl	80005e0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000830:	2002      	movs	r0, #2
 8000832:	f7ff fea1 	bl	8000578 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	f7ff feb2 	bl	80005a0 <LL_RCC_GetSysClkSource>
 800083c:	0003      	movs	r3, r0
 800083e:	2b08      	cmp	r3, #8
 8000840:	d1fa      	bne.n	8000838 <SystemClock_Config+0x60>
  {

  }
  LL_Init1msTick(48000000);
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <SystemClock_Config+0x90>)
 8000844:	0018      	movs	r0, r3
 8000846:	f002 fa99 	bl	8002d7c <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <SystemClock_Config+0x90>)
 800084c:	0018      	movs	r0, r3
 800084e:	f002 faa5 	bl	8002d9c <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8000852:	2000      	movs	r0, #0
 8000854:	f7ff feda 	bl	800060c <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	055b      	lsls	r3, r3, #21
 800085c:	0018      	movs	r0, r3
 800085e:	f7ff fed5 	bl	800060c <LL_RCC_SetUSARTClockSource>
}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	02dc6c00 	.word	0x02dc6c00

0800086c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <LL_EXTI_IsActiveFlag_0_31+0x24>)
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4013      	ands	r3, r2
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	425a      	negs	r2, r3
 8000882:	4153      	adcs	r3, r2
 8000884:	b2db      	uxtb	r3, r3
}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40010400 	.word	0x40010400

08000894 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <LL_EXTI_ClearFlag_0_31+0x18>)
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	615a      	str	r2, [r3, #20]
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b002      	add	sp, #8
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	40010400 	.word	0x40010400

080008b0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2202      	movs	r2, #2
 80008bc:	4252      	negs	r2, r2
 80008be:	611a      	str	r2, [r3, #16]
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b002      	add	sp, #8
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	2201      	movs	r2, #1
 80008d6:	4013      	ands	r3, r2
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d101      	bne.n	80008e0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80008dc:	2301      	movs	r3, #1
 80008de:	e000      	b.n	80008e2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	0018      	movs	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}

080008ea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <NMI_Handler+0x4>

080008f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <HardFault_Handler+0x4>

080008f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	019b      	lsls	r3, r3, #6
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff ffa5 	bl	800086c <LL_EXTI_IsActiveFlag_0_31>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d009      	beq.n	800093a <EXTI4_15_IRQHandler+0x26>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	019b      	lsls	r3, r3, #6
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff ffb2 	bl	8000894 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    gpio_irq_callback(LL_EXTI_LINE_13);
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	019b      	lsls	r3, r3, #6
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff fddd 	bl	80004f4 <gpio_irq_callback>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  if(LL_TIM_IsActiveFlag_UPDATE(TIM6))
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <TIM6_DAC_IRQHandler+0x28>)
 8000952:	0018      	movs	r0, r3
 8000954:	f7ff ffb8 	bl	80008c8 <LL_TIM_IsActiveFlag_UPDATE>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d007      	beq.n	800096c <TIM6_DAC_IRQHandler+0x20>
  {
    tim_irq_callback(TIM6);
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <TIM6_DAC_IRQHandler+0x28>)
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fb6e 	bl	8001040 <tim_irq_callback>
    LL_TIM_ClearFlag_UPDATE(TIM6);
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <TIM6_DAC_IRQHandler+0x28>)
 8000966:	0018      	movs	r0, r3
 8000968:	f7ff ffa2 	bl	80008b0 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	40001000 	.word	0x40001000

08000978 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uart_irq_rx_callback(USART1);
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <USART1_IRQHandler+0x14>)
 800097e:	0018      	movs	r0, r3
 8000980:	f001 f862 	bl	8001a48 <uart_irq_rx_callback>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	40013800 	.word	0x40013800

08000990 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  uart_irq_rx_callback(USART2);
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <USART2_IRQHandler+0x14>)
 8000996:	0018      	movs	r0, r3
 8000998:	f001 f856 	bl	8001a48 <uart_irq_rx_callback>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40004400 	.word	0x40004400

080009a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	e00a      	b.n	80009d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ba:	e000      	b.n	80009be <_read+0x16>
 80009bc:	bf00      	nop
 80009be:	0001      	movs	r1, r0
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	60ba      	str	r2, [r7, #8]
 80009c6:	b2ca      	uxtb	r2, r1
 80009c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf0      	blt.n	80009ba <_read+0x12>
	}

return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	0018      	movs	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	b006      	add	sp, #24
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
	return -1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	425b      	negs	r3, r3
}
 80009ee:	0018      	movs	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b002      	add	sp, #8
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	0192      	lsls	r2, r2, #6
 8000a06:	605a      	str	r2, [r3, #4]
	return 0;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_isatty>:

int _isatty(int file)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
	return 1;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	0018      	movs	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b004      	add	sp, #16
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a44:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <_sbrk+0x5c>)
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <_sbrk+0x60>)
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <_sbrk+0x64>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <_sbrk+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	18d3      	adds	r3, r2, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d207      	bcs.n	8000a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a6c:	f002 f9a4 	bl	8002db8 <__errno>
 8000a70:	0003      	movs	r3, r0
 8000a72:	220c      	movs	r2, #12
 8000a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	425b      	negs	r3, r3
 8000a7a:	e009      	b.n	8000a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	18d2      	adds	r2, r2, r3
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <_sbrk+0x64>)
 8000a8c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b006      	add	sp, #24
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20008000 	.word	0x20008000
 8000a9c:	00000400 	.word	0x00000400
 8000aa0:	20000084 	.word	0x20000084
 8000aa4:	200003b0 	.word	0x200003b0

08000aa8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <__NVIC_EnableIRQ>:
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	0002      	movs	r2, r0
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac6:	d809      	bhi.n	8000adc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	001a      	movs	r2, r3
 8000ace:	231f      	movs	r3, #31
 8000ad0:	401a      	ands	r2, r3
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_EnableIRQ+0x30>)
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4091      	lsls	r1, r2
 8000ad8:	000a      	movs	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b002      	add	sp, #8
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <__NVIC_SetPriority>:
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	0002      	movs	r2, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b7f      	cmp	r3, #127	; 0x7f
 8000afc:	d828      	bhi.n	8000b50 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000afe:	4a2f      	ldr	r2, [pc, #188]	; (8000bbc <__NVIC_SetPriority+0xd4>)
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b25b      	sxtb	r3, r3
 8000b06:	089b      	lsrs	r3, r3, #2
 8000b08:	33c0      	adds	r3, #192	; 0xc0
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	589b      	ldr	r3, [r3, r2]
 8000b0e:	1dfa      	adds	r2, r7, #7
 8000b10:	7812      	ldrb	r2, [r2, #0]
 8000b12:	0011      	movs	r1, r2
 8000b14:	2203      	movs	r2, #3
 8000b16:	400a      	ands	r2, r1
 8000b18:	00d2      	lsls	r2, r2, #3
 8000b1a:	21ff      	movs	r1, #255	; 0xff
 8000b1c:	4091      	lsls	r1, r2
 8000b1e:	000a      	movs	r2, r1
 8000b20:	43d2      	mvns	r2, r2
 8000b22:	401a      	ands	r2, r3
 8000b24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	019b      	lsls	r3, r3, #6
 8000b2a:	22ff      	movs	r2, #255	; 0xff
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	0018      	movs	r0, r3
 8000b34:	2303      	movs	r3, #3
 8000b36:	4003      	ands	r3, r0
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b3c:	481f      	ldr	r0, [pc, #124]	; (8000bbc <__NVIC_SetPriority+0xd4>)
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	430a      	orrs	r2, r1
 8000b48:	33c0      	adds	r3, #192	; 0xc0
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	501a      	str	r2, [r3, r0]
}
 8000b4e:	e031      	b.n	8000bb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b50:	4a1b      	ldr	r2, [pc, #108]	; (8000bc0 <__NVIC_SetPriority+0xd8>)
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	0019      	movs	r1, r3
 8000b58:	230f      	movs	r3, #15
 8000b5a:	400b      	ands	r3, r1
 8000b5c:	3b08      	subs	r3, #8
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	3306      	adds	r3, #6
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	18d3      	adds	r3, r2, r3
 8000b66:	3304      	adds	r3, #4
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	1dfa      	adds	r2, r7, #7
 8000b6c:	7812      	ldrb	r2, [r2, #0]
 8000b6e:	0011      	movs	r1, r2
 8000b70:	2203      	movs	r2, #3
 8000b72:	400a      	ands	r2, r1
 8000b74:	00d2      	lsls	r2, r2, #3
 8000b76:	21ff      	movs	r1, #255	; 0xff
 8000b78:	4091      	lsls	r1, r2
 8000b7a:	000a      	movs	r2, r1
 8000b7c:	43d2      	mvns	r2, r2
 8000b7e:	401a      	ands	r2, r3
 8000b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	019b      	lsls	r3, r3, #6
 8000b86:	22ff      	movs	r2, #255	; 0xff
 8000b88:	401a      	ands	r2, r3
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	0018      	movs	r0, r3
 8000b90:	2303      	movs	r3, #3
 8000b92:	4003      	ands	r3, r0
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <__NVIC_SetPriority+0xd8>)
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	001c      	movs	r4, r3
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	4023      	ands	r3, r4
 8000ba4:	3b08      	subs	r3, #8
 8000ba6:	089b      	lsrs	r3, r3, #2
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	3306      	adds	r3, #6
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	18c3      	adds	r3, r0, r3
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	601a      	str	r2, [r3, #0]
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b003      	add	sp, #12
 8000bba:	bd90      	pop	{r4, r7, pc}
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <LL_AHB1_GRP1_EnableClock>:
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <LL_AHB1_GRP1_EnableClock+0x28>)
 8000bce:	6959      	ldr	r1, [r3, #20]
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <LL_AHB1_GRP1_EnableClock+0x28>)
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <LL_AHB1_GRP1_EnableClock+0x28>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	4013      	ands	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b004      	add	sp, #16
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40021000 	.word	0x40021000

08000bf0 <LL_APB1_GRP1_EnableClock>:
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <LL_APB1_GRP1_EnableClock+0x28>)
 8000bfa:	69d9      	ldr	r1, [r3, #28]
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <LL_APB1_GRP1_EnableClock+0x28>)
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	430a      	orrs	r2, r1
 8000c02:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b004      	add	sp, #16
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40021000 	.word	0x40021000

08000c1c <LL_TIM_EnableCounter>:
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	601a      	str	r2, [r3, #0]
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b002      	add	sp, #8
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <LL_TIM_EnableARRPreload>:
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	431a      	orrs	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	601a      	str	r2, [r3, #0]
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b002      	add	sp, #8
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <LL_TIM_CC_EnableChannel>:
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a1a      	ldr	r2, [r3, #32]
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	431a      	orrs	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	621a      	str	r2, [r3, #32]
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <LL_TIM_OC_DisableFast>:
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d01e      	beq.n	8000cc2 <LL_TIM_OC_DisableFast+0x4e>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	d019      	beq.n	8000cbe <LL_TIM_OC_DisableFast+0x4a>
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	2b10      	cmp	r3, #16
 8000c8e:	d014      	beq.n	8000cba <LL_TIM_OC_DisableFast+0x46>
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	2b40      	cmp	r3, #64	; 0x40
 8000c94:	d00f      	beq.n	8000cb6 <LL_TIM_OC_DisableFast+0x42>
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d008      	beq.n	8000cb2 <LL_TIM_OC_DisableFast+0x3e>
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d101      	bne.n	8000cae <LL_TIM_OC_DisableFast+0x3a>
 8000caa:	2305      	movs	r3, #5
 8000cac:	e00a      	b.n	8000cc4 <LL_TIM_OC_DisableFast+0x50>
 8000cae:	2306      	movs	r3, #6
 8000cb0:	e008      	b.n	8000cc4 <LL_TIM_OC_DisableFast+0x50>
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	e006      	b.n	8000cc4 <LL_TIM_OC_DisableFast+0x50>
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e004      	b.n	8000cc4 <LL_TIM_OC_DisableFast+0x50>
 8000cba:	2302      	movs	r3, #2
 8000cbc:	e002      	b.n	8000cc4 <LL_TIM_OC_DisableFast+0x50>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <LL_TIM_OC_DisableFast+0x50>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	200f      	movs	r0, #15
 8000cc6:	183a      	adds	r2, r7, r0
 8000cc8:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3318      	adds	r3, #24
 8000cce:	0019      	movs	r1, r3
 8000cd0:	183b      	adds	r3, r7, r0
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <LL_TIM_OC_DisableFast+0x8c>)
 8000cd6:	5cd3      	ldrb	r3, [r2, r3]
 8000cd8:	18cb      	adds	r3, r1, r3
 8000cda:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	183a      	adds	r2, r7, r0
 8000ce2:	7812      	ldrb	r2, [r2, #0]
 8000ce4:	4907      	ldr	r1, [pc, #28]	; (8000d04 <LL_TIM_OC_DisableFast+0x90>)
 8000ce6:	5c8a      	ldrb	r2, [r1, r2]
 8000ce8:	0011      	movs	r1, r2
 8000cea:	2204      	movs	r2, #4
 8000cec:	408a      	lsls	r2, r1
 8000cee:	43d2      	mvns	r2, r2
 8000cf0:	401a      	ands	r2, r3
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	601a      	str	r2, [r3, #0]
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b004      	add	sp, #16
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	080041b4 	.word	0x080041b4
 8000d04:	080041bc 	.word	0x080041bc

08000d08 <LL_TIM_OC_EnablePreload>:
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d01e      	beq.n	8000d56 <LL_TIM_OC_EnablePreload+0x4e>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d019      	beq.n	8000d52 <LL_TIM_OC_EnablePreload+0x4a>
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	2b10      	cmp	r3, #16
 8000d22:	d014      	beq.n	8000d4e <LL_TIM_OC_EnablePreload+0x46>
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	2b40      	cmp	r3, #64	; 0x40
 8000d28:	d00f      	beq.n	8000d4a <LL_TIM_OC_EnablePreload+0x42>
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d008      	beq.n	8000d46 <LL_TIM_OC_EnablePreload+0x3e>
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d101      	bne.n	8000d42 <LL_TIM_OC_EnablePreload+0x3a>
 8000d3e:	2305      	movs	r3, #5
 8000d40:	e00a      	b.n	8000d58 <LL_TIM_OC_EnablePreload+0x50>
 8000d42:	2306      	movs	r3, #6
 8000d44:	e008      	b.n	8000d58 <LL_TIM_OC_EnablePreload+0x50>
 8000d46:	2304      	movs	r3, #4
 8000d48:	e006      	b.n	8000d58 <LL_TIM_OC_EnablePreload+0x50>
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e004      	b.n	8000d58 <LL_TIM_OC_EnablePreload+0x50>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e002      	b.n	8000d58 <LL_TIM_OC_EnablePreload+0x50>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <LL_TIM_OC_EnablePreload+0x50>
 8000d56:	2300      	movs	r3, #0
 8000d58:	200f      	movs	r0, #15
 8000d5a:	183a      	adds	r2, r7, r0
 8000d5c:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3318      	adds	r3, #24
 8000d62:	0019      	movs	r1, r3
 8000d64:	183b      	adds	r3, r7, r0
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <LL_TIM_OC_EnablePreload+0x88>)
 8000d6a:	5cd3      	ldrb	r3, [r2, r3]
 8000d6c:	18cb      	adds	r3, r1, r3
 8000d6e:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	183b      	adds	r3, r7, r0
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4906      	ldr	r1, [pc, #24]	; (8000d94 <LL_TIM_OC_EnablePreload+0x8c>)
 8000d7a:	5ccb      	ldrb	r3, [r1, r3]
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	2308      	movs	r3, #8
 8000d80:	408b      	lsls	r3, r1
 8000d82:	431a      	orrs	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	601a      	str	r2, [r3, #0]
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b004      	add	sp, #16
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	080041b4 	.word	0x080041b4
 8000d94:	080041bc 	.word	0x080041bc

08000d98 <LL_TIM_OC_SetCompareCH1>:
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b002      	add	sp, #8
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <LL_TIM_SetTriggerOutput>:
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2270      	movs	r2, #112	; 0x70
 8000dc0:	4393      	bics	r3, r2
 8000dc2:	001a      	movs	r2, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	605a      	str	r2, [r3, #4]
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b002      	add	sp, #8
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <LL_TIM_DisableMasterSlaveMode>:
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	4393      	bics	r3, r2
 8000de4:	001a      	movs	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	609a      	str	r2, [r3, #8]
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	431a      	orrs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60da      	str	r2, [r3, #12]
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <MX_TIM2_Init>:
static volatile uint16_t delay_time = 0;
/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e0e:	b5b0      	push	{r4, r5, r7, lr}
 8000e10:	b094      	sub	sp, #80	; 0x50
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e14:	253c      	movs	r5, #60	; 0x3c
 8000e16:	197b      	adds	r3, r7, r5
 8000e18:	0018      	movs	r0, r3
 8000e1a:	2314      	movs	r3, #20
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	f001 fff4 	bl	8002e0c <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000e24:	241c      	movs	r4, #28
 8000e26:	193b      	adds	r3, r7, r4
 8000e28:	0018      	movs	r0, r3
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	2100      	movs	r1, #0
 8000e30:	f001 ffec 	bl	8002e0c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	0018      	movs	r0, r3
 8000e38:	2318      	movs	r3, #24
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f001 ffe5 	bl	8002e0c <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000e42:	2001      	movs	r0, #1
 8000e44:	f7ff fed4 	bl	8000bf0 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, 0);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f7ff fe4c 	bl	8000ae8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000e50:	200f      	movs	r0, #15
 8000e52:	f7ff fe2f 	bl	8000ab4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 48;
 8000e56:	197b      	adds	r3, r7, r5
 8000e58:	2230      	movs	r2, #48	; 0x30
 8000e5a:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000e5c:	197b      	adds	r3, r7, r5
 8000e5e:	2200      	movs	r2, #0
 8000e60:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 1000;
 8000e62:	197b      	adds	r3, r7, r5
 8000e64:	22fa      	movs	r2, #250	; 0xfa
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000e6a:	197b      	adds	r3, r7, r5
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000e70:	197a      	adds	r2, r7, r5
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f001 fb4f 	bl	800251c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff fed8 	bl	8000c38 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	05db      	lsls	r3, r3, #23
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff ff3a 	bl	8000d08 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000e94:	0021      	movs	r1, r4
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2260      	movs	r2, #96	; 0x60
 8000e9a:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.CompareValue = 500;
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	22fa      	movs	r2, #250	; 0xfa
 8000eac:	0052      	lsls	r2, r2, #1
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000eb6:	187a      	adds	r2, r7, r1
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	05db      	lsls	r3, r3, #23
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f001 fbae 	bl	8002620 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	05db      	lsls	r3, r3, #23
 8000ec8:	2101      	movs	r1, #1
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff fed2 	bl	8000c74 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	05db      	lsls	r3, r3, #23
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff ff6a 	bl	8000db0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	05db      	lsls	r3, r3, #23
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff ff77 	bl	8000dd4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	029b      	lsls	r3, r3, #10
 8000eea:	0018      	movs	r0, r3
 8000eec:	f7ff fe6a 	bl	8000bc4 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2202      	movs	r2, #2
 8000efa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2202      	movs	r2, #2
 8000f12:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	1d3a      	adds	r2, r7, #4
 8000f16:	2390      	movs	r3, #144	; 0x90
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f001 f83f 	bl	8001fa0 <LL_GPIO_Init>

}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b014      	add	sp, #80	; 0x50
 8000f28:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000f2c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	0018      	movs	r0, r3
 8000f36:	2314      	movs	r3, #20
 8000f38:	001a      	movs	r2, r3
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	f001 ff66 	bl	8002e0c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8000f40:	2010      	movs	r0, #16
 8000f42:	f7ff fe55 	bl	8000bf0 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, 0);
 8000f46:	2100      	movs	r1, #0
 8000f48:	2011      	movs	r0, #17
 8000f4a:	f7ff fdcd 	bl	8000ae8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f4e:	2011      	movs	r0, #17
 8000f50:	f7ff fdb0 	bl	8000ab4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 48;
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2230      	movs	r2, #48	; 0x30
 8000f58:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 1000;
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	22fa      	movs	r2, #250	; 0xfa
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	609a      	str	r2, [r3, #8]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <MX_TIM6_Init+0x6c>)
 8000f6c:	0019      	movs	r1, r3
 8000f6e:	0010      	movs	r0, r2
 8000f70:	f001 fad4 	bl	800251c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM6);
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_TIM6_Init+0x6c>)
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff fe5e 	bl	8000c38 <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_TIM6_Init+0x6c>)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff ff15 	bl	8000db0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <MX_TIM6_Init+0x6c>)
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff ff23 	bl	8000dd4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b006      	add	sp, #24
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	40001000 	.word	0x40001000

08000f9c <tim_set_duty>:

/* USER CODE BEGIN 1 */

static volatile uint8_t duty = 0;
void tim_set_duty(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  if (duty++ >= 5)
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <tim_set_duty+0x3c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	b2d1      	uxtb	r1, r2
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <tim_set_duty+0x3c>)
 8000fac:	7011      	strb	r1, [r2, #0]
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d902      	bls.n	8000fb8 <tim_set_duty+0x1c>
  {
    duty = 0;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <tim_set_duty+0x3c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
  }
  LL_TIM_OC_SetCompareCH1(TIM2, 200*duty);
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <tim_set_duty+0x3c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	23c8      	movs	r3, #200	; 0xc8
 8000fc2:	4353      	muls	r3, r2
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	05db      	lsls	r3, r3, #23
 8000fca:	0011      	movs	r1, r2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff fee3 	bl	8000d98 <LL_TIM_OC_SetCompareCH1>
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000008a 	.word	0x2000008a

08000fdc <tim_init>:

void tim_init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  LL_TIM_EnableIT_UPDATE(TIM6);
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <tim_init+0x30>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff ff05 	bl	8000df2 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <tim_init+0x30>)
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff fe16 	bl	8000c1c <LL_TIM_EnableCounter>
  
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	05db      	lsls	r3, r3, #23
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff fe2c 	bl	8000c54 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	05db      	lsls	r3, r3, #23
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff fe0b 	bl	8000c1c <LL_TIM_EnableCounter>
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40001000 	.word	0x40001000

08001010 <tim_delay_ms>:

void tim_delay_ms(uint16_t delay_ms)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	0002      	movs	r2, r0
 8001018:	1dbb      	adds	r3, r7, #6
 800101a:	801a      	strh	r2, [r3, #0]
  delay_time = 0;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <tim_delay_ms+0x2c>)
 800101e:	2200      	movs	r2, #0
 8001020:	801a      	strh	r2, [r3, #0]
  while (delay_ms > delay_time);
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <tim_delay_ms+0x2c>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	b29b      	uxth	r3, r3
 800102a:	1dba      	adds	r2, r7, #6
 800102c:	8812      	ldrh	r2, [r2, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d8f8      	bhi.n	8001024 <tim_delay_ms+0x14>
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000088 	.word	0x20000088

08001040 <tim_irq_callback>:

void tim_irq_callback(TIM_TypeDef *TIMx)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if (TIMx == TIM6)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a07      	ldr	r2, [pc, #28]	; (8001068 <tim_irq_callback+0x28>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d106      	bne.n	800105e <tim_irq_callback+0x1e>
  {
    // 1ms
    delay_time++;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <tim_irq_callback+0x2c>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	b29b      	uxth	r3, r3
 8001056:	3301      	adds	r3, #1
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <tim_irq_callback+0x2c>)
 800105c:	801a      	strh	r2, [r3, #0]
  }
}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b002      	add	sp, #8
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	40001000 	.word	0x40001000
 800106c:	20000088 	.word	0x20000088

08001070 <__NVIC_EnableIRQ>:
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	0002      	movs	r2, r0
 8001078:	1dfb      	adds	r3, r7, #7
 800107a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800107c:	1dfb      	adds	r3, r7, #7
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b7f      	cmp	r3, #127	; 0x7f
 8001082:	d809      	bhi.n	8001098 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	001a      	movs	r2, r3
 800108a:	231f      	movs	r3, #31
 800108c:	401a      	ands	r2, r3
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_EnableIRQ+0x30>)
 8001090:	2101      	movs	r1, #1
 8001092:	4091      	lsls	r1, r2
 8001094:	000a      	movs	r2, r1
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b002      	add	sp, #8
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	e000e100 	.word	0xe000e100

080010a4 <__NVIC_SetPriority>:
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	0002      	movs	r2, r0
 80010ac:	6039      	str	r1, [r7, #0]
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b7f      	cmp	r3, #127	; 0x7f
 80010b8:	d828      	bhi.n	800110c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ba:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <__NVIC_SetPriority+0xd4>)
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	33c0      	adds	r3, #192	; 0xc0
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	589b      	ldr	r3, [r3, r2]
 80010ca:	1dfa      	adds	r2, r7, #7
 80010cc:	7812      	ldrb	r2, [r2, #0]
 80010ce:	0011      	movs	r1, r2
 80010d0:	2203      	movs	r2, #3
 80010d2:	400a      	ands	r2, r1
 80010d4:	00d2      	lsls	r2, r2, #3
 80010d6:	21ff      	movs	r1, #255	; 0xff
 80010d8:	4091      	lsls	r1, r2
 80010da:	000a      	movs	r2, r1
 80010dc:	43d2      	mvns	r2, r2
 80010de:	401a      	ands	r2, r3
 80010e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	019b      	lsls	r3, r3, #6
 80010e6:	22ff      	movs	r2, #255	; 0xff
 80010e8:	401a      	ands	r2, r3
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	0018      	movs	r0, r3
 80010f0:	2303      	movs	r3, #3
 80010f2:	4003      	ands	r3, r0
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f8:	481f      	ldr	r0, [pc, #124]	; (8001178 <__NVIC_SetPriority+0xd4>)
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	430a      	orrs	r2, r1
 8001104:	33c0      	adds	r3, #192	; 0xc0
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	501a      	str	r2, [r3, r0]
}
 800110a:	e031      	b.n	8001170 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800110c:	4a1b      	ldr	r2, [pc, #108]	; (800117c <__NVIC_SetPriority+0xd8>)
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	0019      	movs	r1, r3
 8001114:	230f      	movs	r3, #15
 8001116:	400b      	ands	r3, r1
 8001118:	3b08      	subs	r3, #8
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3306      	adds	r3, #6
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	18d3      	adds	r3, r2, r3
 8001122:	3304      	adds	r3, #4
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	1dfa      	adds	r2, r7, #7
 8001128:	7812      	ldrb	r2, [r2, #0]
 800112a:	0011      	movs	r1, r2
 800112c:	2203      	movs	r2, #3
 800112e:	400a      	ands	r2, r1
 8001130:	00d2      	lsls	r2, r2, #3
 8001132:	21ff      	movs	r1, #255	; 0xff
 8001134:	4091      	lsls	r1, r2
 8001136:	000a      	movs	r2, r1
 8001138:	43d2      	mvns	r2, r2
 800113a:	401a      	ands	r2, r3
 800113c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	019b      	lsls	r3, r3, #6
 8001142:	22ff      	movs	r2, #255	; 0xff
 8001144:	401a      	ands	r2, r3
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	0018      	movs	r0, r3
 800114c:	2303      	movs	r3, #3
 800114e:	4003      	ands	r3, r0
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001154:	4809      	ldr	r0, [pc, #36]	; (800117c <__NVIC_SetPriority+0xd8>)
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	001c      	movs	r4, r3
 800115c:	230f      	movs	r3, #15
 800115e:	4023      	ands	r3, r4
 8001160:	3b08      	subs	r3, #8
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	430a      	orrs	r2, r1
 8001166:	3306      	adds	r3, #6
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	18c3      	adds	r3, r0, r3
 800116c:	3304      	adds	r3, #4
 800116e:	601a      	str	r2, [r3, #0]
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b003      	add	sp, #12
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <LL_AHB1_GRP1_EnableClock>:
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <LL_AHB1_GRP1_EnableClock+0x28>)
 800118a:	6959      	ldr	r1, [r3, #20]
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <LL_AHB1_GRP1_EnableClock+0x28>)
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	430a      	orrs	r2, r1
 8001192:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4013      	ands	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b004      	add	sp, #16
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000

080011ac <LL_APB1_GRP1_EnableClock>:
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <LL_APB1_GRP1_EnableClock+0x28>)
 80011b6:	69d9      	ldr	r1, [r3, #28]
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <LL_APB1_GRP1_EnableClock+0x28>)
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	430a      	orrs	r2, r1
 80011be:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <LL_APB1_GRP1_EnableClock+0x28>)
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	4013      	ands	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b004      	add	sp, #16
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000

080011d8 <LL_APB1_GRP2_EnableClock>:
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <LL_APB1_GRP2_EnableClock+0x28>)
 80011e2:	6999      	ldr	r1, [r3, #24]
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <LL_APB1_GRP2_EnableClock+0x28>)
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <LL_APB1_GRP2_EnableClock+0x28>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4013      	ands	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b004      	add	sp, #16
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000

08001204 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2201      	movs	r2, #1
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	601a      	str	r2, [r3, #0]
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}

08001220 <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2201      	movs	r2, #1
 800122e:	4393      	bics	r3, r2
 8001230:	001a      	movs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	601a      	str	r2, [r3, #0]
}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	b002      	add	sp, #8
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  - LINEN (if LIN feature is supported), CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard feature is supported), IREN (if Irda feature is supported)
    and HDSEL bits in the USART_CR3 register.
  */
#if defined(USART_LIN_SUPPORT)
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <LL_USART_ConfigAsyncMode+0x2c>)
 800124e:	401a      	ands	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
#endif /* USART_LIN_SUPPORT */
#if defined(USART_SMARTCARD_SUPPORT)
#if defined(USART_IRDA_SUPPORT)
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	222a      	movs	r2, #42	; 0x2a
 800125a:	4393      	bics	r3, r2
 800125c:	001a      	movs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
#else
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
#endif /* USART_IRDA_SUPPORT */
#endif /* USART_SMARTCARD_SUPPORT */
}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b002      	add	sp, #8
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	ffffb7ff 	.word	0xffffb7ff

08001270 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	2202      	movs	r2, #2
 800127e:	4013      	ands	r3, r2
 8001280:	2b02      	cmp	r3, #2
 8001282:	d101      	bne.n	8001288 <LL_USART_IsActiveFlag_FE+0x18>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <LL_USART_IsActiveFlag_FE+0x1a>
 8001288:	2300      	movs	r3, #0
}
 800128a:	0018      	movs	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	b002      	add	sp, #8
 8001290:	bd80      	pop	{r7, pc}

08001292 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	2204      	movs	r2, #4
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d101      	bne.n	80012aa <LL_USART_IsActiveFlag_NE+0x18>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <LL_USART_IsActiveFlag_NE+0x1a>
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	2208      	movs	r2, #8
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d101      	bne.n	80012cc <LL_USART_IsActiveFlag_ORE+0x18>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <LL_USART_IsActiveFlag_ORE+0x1a>
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b002      	add	sp, #8
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	2210      	movs	r2, #16
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b10      	cmp	r3, #16
 80012e8:	d101      	bne.n	80012ee <LL_USART_IsActiveFlag_IDLE+0x18>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <LL_USART_IsActiveFlag_IDLE+0x1a>
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	0018      	movs	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b002      	add	sp, #8
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	2220      	movs	r2, #32
 8001306:	4013      	ands	r3, r2
 8001308:	2b20      	cmp	r3, #32
 800130a:	d101      	bne.n	8001310 <LL_USART_IsActiveFlag_RXNE+0x18>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001310:	2300      	movs	r3, #0
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bd80      	pop	{r7, pc}

0800131a <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	2240      	movs	r2, #64	; 0x40
 8001328:	4013      	ands	r3, r2
 800132a:	2b40      	cmp	r3, #64	; 0x40
 800132c:	d101      	bne.n	8001332 <LL_USART_IsActiveFlag_TC+0x18>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <LL_USART_IsActiveFlag_TC+0x1a>
 8001332:	2300      	movs	r3, #0
}
 8001334:	0018      	movs	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}

0800133c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	4013      	ands	r3, r2
 800134c:	2b80      	cmp	r3, #128	; 0x80
 800134e:	d101      	bne.n	8001354 <LL_USART_IsActiveFlag_TXE+0x18>
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <LL_USART_IsActiveFlag_TXE+0x1a>
 8001354:	2300      	movs	r3, #0
}
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	b002      	add	sp, #8
 800135c:	bd80      	pop	{r7, pc}

0800135e <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2202      	movs	r2, #2
 800136a:	621a      	str	r2, [r3, #32]
}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b002      	add	sp, #8
 8001372:	bd80      	pop	{r7, pc}

08001374 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NCF           LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	621a      	str	r2, [r3, #32]
}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	b002      	add	sp, #8
 8001388:	bd80      	pop	{r7, pc}

0800138a <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2208      	movs	r2, #8
 8001396:	621a      	str	r2, [r3, #32]
}
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	b002      	add	sp, #8
 800139e:	bd80      	pop	{r7, pc}

080013a0 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2210      	movs	r2, #16
 80013ac:	621a      	str	r2, [r3, #32]
}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b002      	add	sp, #8
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2240      	movs	r2, #64	; 0x40
 80013c2:	621a      	str	r2, [r3, #32]
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}

080013cc <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013d4:	f3ef 8310 	mrs	r3, PRIMASK
 80013d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80013da:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	2301      	movs	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f383 8810 	msr	PRIMASK, r3
}
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2210      	movs	r2, #16
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f383 8810 	msr	PRIMASK, r3
}
 8001400:	46c0      	nop			; (mov r8, r8)
}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b006      	add	sp, #24
 8001408:	bd80      	pop	{r7, pc}

0800140a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001412:	f3ef 8310 	mrs	r3, PRIMASK
 8001416:	60bb      	str	r3, [r7, #8]
  return(result);
 8001418:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	2301      	movs	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f383 8810 	msr	PRIMASK, r3
}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2220      	movs	r2, #32
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	f383 8810 	msr	PRIMASK, r3
}
 800143e:	46c0      	nop			; (mov r8, r8)
}
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b006      	add	sp, #24
 8001446:	bd80      	pop	{r7, pc}

08001448 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001450:	f3ef 8310 	mrs	r3, PRIMASK
 8001454:	60bb      	str	r3, [r7, #8]
  return(result);
 8001456:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	2301      	movs	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f383 8810 	msr	PRIMASK, r3
}
 8001464:	46c0      	nop			; (mov r8, r8)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2201      	movs	r2, #1
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	f383 8810 	msr	PRIMASK, r3
}
 800147c:	46c0      	nop			; (mov r8, r8)
}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b006      	add	sp, #24
 8001484:	bd80      	pop	{r7, pc}

08001486 <LL_USART_DisableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800148e:	f3ef 8310 	mrs	r3, PRIMASK
 8001492:	60bb      	str	r3, [r7, #8]
  return(result);
 8001494:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	2301      	movs	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f383 8810 	msr	PRIMASK, r3
}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2210      	movs	r2, #16
 80014aa:	4393      	bics	r3, r2
 80014ac:	001a      	movs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	f383 8810 	msr	PRIMASK, r3
}
 80014bc:	46c0      	nop			; (mov r8, r8)
}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b006      	add	sp, #24
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014ce:	f3ef 8310 	mrs	r3, PRIMASK
 80014d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80014d4:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	2301      	movs	r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f383 8810 	msr	PRIMASK, r3
}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2220      	movs	r2, #32
 80014ea:	4393      	bics	r3, r2
 80014ec:	001a      	movs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	f383 8810 	msr	PRIMASK, r3
}
 80014fc:	46c0      	nop			; (mov r8, r8)
}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	b006      	add	sp, #24
 8001504:	bd80      	pop	{r7, pc}

08001506 <LL_USART_DisableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800150e:	f3ef 8310 	mrs	r3, PRIMASK
 8001512:	60bb      	str	r3, [r7, #8]
  return(result);
 8001514:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	2301      	movs	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f383 8810 	msr	PRIMASK, r3
}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2201      	movs	r2, #1
 800152a:	4393      	bics	r3, r2
 800152c:	001a      	movs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	f383 8810 	msr	PRIMASK, r3
}
 800153c:	46c0      	nop			; (mov r8, r8)
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b006      	add	sp, #24
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001550:	f3ef 8310 	mrs	r3, PRIMASK
 8001554:	60bb      	str	r3, [r7, #8]
  return(result);
 8001556:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	2301      	movs	r3, #1
 800155c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f383 8810 	msr	PRIMASK, r3
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	4a07      	ldr	r2, [pc, #28]	; (8001588 <LL_USART_DisableIT_CTS+0x40>)
 800156c:	401a      	ands	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f383 8810 	msr	PRIMASK, r3
}
 800157c:	46c0      	nop			; (mov r8, r8)
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b006      	add	sp, #24
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	fffffbff 	.word	0xfffffbff

0800158c <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001598:	b29b      	uxth	r3, r3
 800159a:	b2db      	uxtb	r3, r3
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	b002      	add	sp, #8
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	000a      	movs	r2, r1
 80015ae:	1cfb      	adds	r3, r7, #3
 80015b0:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 80015b2:	1cfb      	adds	r3, r7, #3
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b002      	add	sp, #8
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b08f      	sub	sp, #60	; 0x3c
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80015ca:	241c      	movs	r4, #28
 80015cc:	193b      	adds	r3, r7, r4
 80015ce:	0018      	movs	r0, r3
 80015d0:	231c      	movs	r3, #28
 80015d2:	001a      	movs	r2, r3
 80015d4:	2100      	movs	r1, #0
 80015d6:	f001 fc19 	bl	8002e0c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	0018      	movs	r0, r3
 80015de:	2318      	movs	r3, #24
 80015e0:	001a      	movs	r2, r3
 80015e2:	2100      	movs	r1, #0
 80015e4:	f001 fc12 	bl	8002e0c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	01db      	lsls	r3, r3, #7
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7ff fdf3 	bl	80011d8 <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	029b      	lsls	r3, r3, #10
 80015f6:	0018      	movs	r0, r3
 80015f8:	f7ff fdc2 	bl	8001180 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2280      	movs	r2, #128	; 0x80
 8001600:	0092      	lsls	r2, r2, #2
 8001602:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2202      	movs	r2, #2
 8001608:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2203      	movs	r2, #3
 800160e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2201      	movs	r2, #1
 8001620:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	1d3a      	adds	r2, r7, #4
 8001624:	2390      	movs	r3, #144	; 0x90
 8001626:	05db      	lsls	r3, r3, #23
 8001628:	0011      	movs	r1, r2
 800162a:	0018      	movs	r0, r3
 800162c:	f000 fcb8 	bl	8001fa0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	00d2      	lsls	r2, r2, #3
 8001636:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2202      	movs	r2, #2
 800163c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2203      	movs	r2, #3
 8001642:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2201      	movs	r2, #1
 8001654:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	1d3a      	adds	r2, r7, #4
 8001658:	2390      	movs	r3, #144	; 0x90
 800165a:	05db      	lsls	r3, r3, #23
 800165c:	0011      	movs	r1, r2
 800165e:	0018      	movs	r0, r3
 8001660:	f000 fc9e 	bl	8001fa0 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 8001664:	2100      	movs	r1, #0
 8001666:	201b      	movs	r0, #27
 8001668:	f7ff fd1c 	bl	80010a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800166c:	201b      	movs	r0, #27
 800166e:	f7ff fcff 	bl	8001070 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001672:	193b      	adds	r3, r7, r4
 8001674:	22e1      	movs	r2, #225	; 0xe1
 8001676:	0252      	lsls	r2, r2, #9
 8001678:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800167a:	0021      	movs	r1, r4
 800167c:	187b      	adds	r3, r7, r1
 800167e:	2200      	movs	r2, #0
 8001680:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001682:	187b      	adds	r3, r7, r1
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001688:	187b      	adds	r3, r7, r1
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800168e:	187b      	adds	r3, r7, r1
 8001690:	220c      	movs	r2, #12
 8001692:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001694:	187b      	adds	r3, r7, r1
 8001696:	2200      	movs	r2, #0
 8001698:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <MX_USART1_UART_Init+0x108>)
 80016a4:	0019      	movs	r1, r3
 80016a6:	0010      	movs	r0, r2
 80016a8:	f001 fa92 	bl	8002bd0 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <MX_USART1_UART_Init+0x108>)
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7ff ff4a 	bl	8001548 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <MX_USART1_UART_Init+0x108>)
 80016b6:	0018      	movs	r0, r3
 80016b8:	f7ff fdc2 	bl	8001240 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <MX_USART1_UART_Init+0x108>)
 80016be:	0018      	movs	r0, r3
 80016c0:	f7ff fda0 	bl	8001204 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b00f      	add	sp, #60	; 0x3c
 80016ca:	bd90      	pop	{r4, r7, pc}
 80016cc:	40013800 	.word	0x40013800

080016d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b08f      	sub	sp, #60	; 0x3c
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80016d6:	241c      	movs	r4, #28
 80016d8:	193b      	adds	r3, r7, r4
 80016da:	0018      	movs	r0, r3
 80016dc:	231c      	movs	r3, #28
 80016de:	001a      	movs	r2, r3
 80016e0:	2100      	movs	r1, #0
 80016e2:	f001 fb93 	bl	8002e0c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	0018      	movs	r0, r3
 80016ea:	2318      	movs	r3, #24
 80016ec:	001a      	movs	r2, r3
 80016ee:	2100      	movs	r1, #0
 80016f0:	f001 fb8c 	bl	8002e0c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	029b      	lsls	r3, r3, #10
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff fd57 	bl	80011ac <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	029b      	lsls	r3, r3, #10
 8001702:	0018      	movs	r0, r3
 8001704:	f7ff fd3c 	bl	8001180 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2204      	movs	r2, #4
 800170c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2202      	movs	r2, #2
 8001712:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2201      	movs	r2, #1
 800172a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 800172c:	1d3a      	adds	r2, r7, #4
 800172e:	2390      	movs	r3, #144	; 0x90
 8001730:	05db      	lsls	r3, r3, #23
 8001732:	0011      	movs	r1, r2
 8001734:	0018      	movs	r0, r3
 8001736:	f000 fc33 	bl	8001fa0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2208      	movs	r2, #8
 800173e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2202      	movs	r2, #2
 8001744:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2201      	movs	r2, #1
 800175c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800175e:	1d3a      	adds	r2, r7, #4
 8001760:	2390      	movs	r3, #144	; 0x90
 8001762:	05db      	lsls	r3, r3, #23
 8001764:	0011      	movs	r1, r2
 8001766:	0018      	movs	r0, r3
 8001768:	f000 fc1a 	bl	8001fa0 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 800176c:	2100      	movs	r1, #0
 800176e:	201c      	movs	r0, #28
 8001770:	f7ff fc98 	bl	80010a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001774:	201c      	movs	r0, #28
 8001776:	f7ff fc7b 	bl	8001070 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800177a:	193b      	adds	r3, r7, r4
 800177c:	22e1      	movs	r2, #225	; 0xe1
 800177e:	0252      	lsls	r2, r2, #9
 8001780:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001782:	0021      	movs	r1, r4
 8001784:	187b      	adds	r3, r7, r1
 8001786:	2200      	movs	r2, #0
 8001788:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800178a:	187b      	adds	r3, r7, r1
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001790:	187b      	adds	r3, r7, r1
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001796:	187b      	adds	r3, r7, r1
 8001798:	220c      	movs	r2, #12
 800179a:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800179c:	187b      	adds	r3, r7, r1
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <MX_USART2_UART_Init+0x104>)
 80017ac:	0019      	movs	r1, r3
 80017ae:	0010      	movs	r0, r2
 80017b0:	f001 fa0e 	bl	8002bd0 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <MX_USART2_UART_Init+0x104>)
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff fec6 	bl	8001548 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <MX_USART2_UART_Init+0x104>)
 80017be:	0018      	movs	r0, r3
 80017c0:	f7ff fd3e 	bl	8001240 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <MX_USART2_UART_Init+0x104>)
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7ff fd1c 	bl	8001204 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b00f      	add	sp, #60	; 0x3c
 80017d2:	bd90      	pop	{r4, r7, pc}
 80017d4:	40004400 	.word	0x40004400

080017d8 <process_cmd>:

/* USER CODE BEGIN 1 */
static bool process_cmd(uint8_t cmd_ch)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	0002      	movs	r2, r0
 80017e0:	1dfb      	adds	r3, r7, #7
 80017e2:	701a      	strb	r2, [r3, #0]
  /* check if valid character */
  if ((cmd_ch >= ' ') && (cmd_ch <= '~'))
 80017e4:	1dfb      	adds	r3, r7, #7
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b1f      	cmp	r3, #31
 80017ea:	d914      	bls.n	8001816 <process_cmd+0x3e>
 80017ec:	1dfb      	adds	r3, r7, #7
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b7e      	cmp	r3, #126	; 0x7e
 80017f2:	d810      	bhi.n	8001816 <process_cmd+0x3e>
  {
      cmd[cmd_idx++] = cmd_ch;
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <process_cmd+0xac>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	b2d1      	uxtb	r1, r2
 80017fe:	4a21      	ldr	r2, [pc, #132]	; (8001884 <process_cmd+0xac>)
 8001800:	7011      	strb	r1, [r2, #0]
 8001802:	0019      	movs	r1, r3
 8001804:	4b20      	ldr	r3, [pc, #128]	; (8001888 <process_cmd+0xb0>)
 8001806:	1dfa      	adds	r2, r7, #7
 8001808:	7812      	ldrb	r2, [r2, #0]
 800180a:	545a      	strb	r2, [r3, r1]
      printf("%c", cmd_ch);
 800180c:	1dfb      	adds	r3, r7, #7
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	0018      	movs	r0, r3
 8001812:	f001 fb1d 	bl	8002e50 <putchar>
      // printf("a");
      // LL_USART_TransmitData8(DEBUG_USART, cmd_ch);
  }

  /* delete if back space is pressed */
  if (cmd_ch == '\b')
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b08      	cmp	r3, #8
 800181c:	d113      	bne.n	8001846 <process_cmd+0x6e>
  {
    if (cmd_idx)
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <process_cmd+0xac>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00e      	beq.n	8001846 <process_cmd+0x6e>
    {
      cmd[--cmd_idx] = 0;
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <process_cmd+0xac>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	3b01      	subs	r3, #1
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <process_cmd+0xac>)
 8001834:	1c11      	adds	r1, r2, #0
 8001836:	7019      	strb	r1, [r3, #0]
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <process_cmd+0xb0>)
 800183a:	2100      	movs	r1, #0
 800183c:	5499      	strb	r1, [r3, r2]
      printf("\b\x1B[K");
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <process_cmd+0xb4>)
 8001840:	0018      	movs	r0, r3
 8001842:	f001 faeb 	bl	8002e1c <iprintf>
    }
  }
  /* do parsing command if input is enter key */
  if ((cmd_ch == '\r') || (cmd_ch == '\n'))
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b0d      	cmp	r3, #13
 800184c:	d003      	beq.n	8001856 <process_cmd+0x7e>
 800184e:	1dfb      	adds	r3, r7, #7
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b0a      	cmp	r3, #10
 8001854:	d111      	bne.n	800187a <process_cmd+0xa2>
  {
    cmd[cmd_idx++] = cmd_ch;
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <process_cmd+0xac>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	b2d1      	uxtb	r1, r2
 8001860:	4a08      	ldr	r2, [pc, #32]	; (8001884 <process_cmd+0xac>)
 8001862:	7011      	strb	r1, [r2, #0]
 8001864:	0019      	movs	r1, r3
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <process_cmd+0xb0>)
 8001868:	1dfa      	adds	r2, r7, #7
 800186a:	7812      	ldrb	r2, [r2, #0]
 800186c:	545a      	strb	r2, [r3, r1]
    printf("\r\n");
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <process_cmd+0xb8>)
 8001870:	0018      	movs	r0, r3
 8001872:	f001 fb73 	bl	8002f5c <puts>
    return true;
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <process_cmd+0xa4>
  }

  return false;
 800187a:	2300      	movs	r3, #0
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000294 	.word	0x20000294
 8001888:	20000194 	.word	0x20000194
 800188c:	08004180 	.word	0x08004180
 8001890:	08004188 	.word	0x08004188

08001894 <uart_idle>:


void uart_idle(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	if (uart1_idle)
 8001898:	4b35      	ldr	r3, [pc, #212]	; (8001970 <uart_idle+0xdc>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d036      	beq.n	8001910 <uart_idle+0x7c>
	{
		LL_USART_DisableIT_RXNE(USART1);
 80018a2:	4b34      	ldr	r3, [pc, #208]	; (8001974 <uart_idle+0xe0>)
 80018a4:	0018      	movs	r0, r3
 80018a6:	f7ff fe0e 	bl	80014c6 <LL_USART_DisableIT_RXNE>

    while (uart1_rx_idx != uart1_read_idx)
 80018aa:	e024      	b.n	80018f6 <uart_idle+0x62>
    {
      if (process_cmd(uart1_rx_buf[uart1_read_idx++ & (UART_RX_BUF_SIZE-1)]))
 80018ac:	4b32      	ldr	r3, [pc, #200]	; (8001978 <uart_idle+0xe4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	1c59      	adds	r1, r3, #1
 80018b2:	4a31      	ldr	r2, [pc, #196]	; (8001978 <uart_idle+0xe4>)
 80018b4:	6011      	str	r1, [r2, #0]
 80018b6:	22ff      	movs	r2, #255	; 0xff
 80018b8:	4013      	ands	r3, r2
 80018ba:	4a30      	ldr	r2, [pc, #192]	; (800197c <uart_idle+0xe8>)
 80018bc:	5cd3      	ldrb	r3, [r2, r3]
 80018be:	0018      	movs	r0, r3
 80018c0:	f7ff ff8a 	bl	80017d8 <process_cmd>
 80018c4:	1e03      	subs	r3, r0, #0
 80018c6:	d016      	beq.n	80018f6 <uart_idle+0x62>
      {
        printf(" cmd : %s \r\n", cmd);
 80018c8:	4a2d      	ldr	r2, [pc, #180]	; (8001980 <uart_idle+0xec>)
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <uart_idle+0xf0>)
 80018cc:	0011      	movs	r1, r2
 80018ce:	0018      	movs	r0, r3
 80018d0:	f001 faa4 	bl	8002e1c <iprintf>
        while (cmd_idx)
 80018d4:	e00a      	b.n	80018ec <uart_idle+0x58>
        {
          cmd[--cmd_idx] = 0;
 80018d6:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <uart_idle+0xf4>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	4b29      	ldr	r3, [pc, #164]	; (8001988 <uart_idle+0xf4>)
 80018e2:	1c11      	adds	r1, r2, #0
 80018e4:	7019      	strb	r1, [r3, #0]
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <uart_idle+0xec>)
 80018e8:	2100      	movs	r1, #0
 80018ea:	5499      	strb	r1, [r3, r2]
        while (cmd_idx)
 80018ec:	4b26      	ldr	r3, [pc, #152]	; (8001988 <uart_idle+0xf4>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1ef      	bne.n	80018d6 <uart_idle+0x42>
    while (uart1_rx_idx != uart1_read_idx)
 80018f6:	4b25      	ldr	r3, [pc, #148]	; (800198c <uart_idle+0xf8>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <uart_idle+0xe4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d1d4      	bne.n	80018ac <uart_idle+0x18>
        }
      }
    }      

    LL_USART_EnableIT_RXNE(USART1);
 8001902:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <uart_idle+0xe0>)
 8001904:	0018      	movs	r0, r3
 8001906:	f7ff fd80 	bl	800140a <LL_USART_EnableIT_RXNE>

		uart1_idle = 0;
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <uart_idle+0xdc>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
	}

	if (uart2_idle)
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <uart_idle+0xfc>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d026      	beq.n	8001968 <uart_idle+0xd4>
	{
		LL_USART_DisableIT_RXNE(USART2);
 800191a:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <uart_idle+0x100>)
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff fdd2 	bl	80014c6 <LL_USART_DisableIT_RXNE>

		while (uart2_rx_idx != uart2_read_idx)
 8001922:	e014      	b.n	800194e <uart_idle+0xba>
    {
      while(!LL_USART_IsActiveFlag_TXE(USART2));
 8001924:	46c0      	nop			; (mov r8, r8)
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <uart_idle+0x100>)
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff fd07 	bl	800133c <LL_USART_IsActiveFlag_TXE>
 800192e:	1e03      	subs	r3, r0, #0
 8001930:	d0f9      	beq.n	8001926 <uart_idle+0x92>
      LL_USART_TransmitData8(USART2, uart2_rx_buf[uart2_read_idx++ & (UART_RX_BUF_SIZE-1)]);
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <uart_idle+0x104>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	1c59      	adds	r1, r3, #1
 8001938:	4a17      	ldr	r2, [pc, #92]	; (8001998 <uart_idle+0x104>)
 800193a:	6011      	str	r1, [r2, #0]
 800193c:	22ff      	movs	r2, #255	; 0xff
 800193e:	4013      	ands	r3, r2
 8001940:	4a16      	ldr	r2, [pc, #88]	; (800199c <uart_idle+0x108>)
 8001942:	5cd3      	ldrb	r3, [r2, r3]
 8001944:	4a13      	ldr	r2, [pc, #76]	; (8001994 <uart_idle+0x100>)
 8001946:	0019      	movs	r1, r3
 8001948:	0010      	movs	r0, r2
 800194a:	f7ff fe2b 	bl	80015a4 <LL_USART_TransmitData8>
		while (uart2_rx_idx != uart2_read_idx)
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <uart_idle+0x10c>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <uart_idle+0x104>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d1e4      	bne.n	8001924 <uart_idle+0x90>
    }

    LL_USART_EnableIT_RXNE(USART2);
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <uart_idle+0x100>)
 800195c:	0018      	movs	r0, r3
 800195e:	f7ff fd54 	bl	800140a <LL_USART_EnableIT_RXNE>

		uart2_idle = 0;
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <uart_idle+0xfc>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
	}
}
 8001968:	46c0      	nop			; (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	2000008b 	.word	0x2000008b
 8001974:	40013800 	.word	0x40013800
 8001978:	20000190 	.word	0x20000190
 800197c:	2000008c 	.word	0x2000008c
 8001980:	20000194 	.word	0x20000194
 8001984:	0800418c 	.word	0x0800418c
 8001988:	20000294 	.word	0x20000294
 800198c:	2000018c 	.word	0x2000018c
 8001990:	20000295 	.word	0x20000295
 8001994:	40004400 	.word	0x40004400
 8001998:	2000039c 	.word	0x2000039c
 800199c:	20000298 	.word	0x20000298
 80019a0:	20000398 	.word	0x20000398

080019a4 <uart_init>:

void uart_init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  LL_USART_EnableIT_RXNE(USART1);
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <uart_init+0x48>)
 80019aa:	0018      	movs	r0, r3
 80019ac:	f7ff fd2d 	bl	800140a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_IDLE(USART1);
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <uart_init+0x48>)
 80019b2:	0018      	movs	r0, r3
 80019b4:	f7ff fd0a 	bl	80013cc <LL_USART_EnableIT_IDLE>
  LL_USART_EnableIT_ERROR(USART1);
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <uart_init+0x48>)
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7ff fd44 	bl	8001448 <LL_USART_EnableIT_ERROR>
  
  LL_USART_EnableIT_RXNE(USART2);
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <uart_init+0x4c>)
 80019c2:	0018      	movs	r0, r3
 80019c4:	f7ff fd21 	bl	800140a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_IDLE(USART2);
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <uart_init+0x4c>)
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7ff fcfe 	bl	80013cc <LL_USART_EnableIT_IDLE>
  LL_USART_EnableIT_ERROR(USART2);
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <uart_init+0x4c>)
 80019d2:	0018      	movs	r0, r3
 80019d4:	f7ff fd38 	bl	8001448 <LL_USART_EnableIT_ERROR>

  setbuf(stdout, NULL);
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <uart_init+0x50>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2100      	movs	r1, #0
 80019e0:	0018      	movs	r0, r3
 80019e2:	f001 fac5 	bl	8002f70 <setbuf>
}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40013800 	.word	0x40013800
 80019f0:	40004400 	.word	0x40004400
 80019f4:	20000004 	.word	0x20000004

080019f8 <uart_error_callback>:


void uart_error_callback(USART_TypeDef *USARTx)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  LL_USART_DisableIT_RXNE(USARTx);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	0018      	movs	r0, r3
 8001a04:	f7ff fd5f 	bl	80014c6 <LL_USART_DisableIT_RXNE>
  LL_USART_DisableIT_IDLE(USARTx);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7ff fd3b 	bl	8001486 <LL_USART_DisableIT_IDLE>
  LL_USART_DisableIT_ERROR(USARTx);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	0018      	movs	r0, r3
 8001a14:	f7ff fd77 	bl	8001506 <LL_USART_DisableIT_ERROR>

  // LL_USART_ClearFlag_RXNE(USARTx);
  LL_USART_ClearFlag_IDLE(USARTx);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f7ff fcc0 	bl	80013a0 <LL_USART_ClearFlag_IDLE>
  LL_USART_ClearFlag_FE(USARTx);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	0018      	movs	r0, r3
 8001a24:	f7ff fc9b 	bl	800135e <LL_USART_ClearFlag_FE>
  LL_USART_ClearFlag_ORE(USARTx);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f7ff fcad 	bl	800138a <LL_USART_ClearFlag_ORE>
  LL_USART_ClearFlag_NE(USARTx);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	0018      	movs	r0, r3
 8001a34:	f7ff fc9e 	bl	8001374 <LL_USART_ClearFlag_NE>

  LL_USART_Disable(USARTx);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f7ff fbf0 	bl	8001220 <LL_USART_Disable>

  //add your error handling here
}
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <uart_irq_rx_callback>:

void uart_irq_rx_callback(USART_TypeDef *USARTx)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if (USARTx == USART1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a38      	ldr	r2, [pc, #224]	; (8001b34 <uart_irq_rx_callback+0xec>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d123      	bne.n	8001aa0 <uart_irq_rx_callback+0x58>
  {
    //read data register not exmpty
    if(LL_USART_IsActiveFlag_RXNE(USART1))
 8001a58:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <uart_irq_rx_callback+0xec>)
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7ff fc4c 	bl	80012f8 <LL_USART_IsActiveFlag_RXNE>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d00f      	beq.n	8001a84 <uart_irq_rx_callback+0x3c>
    {
      uart1_rx_buf[uart1_rx_idx++ & (UART_RX_BUF_SIZE-1)] = LL_USART_ReceiveData8(USART1);
 8001a64:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <uart_irq_rx_callback+0xf0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	1c59      	adds	r1, r3, #1
 8001a6a:	4a33      	ldr	r2, [pc, #204]	; (8001b38 <uart_irq_rx_callback+0xf0>)
 8001a6c:	6011      	str	r1, [r2, #0]
 8001a6e:	22ff      	movs	r2, #255	; 0xff
 8001a70:	4013      	ands	r3, r2
 8001a72:	001c      	movs	r4, r3
 8001a74:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <uart_irq_rx_callback+0xec>)
 8001a76:	0018      	movs	r0, r3
 8001a78:	f7ff fd88 	bl	800158c <LL_USART_ReceiveData8>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	001a      	movs	r2, r3
 8001a80:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <uart_irq_rx_callback+0xf4>)
 8001a82:	551a      	strb	r2, [r3, r4]
      // LL_USART_ClearFlag_RXNE(USART2);
    }

    //idle
    if(LL_USART_IsActiveFlag_IDLE(USART1))
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <uart_irq_rx_callback+0xec>)
 8001a86:	0018      	movs	r0, r3
 8001a88:	f7ff fc25 	bl	80012d6 <LL_USART_IsActiveFlag_IDLE>
 8001a8c:	1e03      	subs	r3, r0, #0
 8001a8e:	d02e      	beq.n	8001aee <uart_irq_rx_callback+0xa6>
    {
      uart1_idle = 1;
 8001a90:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <uart_irq_rx_callback+0xf8>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
      LL_USART_ClearFlag_IDLE(USART1);
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <uart_irq_rx_callback+0xec>)
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff fc81 	bl	80013a0 <LL_USART_ClearFlag_IDLE>
 8001a9e:	e026      	b.n	8001aee <uart_irq_rx_callback+0xa6>
    }
  }
  else if (USARTx == USART2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <uart_irq_rx_callback+0xfc>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d122      	bne.n	8001aee <uart_irq_rx_callback+0xa6>
  {
    //read data register not exmpty
    if(LL_USART_IsActiveFlag_RXNE(USART2))
 8001aa8:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <uart_irq_rx_callback+0xfc>)
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f7ff fc24 	bl	80012f8 <LL_USART_IsActiveFlag_RXNE>
 8001ab0:	1e03      	subs	r3, r0, #0
 8001ab2:	d00f      	beq.n	8001ad4 <uart_irq_rx_callback+0x8c>
    {
      uart2_rx_buf[uart2_rx_idx++ & (UART_RX_BUF_SIZE-1)] = LL_USART_ReceiveData8(USART2);
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <uart_irq_rx_callback+0x100>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	1c59      	adds	r1, r3, #1
 8001aba:	4a23      	ldr	r2, [pc, #140]	; (8001b48 <uart_irq_rx_callback+0x100>)
 8001abc:	6011      	str	r1, [r2, #0]
 8001abe:	22ff      	movs	r2, #255	; 0xff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	001c      	movs	r4, r3
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <uart_irq_rx_callback+0xfc>)
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f7ff fd60 	bl	800158c <LL_USART_ReceiveData8>
 8001acc:	0003      	movs	r3, r0
 8001ace:	001a      	movs	r2, r3
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <uart_irq_rx_callback+0x104>)
 8001ad2:	551a      	strb	r2, [r3, r4]
      // LL_USART_ClearFlag_RXNE(USART2);
    }

    //idle
    if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <uart_irq_rx_callback+0xfc>)
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f7ff fbfd 	bl	80012d6 <LL_USART_IsActiveFlag_IDLE>
 8001adc:	1e03      	subs	r3, r0, #0
 8001ade:	d006      	beq.n	8001aee <uart_irq_rx_callback+0xa6>
    {
      uart2_idle = 1;
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <uart_irq_rx_callback+0x108>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	701a      	strb	r2, [r3, #0]
      LL_USART_ClearFlag_IDLE(USART2);
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <uart_irq_rx_callback+0xfc>)
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f7ff fc59 	bl	80013a0 <LL_USART_ClearFlag_IDLE>
    }
  }


  // frame error
  if(LL_USART_IsActiveFlag_FE(USARTx))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff fbbd 	bl	8001270 <LL_USART_IsActiveFlag_FE>
 8001af6:	1e03      	subs	r3, r0, #0
 8001af8:	d003      	beq.n	8001b02 <uart_irq_rx_callback+0xba>
  {
    uart_error_callback(USARTx);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff ff7b 	bl	80019f8 <uart_error_callback>
  }

  // overrun error
  if(LL_USART_IsActiveFlag_ORE(USARTx))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f7ff fbd5 	bl	80012b4 <LL_USART_IsActiveFlag_ORE>
 8001b0a:	1e03      	subs	r3, r0, #0
 8001b0c:	d003      	beq.n	8001b16 <uart_irq_rx_callback+0xce>
  {
    uart_error_callback(USARTx);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7ff ff71 	bl	80019f8 <uart_error_callback>
  }

  // noise error
  if(LL_USART_IsActiveFlag_NE(USARTx))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7ff fbba 	bl	8001292 <LL_USART_IsActiveFlag_NE>
 8001b1e:	1e03      	subs	r3, r0, #0
 8001b20:	d003      	beq.n	8001b2a <uart_irq_rx_callback+0xe2>
  {
    uart_error_callback(USARTx);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7ff ff67 	bl	80019f8 <uart_error_callback>
  }
}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b003      	add	sp, #12
 8001b30:	bd90      	pop	{r4, r7, pc}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	40013800 	.word	0x40013800
 8001b38:	2000018c 	.word	0x2000018c
 8001b3c:	2000008c 	.word	0x2000008c
 8001b40:	2000008b 	.word	0x2000008b
 8001b44:	40004400 	.word	0x40004400
 8001b48:	20000398 	.word	0x20000398
 8001b4c:	20000298 	.word	0x20000298
 8001b50:	20000295 	.word	0x20000295

08001b54 <_write>:



#if 1
int _write(int file, char* p, int len)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  for (int i=0; i<len; i++)
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e016      	b.n	8001b94 <_write+0x40>
  {
    while(!LL_USART_IsActiveFlag_TXE(DEBUG_USART));
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <_write+0x60>)
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f7ff fbe6 	bl	800133c <LL_USART_IsActiveFlag_TXE>
 8001b70:	1e03      	subs	r3, r0, #0
 8001b72:	d0f9      	beq.n	8001b68 <_write+0x14>
    LL_USART_ClearFlag_TC(DEBUG_USART);
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <_write+0x60>)
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7ff fc1d 	bl	80013b6 <LL_USART_ClearFlag_TC>
    LL_USART_TransmitData8(DEBUG_USART, *(p+i));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	18d3      	adds	r3, r2, r3
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <_write+0x60>)
 8001b86:	0019      	movs	r1, r3
 8001b88:	0010      	movs	r0, r2
 8001b8a:	f7ff fd0b 	bl	80015a4 <LL_USART_TransmitData8>
  for (int i=0; i<len; i++)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3301      	adds	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	dbe4      	blt.n	8001b66 <_write+0x12>
  }
  while (LL_USART_IsActiveFlag_TC(DEBUG_USART));
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <_write+0x60>)
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7ff fbba 	bl	800131a <LL_USART_IsActiveFlag_TC>
 8001ba6:	1e03      	subs	r3, r0, #0
 8001ba8:	d1f9      	bne.n	8001b9e <_write+0x4a>

  return len;
 8001baa:	687b      	ldr	r3, [r7, #4]
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b006      	add	sp, #24
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40013800 	.word	0x40013800

08001bb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bb8:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bbc:	f7fe ff74 	bl	8000aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc0:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc2:	490d      	ldr	r1, [pc, #52]	; (8001bf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <LoopForever+0xe>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc8:	e002      	b.n	8001bd0 <LoopCopyDataInit>

08001bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bce:	3304      	adds	r3, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd4:	d3f9      	bcc.n	8001bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd8:	4c0a      	ldr	r4, [pc, #40]	; (8001c04 <LoopForever+0x16>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bdc:	e001      	b.n	8001be2 <LoopFillZerobss>

08001bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be0:	3204      	adds	r2, #4

08001be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001be6:	f001 f8ed 	bl	8002dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bea:	f7fe fdb9 	bl	8000760 <main>

08001bee <LoopForever>:

LoopForever:
    b LoopForever
 8001bee:	e7fe      	b.n	8001bee <LoopForever>
  ldr   r0, =_estack
 8001bf0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001bfc:	08004264 	.word	0x08004264
  ldr r2, =_sbss
 8001c00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c04:	200003b0 	.word	0x200003b0

08001c08 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC1_COMP_IRQHandler>
	...

08001c0c <LL_EXTI_EnableIT_0_31>:
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <LL_EXTI_EnableIT_0_31+0x1c>)
 8001c16:	6819      	ldr	r1, [r3, #0]
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <LL_EXTI_EnableIT_0_31+0x1c>)
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
}
 8001c20:	46c0      	nop			; (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b002      	add	sp, #8
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40010400 	.word	0x40010400

08001c2c <LL_EXTI_DisableIT_0_31>:
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <LL_EXTI_DisableIT_0_31+0x20>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <LL_EXTI_DisableIT_0_31+0x20>)
 8001c3e:	400a      	ands	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b002      	add	sp, #8
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	40010400 	.word	0x40010400

08001c50 <LL_EXTI_EnableEvent_0_31>:
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <LL_EXTI_EnableEvent_0_31+0x1c>)
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <LL_EXTI_EnableEvent_0_31+0x1c>)
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	605a      	str	r2, [r3, #4]
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40010400 	.word	0x40010400

08001c70 <LL_EXTI_DisableEvent_0_31>:
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	43d9      	mvns	r1, r3
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001c82:	400a      	ands	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]
}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b002      	add	sp, #8
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	40010400 	.word	0x40010400

08001c94 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001c9e:	6899      	ldr	r1, [r3, #8]
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	609a      	str	r2, [r3, #8]
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40010400 	.word	0x40010400

08001cb4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001cc6:	400a      	ands	r2, r1
 8001cc8:	609a      	str	r2, [r3, #8]
}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	40010400 	.word	0x40010400

08001cd8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001ce2:	68d9      	ldr	r1, [r3, #12]
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	60da      	str	r2, [r3, #12]
}
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	43d9      	mvns	r1, r3
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	60da      	str	r2, [r3, #12]
}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b002      	add	sp, #8
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	40010400 	.word	0x40010400

08001d1c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001d24:	230f      	movs	r3, #15
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	791b      	ldrb	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d100      	bne.n	8001d36 <LL_EXTI_Init+0x1a>
 8001d34:	e068      	b.n	8001e08 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d100      	bne.n	8001d40 <LL_EXTI_Init+0x24>
 8001d3e:	e06e      	b.n	8001e1e <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	795b      	ldrb	r3, [r3, #5]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d01b      	beq.n	8001d80 <LL_EXTI_Init+0x64>
 8001d48:	dc25      	bgt.n	8001d96 <LL_EXTI_Init+0x7a>
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <LL_EXTI_Init+0x38>
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d00b      	beq.n	8001d6a <LL_EXTI_Init+0x4e>
 8001d52:	e020      	b.n	8001d96 <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7ff ff89 	bl	8001c70 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	0018      	movs	r0, r3
 8001d64:	f7ff ff52 	bl	8001c0c <LL_EXTI_EnableIT_0_31>
          break;
 8001d68:	e01a      	b.n	8001da0 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f7ff ff5c 	bl	8001c2c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7ff ff69 	bl	8001c50 <LL_EXTI_EnableEvent_0_31>
          break;
 8001d7e:	e00f      	b.n	8001da0 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7ff ff41 	bl	8001c0c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f7ff ff5e 	bl	8001c50 <LL_EXTI_EnableEvent_0_31>
          break;
 8001d94:	e004      	b.n	8001da0 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8001d96:	230f      	movs	r3, #15
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
          break;
 8001d9e:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	799b      	ldrb	r3, [r3, #6]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d03a      	beq.n	8001e1e <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	799b      	ldrb	r3, [r3, #6]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d01b      	beq.n	8001de8 <LL_EXTI_Init+0xcc>
 8001db0:	dc25      	bgt.n	8001dfe <LL_EXTI_Init+0xe2>
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d002      	beq.n	8001dbc <LL_EXTI_Init+0xa0>
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d00b      	beq.n	8001dd2 <LL_EXTI_Init+0xb6>
 8001dba:	e020      	b.n	8001dfe <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f7ff ff99 	bl	8001cf8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f7ff ff62 	bl	8001c94 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001dd0:	e026      	b.n	8001e20 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f7ff ff6c 	bl	8001cb4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f7ff ff79 	bl	8001cd8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001de6:	e01b      	b.n	8001e20 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f7ff ff51 	bl	8001c94 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f7ff ff6e 	bl	8001cd8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001dfc:	e010      	b.n	8001e20 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8001dfe:	230f      	movs	r3, #15
 8001e00:	18fb      	adds	r3, r7, r3
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
            break;
 8001e06:	e00b      	b.n	8001e20 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f7ff ff0d 	bl	8001c2c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	0018      	movs	r0, r3
 8001e18:	f7ff ff2a 	bl	8001c70 <LL_EXTI_DisableEvent_0_31>
 8001e1c:	e000      	b.n	8001e20 <LL_EXTI_Init+0x104>
      }
 8001e1e:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8001e20:	230f      	movs	r3, #15
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	781b      	ldrb	r3, [r3, #0]
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <LL_GPIO_SetPinMode>:
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6819      	ldr	r1, [r3, #0]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	435b      	muls	r3, r3
 8001e42:	001a      	movs	r2, r3
 8001e44:	0013      	movs	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	189b      	adds	r3, r3, r2
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	400b      	ands	r3, r1
 8001e4e:	001a      	movs	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	435b      	muls	r3, r3
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	434b      	muls	r3, r1
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	601a      	str	r2, [r3, #0]
}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b004      	add	sp, #16
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <LL_GPIO_SetPinOutputType>:
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	43d2      	mvns	r2, r2
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	434b      	muls	r3, r1
 8001e82:	431a      	orrs	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	605a      	str	r2, [r3, #4]
}
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b004      	add	sp, #16
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <LL_GPIO_SetPinSpeed>:
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6899      	ldr	r1, [r3, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	435b      	muls	r3, r3
 8001ea4:	001a      	movs	r2, r3
 8001ea6:	0013      	movs	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	189b      	adds	r3, r3, r2
 8001eac:	43db      	mvns	r3, r3
 8001eae:	400b      	ands	r3, r1
 8001eb0:	001a      	movs	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	435b      	muls	r3, r3
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	434b      	muls	r3, r1
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	609a      	str	r2, [r3, #8]
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b004      	add	sp, #16
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <LL_GPIO_SetPinPull>:
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	68d9      	ldr	r1, [r3, #12]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	435b      	muls	r3, r3
 8001edc:	001a      	movs	r2, r3
 8001ede:	0013      	movs	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	189b      	adds	r3, r3, r2
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	400b      	ands	r3, r1
 8001ee8:	001a      	movs	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	435b      	muls	r3, r3
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	434b      	muls	r3, r1
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	60da      	str	r2, [r3, #12]
}
 8001ef8:	46c0      	nop			; (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b004      	add	sp, #16
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a19      	ldr	r1, [r3, #32]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	435b      	muls	r3, r3
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	4353      	muls	r3, r2
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	435a      	muls	r2, r3
 8001f1c:	0013      	movs	r3, r2
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	43db      	mvns	r3, r3
 8001f24:	400b      	ands	r3, r1
 8001f26:	001a      	movs	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	435b      	muls	r3, r3
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	434b      	muls	r3, r1
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	434b      	muls	r3, r1
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	434b      	muls	r3, r1
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b004      	add	sp, #16
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	0a12      	lsrs	r2, r2, #8
 8001f5e:	4353      	muls	r3, r2
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	0a12      	lsrs	r2, r2, #8
 8001f64:	4353      	muls	r3, r2
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	0a12      	lsrs	r2, r2, #8
 8001f6a:	435a      	muls	r2, r3
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	43db      	mvns	r3, r3
 8001f74:	400b      	ands	r3, r1
 8001f76:	001a      	movs	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	0a1b      	lsrs	r3, r3, #8
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	0a09      	lsrs	r1, r1, #8
 8001f80:	434b      	muls	r3, r1
 8001f82:	68b9      	ldr	r1, [r7, #8]
 8001f84:	0a09      	lsrs	r1, r1, #8
 8001f86:	434b      	muls	r3, r1
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	0a09      	lsrs	r1, r1, #8
 8001f8c:	434b      	muls	r3, r1
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	434b      	muls	r3, r1
 8001f92:	431a      	orrs	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b004      	add	sp, #16
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001fae:	e048      	b.n	8002042 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4091      	lsls	r1, r2
 8001fba:	000a      	movs	r2, r1
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d03a      	beq.n	800203c <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d003      	beq.n	8001fd6 <LL_GPIO_Init+0x36>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d10e      	bne.n	8001ff4 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	68b9      	ldr	r1, [r7, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f7ff ff56 	bl	8001e90 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f7ff ff39 	bl	8001e66 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f7ff ff63 	bl	8001ec8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d111      	bne.n	800202e <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2bff      	cmp	r3, #255	; 0xff
 800200e:	d807      	bhi.n	8002020 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	0018      	movs	r0, r3
 800201a:	f7ff ff71 	bl	8001f00 <LL_GPIO_SetAFPin_0_7>
 800201e:	e006      	b.n	800202e <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	0018      	movs	r0, r3
 800202a:	f7ff ff8c 	bl	8001f46 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	68b9      	ldr	r1, [r7, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	0018      	movs	r0, r3
 8002038:	f7ff fef9 	bl	8001e2e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3301      	adds	r3, #1
 8002040:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	40da      	lsrs	r2, r3
 800204a:	1e13      	subs	r3, r2, #0
 800204c:	d1b0      	bne.n	8001fb0 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800204e:	2300      	movs	r3, #0
}
 8002050:	0018      	movs	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	b004      	add	sp, #16
 8002056:	bd80      	pop	{r7, pc}

08002058 <LL_RCC_HSI_IsReady>:
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <LL_RCC_HSI_IsReady+0x1c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2202      	movs	r2, #2
 8002062:	4013      	ands	r3, r2
 8002064:	3b02      	subs	r3, #2
 8002066:	425a      	negs	r2, r3
 8002068:	4153      	adcs	r3, r2
 800206a:	b2db      	uxtb	r3, r3
}
 800206c:	0018      	movs	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	40021000 	.word	0x40021000

08002078 <LL_RCC_LSE_IsReady>:
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <LL_RCC_LSE_IsReady+0x1c>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	2202      	movs	r2, #2
 8002082:	4013      	ands	r3, r2
 8002084:	3b02      	subs	r3, #2
 8002086:	425a      	negs	r2, r3
 8002088:	4153      	adcs	r3, r2
 800208a:	b2db      	uxtb	r3, r3
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	40021000 	.word	0x40021000

08002098 <LL_RCC_GetSysClkSource>:
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <LL_RCC_GetSysClkSource+0x14>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	220c      	movs	r2, #12
 80020a2:	4013      	ands	r3, r2
}
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	40021000 	.word	0x40021000

080020b0 <LL_RCC_GetAHBPrescaler>:
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <LL_RCC_GetAHBPrescaler+0x14>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	22f0      	movs	r2, #240	; 0xf0
 80020ba:	4013      	ands	r3, r2
}
 80020bc:	0018      	movs	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	40021000 	.word	0x40021000

080020c8 <LL_RCC_GetAPB1Prescaler>:
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <LL_RCC_GetAPB1Prescaler+0x14>)
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	23e0      	movs	r3, #224	; 0xe0
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4013      	ands	r3, r2
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000

080020e0 <LL_RCC_GetUSARTClockSource>:
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <LL_RCC_GetUSARTClockSource+0x24>)
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	2103      	movs	r1, #3
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	4091      	lsls	r1, r2
 80020f2:	000a      	movs	r2, r1
 80020f4:	401a      	ands	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	061b      	lsls	r3, r3, #24
 80020fa:	4313      	orrs	r3, r2
}
 80020fc:	0018      	movs	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	b002      	add	sp, #8
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000

08002108 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <LL_RCC_PLL_GetMainSource+0x14>)
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	23c0      	movs	r3, #192	; 0xc0
 8002112:	025b      	lsls	r3, r3, #9
 8002114:	4013      	ands	r3, r2
}
 8002116:	0018      	movs	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000

08002120 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	23f0      	movs	r3, #240	; 0xf0
 800212a:	039b      	lsls	r3, r3, #14
 800212c:	4013      	ands	r3, r2
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000

08002138 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <LL_RCC_PLL_GetPrediv+0x14>)
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	220f      	movs	r2, #15
 8002142:	4013      	ands	r3, r2
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	40021000 	.word	0x40021000

08002150 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002158:	f000 f8de 	bl	8002318 <RCC_GetSystemClockFreq>
 800215c:	0002      	movs	r2, r0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	0018      	movs	r0, r3
 8002168:	f000 f904 	bl	8002374 <RCC_GetHCLKClockFreq>
 800216c:	0002      	movs	r2, r0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	0018      	movs	r0, r3
 8002178:	f000 f912 	bl	80023a0 <RCC_GetPCLK1ClockFreq>
 800217c:	0002      	movs	r2, r0
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	609a      	str	r2, [r3, #8]
}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	46bd      	mov	sp, r7
 8002186:	b002      	add	sp, #8
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d12d      	bne.n	80021fa <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7ff ff9d 	bl	80020e0 <LL_RCC_GetUSARTClockSource>
 80021a6:	0003      	movs	r3, r0
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d00a      	beq.n	80021c2 <LL_RCC_GetUSARTClockFreq+0x36>
 80021ac:	d818      	bhi.n	80021e0 <LL_RCC_GetUSARTClockFreq+0x54>
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d002      	beq.n	80021b8 <LL_RCC_GetUSARTClockFreq+0x2c>
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d00c      	beq.n	80021d0 <LL_RCC_GetUSARTClockFreq+0x44>
 80021b6:	e013      	b.n	80021e0 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80021b8:	f000 f8ae 	bl	8002318 <RCC_GetSystemClockFreq>
 80021bc:	0003      	movs	r3, r0
 80021be:	60fb      	str	r3, [r7, #12]
        break;
 80021c0:	e020      	b.n	8002204 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80021c2:	f7ff ff49 	bl	8002058 <LL_RCC_HSI_IsReady>
 80021c6:	1e03      	subs	r3, r0, #0
 80021c8:	d019      	beq.n	80021fe <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80021ca:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <LL_RCC_GetUSARTClockFreq+0x170>)
 80021cc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80021ce:	e016      	b.n	80021fe <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80021d0:	f7ff ff52 	bl	8002078 <LL_RCC_LSE_IsReady>
 80021d4:	1e03      	subs	r3, r0, #0
 80021d6:	d014      	beq.n	8002202 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80021de:	e010      	b.n	8002202 <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80021e0:	f000 f89a 	bl	8002318 <RCC_GetSystemClockFreq>
 80021e4:	0003      	movs	r3, r0
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 f8c4 	bl	8002374 <RCC_GetHCLKClockFreq>
 80021ec:	0003      	movs	r3, r0
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 f8d6 	bl	80023a0 <RCC_GetPCLK1ClockFreq>
 80021f4:	0003      	movs	r3, r0
 80021f6:	60fb      	str	r3, [r7, #12]
        break;
 80021f8:	e004      	b.n	8002204 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	e002      	b.n	8002204 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	e000      	b.n	8002204 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002202:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CFGR3_USART1SW  */

#if defined(RCC_CFGR3_USART2SW)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b10      	cmp	r3, #16
 8002208:	d132      	bne.n	8002270 <LL_RCC_GetUSARTClockFreq+0xe4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	0018      	movs	r0, r3
 800220e:	f7ff ff67 	bl	80020e0 <LL_RCC_GetUSARTClockSource>
 8002212:	0003      	movs	r3, r0
 8002214:	4a3a      	ldr	r2, [pc, #232]	; (8002300 <LL_RCC_GetUSARTClockFreq+0x174>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00e      	beq.n	8002238 <LL_RCC_GetUSARTClockFreq+0xac>
 800221a:	4a39      	ldr	r2, [pc, #228]	; (8002300 <LL_RCC_GetUSARTClockFreq+0x174>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d81a      	bhi.n	8002256 <LL_RCC_GetUSARTClockFreq+0xca>
 8002220:	4a38      	ldr	r2, [pc, #224]	; (8002304 <LL_RCC_GetUSARTClockFreq+0x178>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d003      	beq.n	800222e <LL_RCC_GetUSARTClockFreq+0xa2>
 8002226:	4a38      	ldr	r2, [pc, #224]	; (8002308 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00c      	beq.n	8002246 <LL_RCC_GetUSARTClockFreq+0xba>
 800222c:	e013      	b.n	8002256 <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800222e:	f000 f873 	bl	8002318 <RCC_GetSystemClockFreq>
 8002232:	0003      	movs	r3, r0
 8002234:	60fb      	str	r3, [r7, #12]
        break;
 8002236:	e020      	b.n	800227a <LL_RCC_GetUSARTClockFreq+0xee>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002238:	f7ff ff0e 	bl	8002058 <LL_RCC_HSI_IsReady>
 800223c:	1e03      	subs	r3, r0, #0
 800223e:	d019      	beq.n	8002274 <LL_RCC_GetUSARTClockFreq+0xe8>
        {
          usart_frequency = HSI_VALUE;
 8002240:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <LL_RCC_GetUSARTClockFreq+0x170>)
 8002242:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002244:	e016      	b.n	8002274 <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002246:	f7ff ff17 	bl	8002078 <LL_RCC_LSE_IsReady>
 800224a:	1e03      	subs	r3, r0, #0
 800224c:	d014      	beq.n	8002278 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = LSE_VALUE;
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002254:	e010      	b.n	8002278 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002256:	f000 f85f 	bl	8002318 <RCC_GetSystemClockFreq>
 800225a:	0003      	movs	r3, r0
 800225c:	0018      	movs	r0, r3
 800225e:	f000 f889 	bl	8002374 <RCC_GetHCLKClockFreq>
 8002262:	0003      	movs	r3, r0
 8002264:	0018      	movs	r0, r3
 8002266:	f000 f89b 	bl	80023a0 <RCC_GetPCLK1ClockFreq>
 800226a:	0003      	movs	r3, r0
 800226c:	60fb      	str	r3, [r7, #12]
        break;
 800226e:	e004      	b.n	800227a <LL_RCC_GetUSARTClockFreq+0xee>
    }
  }
 8002270:	46c0      	nop			; (mov r8, r8)
 8002272:	e002      	b.n	800227a <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	e000      	b.n	800227a <LL_RCC_GetUSARTClockFreq+0xee>
        break;
 8002278:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b12      	cmp	r3, #18
 800227e:	d132      	bne.n	80022e6 <LL_RCC_GetUSARTClockFreq+0x15a>
  {
    /* USART3CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	0018      	movs	r0, r3
 8002284:	f7ff ff2c 	bl	80020e0 <LL_RCC_GetUSARTClockSource>
 8002288:	0003      	movs	r3, r0
 800228a:	4a20      	ldr	r2, [pc, #128]	; (800230c <LL_RCC_GetUSARTClockFreq+0x180>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d00e      	beq.n	80022ae <LL_RCC_GetUSARTClockFreq+0x122>
 8002290:	4a1e      	ldr	r2, [pc, #120]	; (800230c <LL_RCC_GetUSARTClockFreq+0x180>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d81a      	bhi.n	80022cc <LL_RCC_GetUSARTClockFreq+0x140>
 8002296:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <LL_RCC_GetUSARTClockFreq+0x184>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d003      	beq.n	80022a4 <LL_RCC_GetUSARTClockFreq+0x118>
 800229c:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <LL_RCC_GetUSARTClockFreq+0x188>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00c      	beq.n	80022bc <LL_RCC_GetUSARTClockFreq+0x130>
 80022a2:	e013      	b.n	80022cc <LL_RCC_GetUSARTClockFreq+0x140>
    {
      case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80022a4:	f000 f838 	bl	8002318 <RCC_GetSystemClockFreq>
 80022a8:	0003      	movs	r3, r0
 80022aa:	60fb      	str	r3, [r7, #12]
        break;
 80022ac:	e020      	b.n	80022f0 <LL_RCC_GetUSARTClockFreq+0x164>

      case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80022ae:	f7ff fed3 	bl	8002058 <LL_RCC_HSI_IsReady>
 80022b2:	1e03      	subs	r3, r0, #0
 80022b4:	d019      	beq.n	80022ea <LL_RCC_GetUSARTClockFreq+0x15e>
        {
          usart_frequency = HSI_VALUE;
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <LL_RCC_GetUSARTClockFreq+0x170>)
 80022b8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80022ba:	e016      	b.n	80022ea <LL_RCC_GetUSARTClockFreq+0x15e>

      case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80022bc:	f7ff fedc 	bl	8002078 <LL_RCC_LSE_IsReady>
 80022c0:	1e03      	subs	r3, r0, #0
 80022c2:	d014      	beq.n	80022ee <LL_RCC_GetUSARTClockFreq+0x162>
        {
          usart_frequency = LSE_VALUE;
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80022ca:	e010      	b.n	80022ee <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80022cc:	f000 f824 	bl	8002318 <RCC_GetSystemClockFreq>
 80022d0:	0003      	movs	r3, r0
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 f84e 	bl	8002374 <RCC_GetHCLKClockFreq>
 80022d8:	0003      	movs	r3, r0
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 f860 	bl	80023a0 <RCC_GetPCLK1ClockFreq>
 80022e0:	0003      	movs	r3, r0
 80022e2:	60fb      	str	r3, [r7, #12]
        break;
 80022e4:	e004      	b.n	80022f0 <LL_RCC_GetUSARTClockFreq+0x164>
    }
  }
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	e002      	b.n	80022f0 <LL_RCC_GetUSARTClockFreq+0x164>
        break;
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	e000      	b.n	80022f0 <LL_RCC_GetUSARTClockFreq+0x164>
        break;
 80022ee:	46c0      	nop			; (mov r8, r8)

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80022f0:	68fb      	ldr	r3, [r7, #12]
}
 80022f2:	0018      	movs	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b004      	add	sp, #16
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	007a1200 	.word	0x007a1200
 8002300:	10030000 	.word	0x10030000
 8002304:	10010000 	.word	0x10010000
 8002308:	10020000 	.word	0x10020000
 800230c:	120c0000 	.word	0x120c0000
 8002310:	12040000 	.word	0x12040000
 8002314:	12080000 	.word	0x12080000

08002318 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002322:	f7ff feb9 	bl	8002098 <LL_RCC_GetSysClkSource>
 8002326:	0003      	movs	r3, r0
 8002328:	2b0c      	cmp	r3, #12
 800232a:	d013      	beq.n	8002354 <RCC_GetSystemClockFreq+0x3c>
 800232c:	d815      	bhi.n	800235a <RCC_GetSystemClockFreq+0x42>
 800232e:	2b08      	cmp	r3, #8
 8002330:	d00b      	beq.n	800234a <RCC_GetSystemClockFreq+0x32>
 8002332:	d812      	bhi.n	800235a <RCC_GetSystemClockFreq+0x42>
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <RCC_GetSystemClockFreq+0x26>
 8002338:	2b04      	cmp	r3, #4
 800233a:	d003      	beq.n	8002344 <RCC_GetSystemClockFreq+0x2c>
 800233c:	e00d      	b.n	800235a <RCC_GetSystemClockFreq+0x42>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <RCC_GetSystemClockFreq+0x54>)
 8002340:	607b      	str	r3, [r7, #4]
      break;
 8002342:	e00d      	b.n	8002360 <RCC_GetSystemClockFreq+0x48>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <RCC_GetSystemClockFreq+0x54>)
 8002346:	607b      	str	r3, [r7, #4]
      break;
 8002348:	e00a      	b.n	8002360 <RCC_GetSystemClockFreq+0x48>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800234a:	f000 f83d 	bl	80023c8 <RCC_PLL_GetFreqDomain_SYS>
 800234e:	0003      	movs	r3, r0
 8002350:	607b      	str	r3, [r7, #4]
      break;
 8002352:	e005      	b.n	8002360 <RCC_GetSystemClockFreq+0x48>

#if defined(RCC_HSI48_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI48:/* HSI48 used as system clock  source */
      frequency = HSI48_VALUE;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <RCC_GetSystemClockFreq+0x58>)
 8002356:	607b      	str	r3, [r7, #4]
      break;
 8002358:	e002      	b.n	8002360 <RCC_GetSystemClockFreq+0x48>
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800235a:	4b04      	ldr	r3, [pc, #16]	; (800236c <RCC_GetSystemClockFreq+0x54>)
 800235c:	607b      	str	r3, [r7, #4]
      break;
 800235e:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8002360:	687b      	ldr	r3, [r7, #4]
}
 8002362:	0018      	movs	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	b002      	add	sp, #8
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	007a1200 	.word	0x007a1200
 8002370:	02dc6c00 	.word	0x02dc6c00

08002374 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800237c:	f7ff fe98 	bl	80020b0 <LL_RCC_GetAHBPrescaler>
 8002380:	0003      	movs	r3, r0
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	220f      	movs	r2, #15
 8002386:	4013      	ands	r3, r2
 8002388:	4a04      	ldr	r2, [pc, #16]	; (800239c <RCC_GetHCLKClockFreq+0x28>)
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	001a      	movs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	40d3      	lsrs	r3, r2
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b002      	add	sp, #8
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	0800419c 	.word	0x0800419c

080023a0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80023a8:	f7ff fe8e 	bl	80020c8 <LL_RCC_GetAPB1Prescaler>
 80023ac:	0003      	movs	r3, r0
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <RCC_GetPCLK1ClockFreq+0x24>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	001a      	movs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	40d3      	lsrs	r3, r2
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b002      	add	sp, #8
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	080041ac 	.word	0x080041ac

080023c8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	2300      	movs	r3, #0
 80023d4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80023d6:	f7ff fe97 	bl	8002108 <LL_RCC_PLL_GetMainSource>
 80023da:	0003      	movs	r3, r0
 80023dc:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	23c0      	movs	r3, #192	; 0xc0
 80023e2:	025b      	lsls	r3, r3, #9
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d012      	beq.n	800240e <RCC_PLL_GetFreqDomain_SYS+0x46>
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	23c0      	movs	r3, #192	; 0xc0
 80023ec:	025b      	lsls	r3, r3, #9
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d813      	bhi.n	800241a <RCC_PLL_GetFreqDomain_SYS+0x52>
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d005      	beq.n	8002408 <RCC_PLL_GetFreqDomain_SYS+0x40>
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	025b      	lsls	r3, r3, #9
 8002402:	429a      	cmp	r2, r3
 8002404:	d006      	beq.n	8002414 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8002406:	e008      	b.n	800241a <RCC_PLL_GetFreqDomain_SYS+0x52>
  {
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 800240a:	607b      	str	r3, [r7, #4]
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800240c:	e008      	b.n	8002420 <RCC_PLL_GetFreqDomain_SYS+0x58>

#if defined(RCC_HSI48_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI48:     /* HSI48 used as PLL clock source */
      pllinputfreq = HSI48_VALUE;
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <RCC_PLL_GetFreqDomain_SYS+0x8c>)
 8002410:	607b      	str	r3, [r7, #4]
      break;
 8002412:	e005      	b.n	8002420 <RCC_PLL_GetFreqDomain_SYS+0x58>
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 8002416:	607b      	str	r3, [r7, #4]
      break;
 8002418:	e002      	b.n	8002420 <RCC_PLL_GetFreqDomain_SYS+0x58>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <RCC_PLL_GetFreqDomain_SYS+0x88>)
 800241c:	607b      	str	r3, [r7, #4]
#else
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800241e:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 8002420:	f7ff fe8a 	bl	8002138 <LL_RCC_PLL_GetPrediv>
 8002424:	0003      	movs	r3, r0
 8002426:	220f      	movs	r2, #15
 8002428:	4013      	ands	r3, r2
 800242a:	3301      	adds	r3, #1
 800242c:	0019      	movs	r1, r3
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fd fe72 	bl	8000118 <__udivsi3>
 8002434:	0003      	movs	r3, r0
 8002436:	001c      	movs	r4, r3
 8002438:	f7ff fe72 	bl	8002120 <LL_RCC_PLL_GetMultiplicator>
 800243c:	0003      	movs	r3, r0
 800243e:	0c9b      	lsrs	r3, r3, #18
 8002440:	220f      	movs	r2, #15
 8002442:	4013      	ands	r3, r2
 8002444:	3302      	adds	r3, #2
 8002446:	4363      	muls	r3, r4
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002448:	0018      	movs	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	b003      	add	sp, #12
 800244e:	bd90      	pop	{r4, r7, pc}
 8002450:	007a1200 	.word	0x007a1200
 8002454:	02dc6c00 	.word	0x02dc6c00

08002458 <LL_TIM_SetPrescaler>:
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}

08002470 <LL_TIM_SetAutoReload>:
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b002      	add	sp, #8
 8002486:	bd80      	pop	{r7, pc}

08002488 <LL_TIM_SetRepetitionCounter>:
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}

080024a0 <LL_TIM_OC_SetCompareCH1>:
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	635a      	str	r2, [r3, #52]	; 0x34
}
 80024b0:	46c0      	nop			; (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b002      	add	sp, #8
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <LL_TIM_OC_SetCompareCH2>:
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b002      	add	sp, #8
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <LL_TIM_OC_SetCompareCH3>:
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b002      	add	sp, #8
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <LL_TIM_OC_SetCompareCH4>:
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}

08002500 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	2201      	movs	r2, #1
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	615a      	str	r2, [r3, #20]
}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	b002      	add	sp, #8
 800251a:	bd80      	pop	{r7, pc}

0800251c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a35      	ldr	r2, [pc, #212]	; (8002604 <LL_TIM_Init+0xe8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d008      	beq.n	8002546 <LL_TIM_Init+0x2a>
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	05db      	lsls	r3, r3, #23
 800253a:	429a      	cmp	r2, r3
 800253c:	d003      	beq.n	8002546 <LL_TIM_Init+0x2a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a31      	ldr	r2, [pc, #196]	; (8002608 <LL_TIM_Init+0xec>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d107      	bne.n	8002556 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2270      	movs	r2, #112	; 0x70
 800254a:	4393      	bics	r3, r2
 800254c:	001a      	movs	r2, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a2a      	ldr	r2, [pc, #168]	; (8002604 <LL_TIM_Init+0xe8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d018      	beq.n	8002590 <LL_TIM_Init+0x74>
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	05db      	lsls	r3, r3, #23
 8002564:	429a      	cmp	r2, r3
 8002566:	d013      	beq.n	8002590 <LL_TIM_Init+0x74>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a27      	ldr	r2, [pc, #156]	; (8002608 <LL_TIM_Init+0xec>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00f      	beq.n	8002590 <LL_TIM_Init+0x74>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a26      	ldr	r2, [pc, #152]	; (800260c <LL_TIM_Init+0xf0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00b      	beq.n	8002590 <LL_TIM_Init+0x74>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a25      	ldr	r2, [pc, #148]	; (8002610 <LL_TIM_Init+0xf4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d007      	beq.n	8002590 <LL_TIM_Init+0x74>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <LL_TIM_Init+0xf8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d003      	beq.n	8002590 <LL_TIM_Init+0x74>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a23      	ldr	r2, [pc, #140]	; (8002618 <LL_TIM_Init+0xfc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d106      	bne.n	800259e <LL_TIM_Init+0x82>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a22      	ldr	r2, [pc, #136]	; (800261c <LL_TIM_Init+0x100>)
 8002594:	401a      	ands	r2, r3
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	0011      	movs	r1, r2
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff ff5f 	bl	8002470 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	001a      	movs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	0011      	movs	r1, r2
 80025bc:	0018      	movs	r0, r3
 80025be:	f7ff ff4b 	bl	8002458 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <LL_TIM_Init+0xe8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00b      	beq.n	80025e2 <LL_TIM_Init+0xc6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a10      	ldr	r2, [pc, #64]	; (8002610 <LL_TIM_Init+0xf4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d007      	beq.n	80025e2 <LL_TIM_Init+0xc6>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <LL_TIM_Init+0xf8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d003      	beq.n	80025e2 <LL_TIM_Init+0xc6>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <LL_TIM_Init+0xfc>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d106      	bne.n	80025f0 <LL_TIM_Init+0xd4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	0011      	movs	r1, r2
 80025ea:	0018      	movs	r0, r3
 80025ec:	f7ff ff4c 	bl	8002488 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	0018      	movs	r0, r3
 80025f4:	f7ff ff84 	bl	8002500 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	0018      	movs	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b004      	add	sp, #16
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	40012c00 	.word	0x40012c00
 8002608:	40000400 	.word	0x40000400
 800260c:	40002000 	.word	0x40002000
 8002610:	40014000 	.word	0x40014000
 8002614:	40014400 	.word	0x40014400
 8002618:	40014800 	.word	0x40014800
 800261c:	fffffcff 	.word	0xfffffcff

08002620 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800262c:	2317      	movs	r3, #23
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	015b      	lsls	r3, r3, #5
 800263a:	429a      	cmp	r2, r3
 800263c:	d036      	beq.n	80026ac <LL_TIM_OC_Init+0x8c>
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	015b      	lsls	r3, r3, #5
 8002644:	429a      	cmp	r2, r3
 8002646:	d83c      	bhi.n	80026c2 <LL_TIM_OC_Init+0xa2>
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	429a      	cmp	r2, r3
 8002650:	d021      	beq.n	8002696 <LL_TIM_OC_Init+0x76>
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	429a      	cmp	r2, r3
 800265a:	d832      	bhi.n	80026c2 <LL_TIM_OC_Init+0xa2>
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d003      	beq.n	800266a <LL_TIM_OC_Init+0x4a>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b10      	cmp	r3, #16
 8002666:	d00b      	beq.n	8002680 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002668:	e02b      	b.n	80026c2 <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800266a:	2317      	movs	r3, #23
 800266c:	18fc      	adds	r4, r7, r3
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	0011      	movs	r1, r2
 8002674:	0018      	movs	r0, r3
 8002676:	f000 f82d 	bl	80026d4 <OC1Config>
 800267a:	0003      	movs	r3, r0
 800267c:	7023      	strb	r3, [r4, #0]
      break;
 800267e:	e021      	b.n	80026c4 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002680:	2317      	movs	r3, #23
 8002682:	18fc      	adds	r4, r7, r3
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	0011      	movs	r1, r2
 800268a:	0018      	movs	r0, r3
 800268c:	f000 f8a6 	bl	80027dc <OC2Config>
 8002690:	0003      	movs	r3, r0
 8002692:	7023      	strb	r3, [r4, #0]
      break;
 8002694:	e016      	b.n	80026c4 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002696:	2317      	movs	r3, #23
 8002698:	18fc      	adds	r4, r7, r3
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	0011      	movs	r1, r2
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 f925 	bl	80028f0 <OC3Config>
 80026a6:	0003      	movs	r3, r0
 80026a8:	7023      	strb	r3, [r4, #0]
      break;
 80026aa:	e00b      	b.n	80026c4 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80026ac:	2317      	movs	r3, #23
 80026ae:	18fc      	adds	r4, r7, r3
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	0011      	movs	r1, r2
 80026b6:	0018      	movs	r0, r3
 80026b8:	f000 f9a4 	bl	8002a04 <OC4Config>
 80026bc:	0003      	movs	r3, r0
 80026be:	7023      	strb	r3, [r4, #0]
      break;
 80026c0:	e000      	b.n	80026c4 <LL_TIM_OC_Init+0xa4>
      break;
 80026c2:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 80026c4:	2317      	movs	r3, #23
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	781b      	ldrb	r3, [r3, #0]
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b007      	add	sp, #28
 80026d0:	bd90      	pop	{r4, r7, pc}
	...

080026d4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	2201      	movs	r2, #1
 80026e4:	4393      	bics	r3, r2
 80026e6:	001a      	movs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2203      	movs	r2, #3
 8002702:	4393      	bics	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2270      	movs	r2, #112	; 0x70
 800270a:	4393      	bics	r3, r2
 800270c:	001a      	movs	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2202      	movs	r2, #2
 800271a:	4393      	bics	r3, r2
 800271c:	001a      	movs	r2, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2201      	movs	r2, #1
 800272a:	4393      	bics	r3, r2
 800272c:	001a      	movs	r2, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <OC1Config+0xf0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00b      	beq.n	8002756 <OC1Config+0x82>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <OC1Config+0xf4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d007      	beq.n	8002756 <OC1Config+0x82>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a20      	ldr	r2, [pc, #128]	; (80027cc <OC1Config+0xf8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d003      	beq.n	8002756 <OC1Config+0x82>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <OC1Config+0xfc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d120      	bne.n	8002798 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2208      	movs	r2, #8
 800275a:	4393      	bics	r3, r2
 800275c:	001a      	movs	r2, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4313      	orrs	r3, r2
 8002766:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2204      	movs	r2, #4
 800276c:	4393      	bics	r3, r2
 800276e:	001a      	movs	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4a15      	ldr	r2, [pc, #84]	; (80027d4 <OC1Config+0x100>)
 800277e:	401a      	ands	r2, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <OC1Config+0x104>)
 800278c:	401a      	ands	r2, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	0011      	movs	r1, r2
 80027ac:	0018      	movs	r0, r3
 80027ae:	f7ff fe77 	bl	80024a0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	0018      	movs	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	b006      	add	sp, #24
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	40012c00 	.word	0x40012c00
 80027c8:	40014000 	.word	0x40014000
 80027cc:	40014400 	.word	0x40014400
 80027d0:	40014800 	.word	0x40014800
 80027d4:	fffffeff 	.word	0xfffffeff
 80027d8:	fffffdff 	.word	0xfffffdff

080027dc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	2210      	movs	r2, #16
 80027ec:	4393      	bics	r3, r2
 80027ee:	001a      	movs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4a31      	ldr	r2, [pc, #196]	; (80028d0 <OC2Config+0xf4>)
 800280a:	4013      	ands	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a30      	ldr	r2, [pc, #192]	; (80028d4 <OC2Config+0xf8>)
 8002812:	401a      	ands	r2, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2220      	movs	r2, #32
 8002822:	4393      	bics	r3, r2
 8002824:	001a      	movs	r2, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2210      	movs	r2, #16
 8002834:	4393      	bics	r3, r2
 8002836:	001a      	movs	r2, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a24      	ldr	r2, [pc, #144]	; (80028d8 <OC2Config+0xfc>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00b      	beq.n	8002862 <OC2Config+0x86>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a23      	ldr	r2, [pc, #140]	; (80028dc <OC2Config+0x100>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d007      	beq.n	8002862 <OC2Config+0x86>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a22      	ldr	r2, [pc, #136]	; (80028e0 <OC2Config+0x104>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d003      	beq.n	8002862 <OC2Config+0x86>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a21      	ldr	r2, [pc, #132]	; (80028e4 <OC2Config+0x108>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d121      	bne.n	80028a6 <OC2Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2280      	movs	r2, #128	; 0x80
 8002866:	4393      	bics	r3, r2
 8002868:	001a      	movs	r2, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	019b      	lsls	r3, r3, #6
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2240      	movs	r2, #64	; 0x40
 8002878:	4393      	bics	r3, r2
 800287a:	001a      	movs	r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	019b      	lsls	r3, r3, #6
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4a17      	ldr	r2, [pc, #92]	; (80028e8 <OC2Config+0x10c>)
 800288a:	401a      	ands	r2, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4a14      	ldr	r2, [pc, #80]	; (80028ec <OC2Config+0x110>)
 800289a:	401a      	ands	r2, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0011      	movs	r1, r2
 80028ba:	0018      	movs	r0, r3
 80028bc:	f7ff fdfc 	bl	80024b8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b006      	add	sp, #24
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	fffffcff 	.word	0xfffffcff
 80028d4:	ffff8fff 	.word	0xffff8fff
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40014000 	.word	0x40014000
 80028e0:	40014400 	.word	0x40014400
 80028e4:	40014800 	.word	0x40014800
 80028e8:	fffffbff 	.word	0xfffffbff
 80028ec:	fffff7ff 	.word	0xfffff7ff

080028f0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4a37      	ldr	r2, [pc, #220]	; (80029dc <OC3Config+0xec>)
 8002900:	401a      	ands	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2203      	movs	r2, #3
 800291c:	4393      	bics	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2270      	movs	r2, #112	; 0x70
 8002924:	4393      	bics	r3, r2
 8002926:	001a      	movs	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	4a2b      	ldr	r2, [pc, #172]	; (80029e0 <OC3Config+0xf0>)
 8002934:	401a      	ands	r2, r3
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	4a26      	ldr	r2, [pc, #152]	; (80029dc <OC3Config+0xec>)
 8002944:	401a      	ands	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <OC3Config+0xf4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00b      	beq.n	8002970 <OC3Config+0x80>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <OC3Config+0xf8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d007      	beq.n	8002970 <OC3Config+0x80>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a22      	ldr	r2, [pc, #136]	; (80029ec <OC3Config+0xfc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d003      	beq.n	8002970 <OC3Config+0x80>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a21      	ldr	r2, [pc, #132]	; (80029f0 <OC3Config+0x100>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d11f      	bne.n	80029b0 <OC3Config+0xc0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	4a20      	ldr	r2, [pc, #128]	; (80029f4 <OC3Config+0x104>)
 8002974:	401a      	ands	r2, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	029b      	lsls	r3, r3, #10
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <OC3Config+0x108>)
 8002984:	401a      	ands	r2, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	029b      	lsls	r3, r3, #10
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <OC3Config+0x10c>)
 8002994:	401a      	ands	r2, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <OC3Config+0x110>)
 80029a4:	401a      	ands	r2, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	015b      	lsls	r3, r3, #5
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	0011      	movs	r1, r2
 80029c4:	0018      	movs	r0, r3
 80029c6:	f7ff fd83 	bl	80024d0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	0018      	movs	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b006      	add	sp, #24
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	fffffeff 	.word	0xfffffeff
 80029e0:	fffffdff 	.word	0xfffffdff
 80029e4:	40012c00 	.word	0x40012c00
 80029e8:	40014000 	.word	0x40014000
 80029ec:	40014400 	.word	0x40014400
 80029f0:	40014800 	.word	0x40014800
 80029f4:	fffff7ff 	.word	0xfffff7ff
 80029f8:	fffffbff 	.word	0xfffffbff
 80029fc:	ffffefff 	.word	0xffffefff
 8002a00:	ffffdfff 	.word	0xffffdfff

08002a04 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4a2b      	ldr	r2, [pc, #172]	; (8002ac0 <OC4Config+0xbc>)
 8002a14:	401a      	ands	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a25      	ldr	r2, [pc, #148]	; (8002ac4 <OC4Config+0xc0>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a24      	ldr	r2, [pc, #144]	; (8002ac8 <OC4Config+0xc4>)
 8002a38:	401a      	ands	r2, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4a21      	ldr	r2, [pc, #132]	; (8002acc <OC4Config+0xc8>)
 8002a48:	401a      	ands	r2, r3
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	031b      	lsls	r3, r3, #12
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4a1a      	ldr	r2, [pc, #104]	; (8002ac0 <OC4Config+0xbc>)
 8002a58:	401a      	ands	r2, r3
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	031b      	lsls	r3, r3, #12
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a1a      	ldr	r2, [pc, #104]	; (8002ad0 <OC4Config+0xcc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00b      	beq.n	8002a84 <OC4Config+0x80>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a19      	ldr	r2, [pc, #100]	; (8002ad4 <OC4Config+0xd0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d007      	beq.n	8002a84 <OC4Config+0x80>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <OC4Config+0xd4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d003      	beq.n	8002a84 <OC4Config+0x80>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a17      	ldr	r2, [pc, #92]	; (8002adc <OC4Config+0xd8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d107      	bne.n	8002a94 <OC4Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <OC4Config+0xdc>)
 8002a88:	401a      	ands	r2, r3
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	019b      	lsls	r3, r3, #6
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	0011      	movs	r1, r2
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7ff fd1d 	bl	80024e8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b006      	add	sp, #24
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	ffffefff 	.word	0xffffefff
 8002ac4:	fffffcff 	.word	0xfffffcff
 8002ac8:	ffff8fff 	.word	0xffff8fff
 8002acc:	ffffdfff 	.word	0xffffdfff
 8002ad0:	40012c00 	.word	0x40012c00
 8002ad4:	40014000 	.word	0x40014000
 8002ad8:	40014400 	.word	0x40014400
 8002adc:	40014800 	.word	0x40014800
 8002ae0:	ffffbfff 	.word	0xffffbfff

08002ae4 <LL_USART_IsEnabled>:
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2201      	movs	r2, #1
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <LL_USART_IsEnabled+0x18>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <LL_USART_IsEnabled+0x1a>
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	0018      	movs	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b002      	add	sp, #8
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <LL_USART_SetStopBitsLength>:
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <LL_USART_SetStopBitsLength+0x24>)
 8002b18:	401a      	ands	r2, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	605a      	str	r2, [r3, #4]
}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b002      	add	sp, #8
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	ffffcfff 	.word	0xffffcfff

08002b30 <LL_USART_SetHWFlowCtrl>:
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <LL_USART_SetHWFlowCtrl+0x24>)
 8002b40:	401a      	ands	r2, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	609a      	str	r2, [r3, #8]
}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b002      	add	sp, #8
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	fffffcff 	.word	0xfffffcff

08002b58 <LL_USART_SetBaudRate>:
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d11c      	bne.n	8002baa <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	005a      	lsls	r2, r3, #1
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	085b      	lsrs	r3, r3, #1
 8002b78:	18d3      	adds	r3, r2, r3
 8002b7a:	6839      	ldr	r1, [r7, #0]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7fd facb 	bl	8000118 <__udivsi3>
 8002b82:	0003      	movs	r3, r0
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	4a10      	ldr	r2, [pc, #64]	; (8002bcc <LL_USART_SetBaudRate+0x74>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	085b      	lsrs	r3, r3, #1
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	001a      	movs	r2, r3
 8002b98:	2307      	movs	r3, #7
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	60da      	str	r2, [r3, #12]
}
 8002ba8:	e00c      	b.n	8002bc4 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	085a      	lsrs	r2, r3, #1
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	18d3      	adds	r3, r2, r3
 8002bb2:	6839      	ldr	r1, [r7, #0]
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7fd faaf 	bl	8000118 <__udivsi3>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	001a      	movs	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	60da      	str	r2, [r3, #12]
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b006      	add	sp, #24
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	0000fff0 	.word	0x0000fff0

08002bd0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b089      	sub	sp, #36	; 0x24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002bda:	231f      	movs	r3, #31
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7ff ff7b 	bl	8002ae4 <LL_USART_IsEnabled>
 8002bee:	1e03      	subs	r3, r0, #0
 8002bf0:	d000      	beq.n	8002bf4 <LL_USART_Init+0x24>
 8002bf2:	e090      	b.n	8002d16 <LL_USART_Init+0x146>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a4a      	ldr	r2, [pc, #296]	; (8002d24 <LL_USART_Init+0x154>)
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4319      	orrs	r1, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	4319      	orrs	r1, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	430b      	orrs	r3, r1
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	0011      	movs	r1, r2
 8002c20:	0018      	movs	r0, r3
 8002c22:	f7ff ff71 	bl	8002b08 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0011      	movs	r1, r2
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f7ff ff7e 	bl	8002b30 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a3c      	ldr	r2, [pc, #240]	; (8002d28 <LL_USART_Init+0x158>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d105      	bne.n	8002c48 <LL_USART_Init+0x78>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7ff faa5 	bl	800218c <LL_RCC_GetUSARTClockFreq>
 8002c42:	0003      	movs	r3, r0
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	e053      	b.n	8002cf0 <LL_USART_Init+0x120>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a38      	ldr	r2, [pc, #224]	; (8002d2c <LL_USART_Init+0x15c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d105      	bne.n	8002c5c <LL_USART_Init+0x8c>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002c50:	2010      	movs	r0, #16
 8002c52:	f7ff fa9b 	bl	800218c <LL_RCC_GetUSARTClockFreq>
 8002c56:	0003      	movs	r3, r0
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	e049      	b.n	8002cf0 <LL_USART_Init+0x120>
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#endif /* USART2 */
#if defined(USART3)
    else if (USARTx == USART3)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a34      	ldr	r2, [pc, #208]	; (8002d30 <LL_USART_Init+0x160>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d105      	bne.n	8002c70 <LL_USART_Init+0xa0>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002c64:	2012      	movs	r0, #18
 8002c66:	f7ff fa91 	bl	800218c <LL_RCC_GetUSARTClockFreq>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	e03f      	b.n	8002cf0 <LL_USART_Init+0x120>
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a30      	ldr	r2, [pc, #192]	; (8002d34 <LL_USART_Init+0x164>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d108      	bne.n	8002c8a <LL_USART_Init+0xba>
    {
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002c78:	240c      	movs	r4, #12
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7ff fa67 	bl	8002150 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002c82:	193b      	adds	r3, r7, r4
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	e032      	b.n	8002cf0 <LL_USART_Init+0x120>
    }
#endif /* USART4 */
#if defined(USART5)
    else if (USARTx == USART5)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <LL_USART_Init+0x168>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d108      	bne.n	8002ca4 <LL_USART_Init+0xd4>
    {
      /* USART5 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002c92:	240c      	movs	r4, #12
 8002c94:	193b      	adds	r3, r7, r4
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7ff fa5a 	bl	8002150 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	e025      	b.n	8002cf0 <LL_USART_Init+0x120>
    }
#endif /* USART5 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <LL_USART_Init+0x16c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d108      	bne.n	8002cbe <LL_USART_Init+0xee>
    {
      /* USART6 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002cac:	240c      	movs	r4, #12
 8002cae:	193b      	adds	r3, r7, r4
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7ff fa4d 	bl	8002150 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002cb6:	193b      	adds	r3, r7, r4
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	e018      	b.n	8002cf0 <LL_USART_Init+0x120>
    }
#endif /* USART6 */
#if defined(USART7)
    else if (USARTx == USART7)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a1f      	ldr	r2, [pc, #124]	; (8002d40 <LL_USART_Init+0x170>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d108      	bne.n	8002cd8 <LL_USART_Init+0x108>
    {
      /* USART7 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002cc6:	240c      	movs	r4, #12
 8002cc8:	193b      	adds	r3, r7, r4
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f7ff fa40 	bl	8002150 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002cd0:	193b      	adds	r3, r7, r4
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	e00b      	b.n	8002cf0 <LL_USART_Init+0x120>
    }
#endif /* USART7 */
#if defined(USART8)
    else if (USARTx == USART8)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a1a      	ldr	r2, [pc, #104]	; (8002d44 <LL_USART_Init+0x174>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d107      	bne.n	8002cf0 <LL_USART_Init+0x120>
    {
      /* USART8 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002ce0:	240c      	movs	r4, #12
 8002ce2:	193b      	adds	r3, r7, r4
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7ff fa33 	bl	8002150 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00f      	beq.n	8002d16 <LL_USART_Init+0x146>
        && (USART_InitStruct->BaudRate != 0U))
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <LL_USART_Init+0x146>
    {
      status = SUCCESS;
 8002cfe:	231f      	movs	r3, #31
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69b9      	ldr	r1, [r7, #24]
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff ff21 	bl	8002b58 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002d16:	231f      	movs	r3, #31
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	781b      	ldrb	r3, [r3, #0]
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b009      	add	sp, #36	; 0x24
 8002d22:	bd90      	pop	{r4, r7, pc}
 8002d24:	efff69f3 	.word	0xefff69f3
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40004400 	.word	0x40004400
 8002d30:	40004800 	.word	0x40004800
 8002d34:	40004c00 	.word	0x40004c00
 8002d38:	40005000 	.word	0x40005000
 8002d3c:	40011400 	.word	0x40011400
 8002d40:	40011800 	.word	0x40011800
 8002d44:	40011c00 	.word	0x40011c00

08002d48 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002d52:	6839      	ldr	r1, [r7, #0]
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7fd f9df 	bl	8000118 <__udivsi3>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <LL_InitTick+0x30>)
 8002d60:	3a01      	subs	r2, #1
 8002d62:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <LL_InitTick+0x30>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d6a:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <LL_InitTick+0x30>)
 8002d6c:	2205      	movs	r2, #5
 8002d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b002      	add	sp, #8
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	e000e010 	.word	0xe000e010

08002d7c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002d84:	23fa      	movs	r3, #250	; 0xfa
 8002d86:	009a      	lsls	r2, r3, #2
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f7ff ffdb 	bl	8002d48 <LL_InitTick>
}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b002      	add	sp, #8
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <LL_SetSystemCoreClock+0x18>)
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	601a      	str	r2, [r3, #0]
}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b002      	add	sp, #8
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	20000000 	.word	0x20000000

08002db8 <__errno>:
 8002db8:	4b01      	ldr	r3, [pc, #4]	; (8002dc0 <__errno+0x8>)
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	4770      	bx	lr
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	20000004 	.word	0x20000004

08002dc4 <__libc_init_array>:
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	2600      	movs	r6, #0
 8002dc8:	4d0c      	ldr	r5, [pc, #48]	; (8002dfc <__libc_init_array+0x38>)
 8002dca:	4c0d      	ldr	r4, [pc, #52]	; (8002e00 <__libc_init_array+0x3c>)
 8002dcc:	1b64      	subs	r4, r4, r5
 8002dce:	10a4      	asrs	r4, r4, #2
 8002dd0:	42a6      	cmp	r6, r4
 8002dd2:	d109      	bne.n	8002de8 <__libc_init_array+0x24>
 8002dd4:	2600      	movs	r6, #0
 8002dd6:	f001 f9af 	bl	8004138 <_init>
 8002dda:	4d0a      	ldr	r5, [pc, #40]	; (8002e04 <__libc_init_array+0x40>)
 8002ddc:	4c0a      	ldr	r4, [pc, #40]	; (8002e08 <__libc_init_array+0x44>)
 8002dde:	1b64      	subs	r4, r4, r5
 8002de0:	10a4      	asrs	r4, r4, #2
 8002de2:	42a6      	cmp	r6, r4
 8002de4:	d105      	bne.n	8002df2 <__libc_init_array+0x2e>
 8002de6:	bd70      	pop	{r4, r5, r6, pc}
 8002de8:	00b3      	lsls	r3, r6, #2
 8002dea:	58eb      	ldr	r3, [r5, r3]
 8002dec:	4798      	blx	r3
 8002dee:	3601      	adds	r6, #1
 8002df0:	e7ee      	b.n	8002dd0 <__libc_init_array+0xc>
 8002df2:	00b3      	lsls	r3, r6, #2
 8002df4:	58eb      	ldr	r3, [r5, r3]
 8002df6:	4798      	blx	r3
 8002df8:	3601      	adds	r6, #1
 8002dfa:	e7f2      	b.n	8002de2 <__libc_init_array+0x1e>
 8002dfc:	0800425c 	.word	0x0800425c
 8002e00:	0800425c 	.word	0x0800425c
 8002e04:	0800425c 	.word	0x0800425c
 8002e08:	08004260 	.word	0x08004260

08002e0c <memset>:
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	1882      	adds	r2, r0, r2
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d100      	bne.n	8002e16 <memset+0xa>
 8002e14:	4770      	bx	lr
 8002e16:	7019      	strb	r1, [r3, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	e7f9      	b.n	8002e10 <memset+0x4>

08002e1c <iprintf>:
 8002e1c:	b40f      	push	{r0, r1, r2, r3}
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <iprintf+0x30>)
 8002e20:	b513      	push	{r0, r1, r4, lr}
 8002e22:	681c      	ldr	r4, [r3, #0]
 8002e24:	2c00      	cmp	r4, #0
 8002e26:	d005      	beq.n	8002e34 <iprintf+0x18>
 8002e28:	69a3      	ldr	r3, [r4, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d102      	bne.n	8002e34 <iprintf+0x18>
 8002e2e:	0020      	movs	r0, r4
 8002e30:	f000 fb6c 	bl	800350c <__sinit>
 8002e34:	ab05      	add	r3, sp, #20
 8002e36:	0020      	movs	r0, r4
 8002e38:	9a04      	ldr	r2, [sp, #16]
 8002e3a:	68a1      	ldr	r1, [r4, #8]
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	f000 fd89 	bl	8003954 <_vfiprintf_r>
 8002e42:	bc16      	pop	{r1, r2, r4}
 8002e44:	bc08      	pop	{r3}
 8002e46:	b004      	add	sp, #16
 8002e48:	4718      	bx	r3
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	20000004 	.word	0x20000004

08002e50 <putchar>:
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <putchar+0x24>)
 8002e52:	b570      	push	{r4, r5, r6, lr}
 8002e54:	681c      	ldr	r4, [r3, #0]
 8002e56:	0005      	movs	r5, r0
 8002e58:	2c00      	cmp	r4, #0
 8002e5a:	d005      	beq.n	8002e68 <putchar+0x18>
 8002e5c:	69a3      	ldr	r3, [r4, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <putchar+0x18>
 8002e62:	0020      	movs	r0, r4
 8002e64:	f000 fb52 	bl	800350c <__sinit>
 8002e68:	0029      	movs	r1, r5
 8002e6a:	0020      	movs	r0, r4
 8002e6c:	68a2      	ldr	r2, [r4, #8]
 8002e6e:	f001 f82d 	bl	8003ecc <_putc_r>
 8002e72:	bd70      	pop	{r4, r5, r6, pc}
 8002e74:	20000004 	.word	0x20000004

08002e78 <_puts_r>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	0005      	movs	r5, r0
 8002e7c:	000e      	movs	r6, r1
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	d004      	beq.n	8002e8c <_puts_r+0x14>
 8002e82:	6983      	ldr	r3, [r0, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <_puts_r+0x14>
 8002e88:	f000 fb40 	bl	800350c <__sinit>
 8002e8c:	69ab      	ldr	r3, [r5, #24]
 8002e8e:	68ac      	ldr	r4, [r5, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <_puts_r+0x22>
 8002e94:	0028      	movs	r0, r5
 8002e96:	f000 fb39 	bl	800350c <__sinit>
 8002e9a:	4b2d      	ldr	r3, [pc, #180]	; (8002f50 <_puts_r+0xd8>)
 8002e9c:	429c      	cmp	r4, r3
 8002e9e:	d122      	bne.n	8002ee6 <_puts_r+0x6e>
 8002ea0:	686c      	ldr	r4, [r5, #4]
 8002ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ea4:	07db      	lsls	r3, r3, #31
 8002ea6:	d405      	bmi.n	8002eb4 <_puts_r+0x3c>
 8002ea8:	89a3      	ldrh	r3, [r4, #12]
 8002eaa:	059b      	lsls	r3, r3, #22
 8002eac:	d402      	bmi.n	8002eb4 <_puts_r+0x3c>
 8002eae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eb0:	f000 fbcd 	bl	800364e <__retarget_lock_acquire_recursive>
 8002eb4:	89a3      	ldrh	r3, [r4, #12]
 8002eb6:	071b      	lsls	r3, r3, #28
 8002eb8:	d502      	bpl.n	8002ec0 <_puts_r+0x48>
 8002eba:	6923      	ldr	r3, [r4, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d129      	bne.n	8002f14 <_puts_r+0x9c>
 8002ec0:	0021      	movs	r1, r4
 8002ec2:	0028      	movs	r0, r5
 8002ec4:	f000 f97c 	bl	80031c0 <__swsetup_r>
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	d023      	beq.n	8002f14 <_puts_r+0x9c>
 8002ecc:	2501      	movs	r5, #1
 8002ece:	426d      	negs	r5, r5
 8002ed0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ed2:	07db      	lsls	r3, r3, #31
 8002ed4:	d405      	bmi.n	8002ee2 <_puts_r+0x6a>
 8002ed6:	89a3      	ldrh	r3, [r4, #12]
 8002ed8:	059b      	lsls	r3, r3, #22
 8002eda:	d402      	bmi.n	8002ee2 <_puts_r+0x6a>
 8002edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ede:	f000 fbb7 	bl	8003650 <__retarget_lock_release_recursive>
 8002ee2:	0028      	movs	r0, r5
 8002ee4:	bd70      	pop	{r4, r5, r6, pc}
 8002ee6:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <_puts_r+0xdc>)
 8002ee8:	429c      	cmp	r4, r3
 8002eea:	d101      	bne.n	8002ef0 <_puts_r+0x78>
 8002eec:	68ac      	ldr	r4, [r5, #8]
 8002eee:	e7d8      	b.n	8002ea2 <_puts_r+0x2a>
 8002ef0:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <_puts_r+0xe0>)
 8002ef2:	429c      	cmp	r4, r3
 8002ef4:	d1d5      	bne.n	8002ea2 <_puts_r+0x2a>
 8002ef6:	68ec      	ldr	r4, [r5, #12]
 8002ef8:	e7d3      	b.n	8002ea2 <_puts_r+0x2a>
 8002efa:	3601      	adds	r6, #1
 8002efc:	60a3      	str	r3, [r4, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	da04      	bge.n	8002f0c <_puts_r+0x94>
 8002f02:	69a2      	ldr	r2, [r4, #24]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	dc16      	bgt.n	8002f36 <_puts_r+0xbe>
 8002f08:	290a      	cmp	r1, #10
 8002f0a:	d014      	beq.n	8002f36 <_puts_r+0xbe>
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	6022      	str	r2, [r4, #0]
 8002f12:	7019      	strb	r1, [r3, #0]
 8002f14:	68a3      	ldr	r3, [r4, #8]
 8002f16:	7831      	ldrb	r1, [r6, #0]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	2900      	cmp	r1, #0
 8002f1c:	d1ed      	bne.n	8002efa <_puts_r+0x82>
 8002f1e:	60a3      	str	r3, [r4, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	da0f      	bge.n	8002f44 <_puts_r+0xcc>
 8002f24:	0028      	movs	r0, r5
 8002f26:	0022      	movs	r2, r4
 8002f28:	310a      	adds	r1, #10
 8002f2a:	f000 f8f3 	bl	8003114 <__swbuf_r>
 8002f2e:	250a      	movs	r5, #10
 8002f30:	1c43      	adds	r3, r0, #1
 8002f32:	d1cd      	bne.n	8002ed0 <_puts_r+0x58>
 8002f34:	e7ca      	b.n	8002ecc <_puts_r+0x54>
 8002f36:	0022      	movs	r2, r4
 8002f38:	0028      	movs	r0, r5
 8002f3a:	f000 f8eb 	bl	8003114 <__swbuf_r>
 8002f3e:	1c43      	adds	r3, r0, #1
 8002f40:	d1e8      	bne.n	8002f14 <_puts_r+0x9c>
 8002f42:	e7c3      	b.n	8002ecc <_puts_r+0x54>
 8002f44:	250a      	movs	r5, #10
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	6022      	str	r2, [r4, #0]
 8002f4c:	701d      	strb	r5, [r3, #0]
 8002f4e:	e7bf      	b.n	8002ed0 <_puts_r+0x58>
 8002f50:	080041e8 	.word	0x080041e8
 8002f54:	08004208 	.word	0x08004208
 8002f58:	080041c8 	.word	0x080041c8

08002f5c <puts>:
 8002f5c:	b510      	push	{r4, lr}
 8002f5e:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <puts+0x10>)
 8002f60:	0001      	movs	r1, r0
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	f7ff ff88 	bl	8002e78 <_puts_r>
 8002f68:	bd10      	pop	{r4, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	20000004 	.word	0x20000004

08002f70 <setbuf>:
 8002f70:	424a      	negs	r2, r1
 8002f72:	414a      	adcs	r2, r1
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	b510      	push	{r4, lr}
 8002f78:	0052      	lsls	r2, r2, #1
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	f000 f802 	bl	8002f84 <setvbuf>
 8002f80:	bd10      	pop	{r4, pc}
	...

08002f84 <setvbuf>:
 8002f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f86:	001d      	movs	r5, r3
 8002f88:	4b5d      	ldr	r3, [pc, #372]	; (8003100 <setvbuf+0x17c>)
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	681e      	ldr	r6, [r3, #0]
 8002f8e:	0004      	movs	r4, r0
 8002f90:	000f      	movs	r7, r1
 8002f92:	9200      	str	r2, [sp, #0]
 8002f94:	2e00      	cmp	r6, #0
 8002f96:	d005      	beq.n	8002fa4 <setvbuf+0x20>
 8002f98:	69b3      	ldr	r3, [r6, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <setvbuf+0x20>
 8002f9e:	0030      	movs	r0, r6
 8002fa0:	f000 fab4 	bl	800350c <__sinit>
 8002fa4:	4b57      	ldr	r3, [pc, #348]	; (8003104 <setvbuf+0x180>)
 8002fa6:	429c      	cmp	r4, r3
 8002fa8:	d161      	bne.n	800306e <setvbuf+0xea>
 8002faa:	6874      	ldr	r4, [r6, #4]
 8002fac:	9b00      	ldr	r3, [sp, #0]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d005      	beq.n	8002fbe <setvbuf+0x3a>
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d900      	bls.n	8002fb8 <setvbuf+0x34>
 8002fb6:	e09d      	b.n	80030f4 <setvbuf+0x170>
 8002fb8:	2d00      	cmp	r5, #0
 8002fba:	da00      	bge.n	8002fbe <setvbuf+0x3a>
 8002fbc:	e09a      	b.n	80030f4 <setvbuf+0x170>
 8002fbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fc0:	07db      	lsls	r3, r3, #31
 8002fc2:	d405      	bmi.n	8002fd0 <setvbuf+0x4c>
 8002fc4:	89a3      	ldrh	r3, [r4, #12]
 8002fc6:	059b      	lsls	r3, r3, #22
 8002fc8:	d402      	bmi.n	8002fd0 <setvbuf+0x4c>
 8002fca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fcc:	f000 fb3f 	bl	800364e <__retarget_lock_acquire_recursive>
 8002fd0:	0021      	movs	r1, r4
 8002fd2:	0030      	movs	r0, r6
 8002fd4:	f000 f9f8 	bl	80033c8 <_fflush_r>
 8002fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fda:	2900      	cmp	r1, #0
 8002fdc:	d008      	beq.n	8002ff0 <setvbuf+0x6c>
 8002fde:	0023      	movs	r3, r4
 8002fe0:	3344      	adds	r3, #68	; 0x44
 8002fe2:	4299      	cmp	r1, r3
 8002fe4:	d002      	beq.n	8002fec <setvbuf+0x68>
 8002fe6:	0030      	movs	r0, r6
 8002fe8:	f000 fbaa 	bl	8003740 <_free_r>
 8002fec:	2300      	movs	r3, #0
 8002fee:	6363      	str	r3, [r4, #52]	; 0x34
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61a3      	str	r3, [r4, #24]
 8002ff4:	6063      	str	r3, [r4, #4]
 8002ff6:	89a3      	ldrh	r3, [r4, #12]
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	d503      	bpl.n	8003004 <setvbuf+0x80>
 8002ffc:	0030      	movs	r0, r6
 8002ffe:	6921      	ldr	r1, [r4, #16]
 8003000:	f000 fb9e 	bl	8003740 <_free_r>
 8003004:	89a3      	ldrh	r3, [r4, #12]
 8003006:	4a40      	ldr	r2, [pc, #256]	; (8003108 <setvbuf+0x184>)
 8003008:	4013      	ands	r3, r2
 800300a:	81a3      	strh	r3, [r4, #12]
 800300c:	9b00      	ldr	r3, [sp, #0]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d100      	bne.n	8003014 <setvbuf+0x90>
 8003012:	e069      	b.n	80030e8 <setvbuf+0x164>
 8003014:	ab03      	add	r3, sp, #12
 8003016:	0021      	movs	r1, r4
 8003018:	0030      	movs	r0, r6
 800301a:	aa02      	add	r2, sp, #8
 800301c:	f000 fb1a 	bl	8003654 <__swhatbuf_r>
 8003020:	89a3      	ldrh	r3, [r4, #12]
 8003022:	4303      	orrs	r3, r0
 8003024:	81a3      	strh	r3, [r4, #12]
 8003026:	2d00      	cmp	r5, #0
 8003028:	d12b      	bne.n	8003082 <setvbuf+0xfe>
 800302a:	9d02      	ldr	r5, [sp, #8]
 800302c:	0028      	movs	r0, r5
 800302e:	f000 fb7d 	bl	800372c <malloc>
 8003032:	1e07      	subs	r7, r0, #0
 8003034:	d153      	bne.n	80030de <setvbuf+0x15a>
 8003036:	9b02      	ldr	r3, [sp, #8]
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	42ab      	cmp	r3, r5
 800303c:	d149      	bne.n	80030d2 <setvbuf+0x14e>
 800303e:	2501      	movs	r5, #1
 8003040:	426d      	negs	r5, r5
 8003042:	2302      	movs	r3, #2
 8003044:	89a2      	ldrh	r2, [r4, #12]
 8003046:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003048:	4313      	orrs	r3, r2
 800304a:	2200      	movs	r2, #0
 800304c:	60a2      	str	r2, [r4, #8]
 800304e:	0022      	movs	r2, r4
 8003050:	3247      	adds	r2, #71	; 0x47
 8003052:	6022      	str	r2, [r4, #0]
 8003054:	6122      	str	r2, [r4, #16]
 8003056:	2201      	movs	r2, #1
 8003058:	b21b      	sxth	r3, r3
 800305a:	81a3      	strh	r3, [r4, #12]
 800305c:	6162      	str	r2, [r4, #20]
 800305e:	4211      	tst	r1, r2
 8003060:	d134      	bne.n	80030cc <setvbuf+0x148>
 8003062:	059b      	lsls	r3, r3, #22
 8003064:	d432      	bmi.n	80030cc <setvbuf+0x148>
 8003066:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003068:	f000 faf2 	bl	8003650 <__retarget_lock_release_recursive>
 800306c:	e02e      	b.n	80030cc <setvbuf+0x148>
 800306e:	4b27      	ldr	r3, [pc, #156]	; (800310c <setvbuf+0x188>)
 8003070:	429c      	cmp	r4, r3
 8003072:	d101      	bne.n	8003078 <setvbuf+0xf4>
 8003074:	68b4      	ldr	r4, [r6, #8]
 8003076:	e799      	b.n	8002fac <setvbuf+0x28>
 8003078:	4b25      	ldr	r3, [pc, #148]	; (8003110 <setvbuf+0x18c>)
 800307a:	429c      	cmp	r4, r3
 800307c:	d196      	bne.n	8002fac <setvbuf+0x28>
 800307e:	68f4      	ldr	r4, [r6, #12]
 8003080:	e794      	b.n	8002fac <setvbuf+0x28>
 8003082:	2f00      	cmp	r7, #0
 8003084:	d0d2      	beq.n	800302c <setvbuf+0xa8>
 8003086:	69b3      	ldr	r3, [r6, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d102      	bne.n	8003092 <setvbuf+0x10e>
 800308c:	0030      	movs	r0, r6
 800308e:	f000 fa3d 	bl	800350c <__sinit>
 8003092:	9b00      	ldr	r3, [sp, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d102      	bne.n	800309e <setvbuf+0x11a>
 8003098:	89a2      	ldrh	r2, [r4, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	81a3      	strh	r3, [r4, #12]
 800309e:	89a2      	ldrh	r2, [r4, #12]
 80030a0:	2308      	movs	r3, #8
 80030a2:	0011      	movs	r1, r2
 80030a4:	6027      	str	r7, [r4, #0]
 80030a6:	6127      	str	r7, [r4, #16]
 80030a8:	6165      	str	r5, [r4, #20]
 80030aa:	4019      	ands	r1, r3
 80030ac:	421a      	tst	r2, r3
 80030ae:	d01f      	beq.n	80030f0 <setvbuf+0x16c>
 80030b0:	07d3      	lsls	r3, r2, #31
 80030b2:	d51b      	bpl.n	80030ec <setvbuf+0x168>
 80030b4:	2300      	movs	r3, #0
 80030b6:	426d      	negs	r5, r5
 80030b8:	60a3      	str	r3, [r4, #8]
 80030ba:	61a5      	str	r5, [r4, #24]
 80030bc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80030be:	2301      	movs	r3, #1
 80030c0:	000d      	movs	r5, r1
 80030c2:	401d      	ands	r5, r3
 80030c4:	4219      	tst	r1, r3
 80030c6:	d118      	bne.n	80030fa <setvbuf+0x176>
 80030c8:	0593      	lsls	r3, r2, #22
 80030ca:	d5cc      	bpl.n	8003066 <setvbuf+0xe2>
 80030cc:	0028      	movs	r0, r5
 80030ce:	b005      	add	sp, #20
 80030d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030d2:	9801      	ldr	r0, [sp, #4]
 80030d4:	f000 fb2a 	bl	800372c <malloc>
 80030d8:	9d01      	ldr	r5, [sp, #4]
 80030da:	1e07      	subs	r7, r0, #0
 80030dc:	d0af      	beq.n	800303e <setvbuf+0xba>
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	89a2      	ldrh	r2, [r4, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	81a3      	strh	r3, [r4, #12]
 80030e6:	e7ce      	b.n	8003086 <setvbuf+0x102>
 80030e8:	2500      	movs	r5, #0
 80030ea:	e7aa      	b.n	8003042 <setvbuf+0xbe>
 80030ec:	60a5      	str	r5, [r4, #8]
 80030ee:	e7e5      	b.n	80030bc <setvbuf+0x138>
 80030f0:	60a1      	str	r1, [r4, #8]
 80030f2:	e7e3      	b.n	80030bc <setvbuf+0x138>
 80030f4:	2501      	movs	r5, #1
 80030f6:	426d      	negs	r5, r5
 80030f8:	e7e8      	b.n	80030cc <setvbuf+0x148>
 80030fa:	2500      	movs	r5, #0
 80030fc:	e7e6      	b.n	80030cc <setvbuf+0x148>
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	20000004 	.word	0x20000004
 8003104:	080041e8 	.word	0x080041e8
 8003108:	fffff35c 	.word	0xfffff35c
 800310c:	08004208 	.word	0x08004208
 8003110:	080041c8 	.word	0x080041c8

08003114 <__swbuf_r>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	0005      	movs	r5, r0
 8003118:	000e      	movs	r6, r1
 800311a:	0014      	movs	r4, r2
 800311c:	2800      	cmp	r0, #0
 800311e:	d004      	beq.n	800312a <__swbuf_r+0x16>
 8003120:	6983      	ldr	r3, [r0, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <__swbuf_r+0x16>
 8003126:	f000 f9f1 	bl	800350c <__sinit>
 800312a:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <__swbuf_r+0xa0>)
 800312c:	429c      	cmp	r4, r3
 800312e:	d12e      	bne.n	800318e <__swbuf_r+0x7a>
 8003130:	686c      	ldr	r4, [r5, #4]
 8003132:	69a3      	ldr	r3, [r4, #24]
 8003134:	60a3      	str	r3, [r4, #8]
 8003136:	89a3      	ldrh	r3, [r4, #12]
 8003138:	071b      	lsls	r3, r3, #28
 800313a:	d532      	bpl.n	80031a2 <__swbuf_r+0x8e>
 800313c:	6923      	ldr	r3, [r4, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d02f      	beq.n	80031a2 <__swbuf_r+0x8e>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	6922      	ldr	r2, [r4, #16]
 8003146:	b2f7      	uxtb	r7, r6
 8003148:	1a98      	subs	r0, r3, r2
 800314a:	6963      	ldr	r3, [r4, #20]
 800314c:	b2f6      	uxtb	r6, r6
 800314e:	4283      	cmp	r3, r0
 8003150:	dc05      	bgt.n	800315e <__swbuf_r+0x4a>
 8003152:	0021      	movs	r1, r4
 8003154:	0028      	movs	r0, r5
 8003156:	f000 f937 	bl	80033c8 <_fflush_r>
 800315a:	2800      	cmp	r0, #0
 800315c:	d127      	bne.n	80031ae <__swbuf_r+0x9a>
 800315e:	68a3      	ldr	r3, [r4, #8]
 8003160:	3001      	adds	r0, #1
 8003162:	3b01      	subs	r3, #1
 8003164:	60a3      	str	r3, [r4, #8]
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	6022      	str	r2, [r4, #0]
 800316c:	701f      	strb	r7, [r3, #0]
 800316e:	6963      	ldr	r3, [r4, #20]
 8003170:	4283      	cmp	r3, r0
 8003172:	d004      	beq.n	800317e <__swbuf_r+0x6a>
 8003174:	89a3      	ldrh	r3, [r4, #12]
 8003176:	07db      	lsls	r3, r3, #31
 8003178:	d507      	bpl.n	800318a <__swbuf_r+0x76>
 800317a:	2e0a      	cmp	r6, #10
 800317c:	d105      	bne.n	800318a <__swbuf_r+0x76>
 800317e:	0021      	movs	r1, r4
 8003180:	0028      	movs	r0, r5
 8003182:	f000 f921 	bl	80033c8 <_fflush_r>
 8003186:	2800      	cmp	r0, #0
 8003188:	d111      	bne.n	80031ae <__swbuf_r+0x9a>
 800318a:	0030      	movs	r0, r6
 800318c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <__swbuf_r+0xa4>)
 8003190:	429c      	cmp	r4, r3
 8003192:	d101      	bne.n	8003198 <__swbuf_r+0x84>
 8003194:	68ac      	ldr	r4, [r5, #8]
 8003196:	e7cc      	b.n	8003132 <__swbuf_r+0x1e>
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <__swbuf_r+0xa8>)
 800319a:	429c      	cmp	r4, r3
 800319c:	d1c9      	bne.n	8003132 <__swbuf_r+0x1e>
 800319e:	68ec      	ldr	r4, [r5, #12]
 80031a0:	e7c7      	b.n	8003132 <__swbuf_r+0x1e>
 80031a2:	0021      	movs	r1, r4
 80031a4:	0028      	movs	r0, r5
 80031a6:	f000 f80b 	bl	80031c0 <__swsetup_r>
 80031aa:	2800      	cmp	r0, #0
 80031ac:	d0c9      	beq.n	8003142 <__swbuf_r+0x2e>
 80031ae:	2601      	movs	r6, #1
 80031b0:	4276      	negs	r6, r6
 80031b2:	e7ea      	b.n	800318a <__swbuf_r+0x76>
 80031b4:	080041e8 	.word	0x080041e8
 80031b8:	08004208 	.word	0x08004208
 80031bc:	080041c8 	.word	0x080041c8

080031c0 <__swsetup_r>:
 80031c0:	4b37      	ldr	r3, [pc, #220]	; (80032a0 <__swsetup_r+0xe0>)
 80031c2:	b570      	push	{r4, r5, r6, lr}
 80031c4:	681d      	ldr	r5, [r3, #0]
 80031c6:	0006      	movs	r6, r0
 80031c8:	000c      	movs	r4, r1
 80031ca:	2d00      	cmp	r5, #0
 80031cc:	d005      	beq.n	80031da <__swsetup_r+0x1a>
 80031ce:	69ab      	ldr	r3, [r5, #24]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <__swsetup_r+0x1a>
 80031d4:	0028      	movs	r0, r5
 80031d6:	f000 f999 	bl	800350c <__sinit>
 80031da:	4b32      	ldr	r3, [pc, #200]	; (80032a4 <__swsetup_r+0xe4>)
 80031dc:	429c      	cmp	r4, r3
 80031de:	d10f      	bne.n	8003200 <__swsetup_r+0x40>
 80031e0:	686c      	ldr	r4, [r5, #4]
 80031e2:	230c      	movs	r3, #12
 80031e4:	5ee2      	ldrsh	r2, [r4, r3]
 80031e6:	b293      	uxth	r3, r2
 80031e8:	0711      	lsls	r1, r2, #28
 80031ea:	d42d      	bmi.n	8003248 <__swsetup_r+0x88>
 80031ec:	06d9      	lsls	r1, r3, #27
 80031ee:	d411      	bmi.n	8003214 <__swsetup_r+0x54>
 80031f0:	2309      	movs	r3, #9
 80031f2:	2001      	movs	r0, #1
 80031f4:	6033      	str	r3, [r6, #0]
 80031f6:	3337      	adds	r3, #55	; 0x37
 80031f8:	4313      	orrs	r3, r2
 80031fa:	81a3      	strh	r3, [r4, #12]
 80031fc:	4240      	negs	r0, r0
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <__swsetup_r+0xe8>)
 8003202:	429c      	cmp	r4, r3
 8003204:	d101      	bne.n	800320a <__swsetup_r+0x4a>
 8003206:	68ac      	ldr	r4, [r5, #8]
 8003208:	e7eb      	b.n	80031e2 <__swsetup_r+0x22>
 800320a:	4b28      	ldr	r3, [pc, #160]	; (80032ac <__swsetup_r+0xec>)
 800320c:	429c      	cmp	r4, r3
 800320e:	d1e8      	bne.n	80031e2 <__swsetup_r+0x22>
 8003210:	68ec      	ldr	r4, [r5, #12]
 8003212:	e7e6      	b.n	80031e2 <__swsetup_r+0x22>
 8003214:	075b      	lsls	r3, r3, #29
 8003216:	d513      	bpl.n	8003240 <__swsetup_r+0x80>
 8003218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800321a:	2900      	cmp	r1, #0
 800321c:	d008      	beq.n	8003230 <__swsetup_r+0x70>
 800321e:	0023      	movs	r3, r4
 8003220:	3344      	adds	r3, #68	; 0x44
 8003222:	4299      	cmp	r1, r3
 8003224:	d002      	beq.n	800322c <__swsetup_r+0x6c>
 8003226:	0030      	movs	r0, r6
 8003228:	f000 fa8a 	bl	8003740 <_free_r>
 800322c:	2300      	movs	r3, #0
 800322e:	6363      	str	r3, [r4, #52]	; 0x34
 8003230:	2224      	movs	r2, #36	; 0x24
 8003232:	89a3      	ldrh	r3, [r4, #12]
 8003234:	4393      	bics	r3, r2
 8003236:	81a3      	strh	r3, [r4, #12]
 8003238:	2300      	movs	r3, #0
 800323a:	6063      	str	r3, [r4, #4]
 800323c:	6923      	ldr	r3, [r4, #16]
 800323e:	6023      	str	r3, [r4, #0]
 8003240:	2308      	movs	r3, #8
 8003242:	89a2      	ldrh	r2, [r4, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	81a3      	strh	r3, [r4, #12]
 8003248:	6923      	ldr	r3, [r4, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10b      	bne.n	8003266 <__swsetup_r+0xa6>
 800324e:	21a0      	movs	r1, #160	; 0xa0
 8003250:	2280      	movs	r2, #128	; 0x80
 8003252:	89a3      	ldrh	r3, [r4, #12]
 8003254:	0089      	lsls	r1, r1, #2
 8003256:	0092      	lsls	r2, r2, #2
 8003258:	400b      	ands	r3, r1
 800325a:	4293      	cmp	r3, r2
 800325c:	d003      	beq.n	8003266 <__swsetup_r+0xa6>
 800325e:	0021      	movs	r1, r4
 8003260:	0030      	movs	r0, r6
 8003262:	f000 fa1f 	bl	80036a4 <__smakebuf_r>
 8003266:	220c      	movs	r2, #12
 8003268:	5ea3      	ldrsh	r3, [r4, r2]
 800326a:	2001      	movs	r0, #1
 800326c:	001a      	movs	r2, r3
 800326e:	b299      	uxth	r1, r3
 8003270:	4002      	ands	r2, r0
 8003272:	4203      	tst	r3, r0
 8003274:	d00f      	beq.n	8003296 <__swsetup_r+0xd6>
 8003276:	2200      	movs	r2, #0
 8003278:	60a2      	str	r2, [r4, #8]
 800327a:	6962      	ldr	r2, [r4, #20]
 800327c:	4252      	negs	r2, r2
 800327e:	61a2      	str	r2, [r4, #24]
 8003280:	2000      	movs	r0, #0
 8003282:	6922      	ldr	r2, [r4, #16]
 8003284:	4282      	cmp	r2, r0
 8003286:	d1ba      	bne.n	80031fe <__swsetup_r+0x3e>
 8003288:	060a      	lsls	r2, r1, #24
 800328a:	d5b8      	bpl.n	80031fe <__swsetup_r+0x3e>
 800328c:	2240      	movs	r2, #64	; 0x40
 800328e:	4313      	orrs	r3, r2
 8003290:	81a3      	strh	r3, [r4, #12]
 8003292:	3801      	subs	r0, #1
 8003294:	e7b3      	b.n	80031fe <__swsetup_r+0x3e>
 8003296:	0788      	lsls	r0, r1, #30
 8003298:	d400      	bmi.n	800329c <__swsetup_r+0xdc>
 800329a:	6962      	ldr	r2, [r4, #20]
 800329c:	60a2      	str	r2, [r4, #8]
 800329e:	e7ef      	b.n	8003280 <__swsetup_r+0xc0>
 80032a0:	20000004 	.word	0x20000004
 80032a4:	080041e8 	.word	0x080041e8
 80032a8:	08004208 	.word	0x08004208
 80032ac:	080041c8 	.word	0x080041c8

080032b0 <__sflush_r>:
 80032b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032b2:	898b      	ldrh	r3, [r1, #12]
 80032b4:	0005      	movs	r5, r0
 80032b6:	000c      	movs	r4, r1
 80032b8:	071a      	lsls	r2, r3, #28
 80032ba:	d45f      	bmi.n	800337c <__sflush_r+0xcc>
 80032bc:	684a      	ldr	r2, [r1, #4]
 80032be:	2a00      	cmp	r2, #0
 80032c0:	dc04      	bgt.n	80032cc <__sflush_r+0x1c>
 80032c2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80032c4:	2a00      	cmp	r2, #0
 80032c6:	dc01      	bgt.n	80032cc <__sflush_r+0x1c>
 80032c8:	2000      	movs	r0, #0
 80032ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80032cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80032ce:	2f00      	cmp	r7, #0
 80032d0:	d0fa      	beq.n	80032c8 <__sflush_r+0x18>
 80032d2:	2200      	movs	r2, #0
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	682e      	ldr	r6, [r5, #0]
 80032d8:	602a      	str	r2, [r5, #0]
 80032da:	001a      	movs	r2, r3
 80032dc:	0149      	lsls	r1, r1, #5
 80032de:	400a      	ands	r2, r1
 80032e0:	420b      	tst	r3, r1
 80032e2:	d034      	beq.n	800334e <__sflush_r+0x9e>
 80032e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	075b      	lsls	r3, r3, #29
 80032ea:	d506      	bpl.n	80032fa <__sflush_r+0x4a>
 80032ec:	6863      	ldr	r3, [r4, #4]
 80032ee:	1ac0      	subs	r0, r0, r3
 80032f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <__sflush_r+0x4a>
 80032f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032f8:	1ac0      	subs	r0, r0, r3
 80032fa:	0002      	movs	r2, r0
 80032fc:	6a21      	ldr	r1, [r4, #32]
 80032fe:	2300      	movs	r3, #0
 8003300:	0028      	movs	r0, r5
 8003302:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003304:	47b8      	blx	r7
 8003306:	89a1      	ldrh	r1, [r4, #12]
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d106      	bne.n	800331a <__sflush_r+0x6a>
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	2b1d      	cmp	r3, #29
 8003310:	d831      	bhi.n	8003376 <__sflush_r+0xc6>
 8003312:	4a2c      	ldr	r2, [pc, #176]	; (80033c4 <__sflush_r+0x114>)
 8003314:	40da      	lsrs	r2, r3
 8003316:	07d3      	lsls	r3, r2, #31
 8003318:	d52d      	bpl.n	8003376 <__sflush_r+0xc6>
 800331a:	2300      	movs	r3, #0
 800331c:	6063      	str	r3, [r4, #4]
 800331e:	6923      	ldr	r3, [r4, #16]
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	04cb      	lsls	r3, r1, #19
 8003324:	d505      	bpl.n	8003332 <__sflush_r+0x82>
 8003326:	1c43      	adds	r3, r0, #1
 8003328:	d102      	bne.n	8003330 <__sflush_r+0x80>
 800332a:	682b      	ldr	r3, [r5, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d100      	bne.n	8003332 <__sflush_r+0x82>
 8003330:	6560      	str	r0, [r4, #84]	; 0x54
 8003332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003334:	602e      	str	r6, [r5, #0]
 8003336:	2900      	cmp	r1, #0
 8003338:	d0c6      	beq.n	80032c8 <__sflush_r+0x18>
 800333a:	0023      	movs	r3, r4
 800333c:	3344      	adds	r3, #68	; 0x44
 800333e:	4299      	cmp	r1, r3
 8003340:	d002      	beq.n	8003348 <__sflush_r+0x98>
 8003342:	0028      	movs	r0, r5
 8003344:	f000 f9fc 	bl	8003740 <_free_r>
 8003348:	2000      	movs	r0, #0
 800334a:	6360      	str	r0, [r4, #52]	; 0x34
 800334c:	e7bd      	b.n	80032ca <__sflush_r+0x1a>
 800334e:	2301      	movs	r3, #1
 8003350:	0028      	movs	r0, r5
 8003352:	6a21      	ldr	r1, [r4, #32]
 8003354:	47b8      	blx	r7
 8003356:	1c43      	adds	r3, r0, #1
 8003358:	d1c5      	bne.n	80032e6 <__sflush_r+0x36>
 800335a:	682b      	ldr	r3, [r5, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0c2      	beq.n	80032e6 <__sflush_r+0x36>
 8003360:	2b1d      	cmp	r3, #29
 8003362:	d001      	beq.n	8003368 <__sflush_r+0xb8>
 8003364:	2b16      	cmp	r3, #22
 8003366:	d101      	bne.n	800336c <__sflush_r+0xbc>
 8003368:	602e      	str	r6, [r5, #0]
 800336a:	e7ad      	b.n	80032c8 <__sflush_r+0x18>
 800336c:	2340      	movs	r3, #64	; 0x40
 800336e:	89a2      	ldrh	r2, [r4, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	81a3      	strh	r3, [r4, #12]
 8003374:	e7a9      	b.n	80032ca <__sflush_r+0x1a>
 8003376:	2340      	movs	r3, #64	; 0x40
 8003378:	430b      	orrs	r3, r1
 800337a:	e7fa      	b.n	8003372 <__sflush_r+0xc2>
 800337c:	690f      	ldr	r7, [r1, #16]
 800337e:	2f00      	cmp	r7, #0
 8003380:	d0a2      	beq.n	80032c8 <__sflush_r+0x18>
 8003382:	680a      	ldr	r2, [r1, #0]
 8003384:	600f      	str	r7, [r1, #0]
 8003386:	1bd2      	subs	r2, r2, r7
 8003388:	9201      	str	r2, [sp, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	079b      	lsls	r3, r3, #30
 800338e:	d100      	bne.n	8003392 <__sflush_r+0xe2>
 8003390:	694a      	ldr	r2, [r1, #20]
 8003392:	60a2      	str	r2, [r4, #8]
 8003394:	9b01      	ldr	r3, [sp, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	dc00      	bgt.n	800339c <__sflush_r+0xec>
 800339a:	e795      	b.n	80032c8 <__sflush_r+0x18>
 800339c:	003a      	movs	r2, r7
 800339e:	0028      	movs	r0, r5
 80033a0:	9b01      	ldr	r3, [sp, #4]
 80033a2:	6a21      	ldr	r1, [r4, #32]
 80033a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80033a6:	47b0      	blx	r6
 80033a8:	2800      	cmp	r0, #0
 80033aa:	dc06      	bgt.n	80033ba <__sflush_r+0x10a>
 80033ac:	2340      	movs	r3, #64	; 0x40
 80033ae:	2001      	movs	r0, #1
 80033b0:	89a2      	ldrh	r2, [r4, #12]
 80033b2:	4240      	negs	r0, r0
 80033b4:	4313      	orrs	r3, r2
 80033b6:	81a3      	strh	r3, [r4, #12]
 80033b8:	e787      	b.n	80032ca <__sflush_r+0x1a>
 80033ba:	9b01      	ldr	r3, [sp, #4]
 80033bc:	183f      	adds	r7, r7, r0
 80033be:	1a1b      	subs	r3, r3, r0
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	e7e7      	b.n	8003394 <__sflush_r+0xe4>
 80033c4:	20400001 	.word	0x20400001

080033c8 <_fflush_r>:
 80033c8:	690b      	ldr	r3, [r1, #16]
 80033ca:	b570      	push	{r4, r5, r6, lr}
 80033cc:	0005      	movs	r5, r0
 80033ce:	000c      	movs	r4, r1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <_fflush_r+0x12>
 80033d4:	2500      	movs	r5, #0
 80033d6:	0028      	movs	r0, r5
 80033d8:	bd70      	pop	{r4, r5, r6, pc}
 80033da:	2800      	cmp	r0, #0
 80033dc:	d004      	beq.n	80033e8 <_fflush_r+0x20>
 80033de:	6983      	ldr	r3, [r0, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <_fflush_r+0x20>
 80033e4:	f000 f892 	bl	800350c <__sinit>
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <_fflush_r+0x74>)
 80033ea:	429c      	cmp	r4, r3
 80033ec:	d11b      	bne.n	8003426 <_fflush_r+0x5e>
 80033ee:	686c      	ldr	r4, [r5, #4]
 80033f0:	220c      	movs	r2, #12
 80033f2:	5ea3      	ldrsh	r3, [r4, r2]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ed      	beq.n	80033d4 <_fflush_r+0xc>
 80033f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033fa:	07d2      	lsls	r2, r2, #31
 80033fc:	d404      	bmi.n	8003408 <_fflush_r+0x40>
 80033fe:	059b      	lsls	r3, r3, #22
 8003400:	d402      	bmi.n	8003408 <_fflush_r+0x40>
 8003402:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003404:	f000 f923 	bl	800364e <__retarget_lock_acquire_recursive>
 8003408:	0028      	movs	r0, r5
 800340a:	0021      	movs	r1, r4
 800340c:	f7ff ff50 	bl	80032b0 <__sflush_r>
 8003410:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003412:	0005      	movs	r5, r0
 8003414:	07db      	lsls	r3, r3, #31
 8003416:	d4de      	bmi.n	80033d6 <_fflush_r+0xe>
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	059b      	lsls	r3, r3, #22
 800341c:	d4db      	bmi.n	80033d6 <_fflush_r+0xe>
 800341e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003420:	f000 f916 	bl	8003650 <__retarget_lock_release_recursive>
 8003424:	e7d7      	b.n	80033d6 <_fflush_r+0xe>
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <_fflush_r+0x78>)
 8003428:	429c      	cmp	r4, r3
 800342a:	d101      	bne.n	8003430 <_fflush_r+0x68>
 800342c:	68ac      	ldr	r4, [r5, #8]
 800342e:	e7df      	b.n	80033f0 <_fflush_r+0x28>
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <_fflush_r+0x7c>)
 8003432:	429c      	cmp	r4, r3
 8003434:	d1dc      	bne.n	80033f0 <_fflush_r+0x28>
 8003436:	68ec      	ldr	r4, [r5, #12]
 8003438:	e7da      	b.n	80033f0 <_fflush_r+0x28>
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	080041e8 	.word	0x080041e8
 8003440:	08004208 	.word	0x08004208
 8003444:	080041c8 	.word	0x080041c8

08003448 <std>:
 8003448:	2300      	movs	r3, #0
 800344a:	b510      	push	{r4, lr}
 800344c:	0004      	movs	r4, r0
 800344e:	6003      	str	r3, [r0, #0]
 8003450:	6043      	str	r3, [r0, #4]
 8003452:	6083      	str	r3, [r0, #8]
 8003454:	8181      	strh	r1, [r0, #12]
 8003456:	6643      	str	r3, [r0, #100]	; 0x64
 8003458:	0019      	movs	r1, r3
 800345a:	81c2      	strh	r2, [r0, #14]
 800345c:	6103      	str	r3, [r0, #16]
 800345e:	6143      	str	r3, [r0, #20]
 8003460:	6183      	str	r3, [r0, #24]
 8003462:	2208      	movs	r2, #8
 8003464:	305c      	adds	r0, #92	; 0x5c
 8003466:	f7ff fcd1 	bl	8002e0c <memset>
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <std+0x38>)
 800346c:	6224      	str	r4, [r4, #32]
 800346e:	6263      	str	r3, [r4, #36]	; 0x24
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <std+0x3c>)
 8003472:	62a3      	str	r3, [r4, #40]	; 0x28
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <std+0x40>)
 8003476:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <std+0x44>)
 800347a:	6323      	str	r3, [r4, #48]	; 0x30
 800347c:	bd10      	pop	{r4, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	08003f85 	.word	0x08003f85
 8003484:	08003fad 	.word	0x08003fad
 8003488:	08003fe5 	.word	0x08003fe5
 800348c:	08004011 	.word	0x08004011

08003490 <_cleanup_r>:
 8003490:	b510      	push	{r4, lr}
 8003492:	4902      	ldr	r1, [pc, #8]	; (800349c <_cleanup_r+0xc>)
 8003494:	f000 f8ba 	bl	800360c <_fwalk_reent>
 8003498:	bd10      	pop	{r4, pc}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	080033c9 	.word	0x080033c9

080034a0 <__sfmoreglue>:
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	2568      	movs	r5, #104	; 0x68
 80034a4:	1e4a      	subs	r2, r1, #1
 80034a6:	4355      	muls	r5, r2
 80034a8:	000e      	movs	r6, r1
 80034aa:	0029      	movs	r1, r5
 80034ac:	3174      	adds	r1, #116	; 0x74
 80034ae:	f000 f9b3 	bl	8003818 <_malloc_r>
 80034b2:	1e04      	subs	r4, r0, #0
 80034b4:	d008      	beq.n	80034c8 <__sfmoreglue+0x28>
 80034b6:	2100      	movs	r1, #0
 80034b8:	002a      	movs	r2, r5
 80034ba:	6001      	str	r1, [r0, #0]
 80034bc:	6046      	str	r6, [r0, #4]
 80034be:	300c      	adds	r0, #12
 80034c0:	60a0      	str	r0, [r4, #8]
 80034c2:	3268      	adds	r2, #104	; 0x68
 80034c4:	f7ff fca2 	bl	8002e0c <memset>
 80034c8:	0020      	movs	r0, r4
 80034ca:	bd70      	pop	{r4, r5, r6, pc}

080034cc <__sfp_lock_acquire>:
 80034cc:	b510      	push	{r4, lr}
 80034ce:	4802      	ldr	r0, [pc, #8]	; (80034d8 <__sfp_lock_acquire+0xc>)
 80034d0:	f000 f8bd 	bl	800364e <__retarget_lock_acquire_recursive>
 80034d4:	bd10      	pop	{r4, pc}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	200003a1 	.word	0x200003a1

080034dc <__sfp_lock_release>:
 80034dc:	b510      	push	{r4, lr}
 80034de:	4802      	ldr	r0, [pc, #8]	; (80034e8 <__sfp_lock_release+0xc>)
 80034e0:	f000 f8b6 	bl	8003650 <__retarget_lock_release_recursive>
 80034e4:	bd10      	pop	{r4, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	200003a1 	.word	0x200003a1

080034ec <__sinit_lock_acquire>:
 80034ec:	b510      	push	{r4, lr}
 80034ee:	4802      	ldr	r0, [pc, #8]	; (80034f8 <__sinit_lock_acquire+0xc>)
 80034f0:	f000 f8ad 	bl	800364e <__retarget_lock_acquire_recursive>
 80034f4:	bd10      	pop	{r4, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	200003a2 	.word	0x200003a2

080034fc <__sinit_lock_release>:
 80034fc:	b510      	push	{r4, lr}
 80034fe:	4802      	ldr	r0, [pc, #8]	; (8003508 <__sinit_lock_release+0xc>)
 8003500:	f000 f8a6 	bl	8003650 <__retarget_lock_release_recursive>
 8003504:	bd10      	pop	{r4, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	200003a2 	.word	0x200003a2

0800350c <__sinit>:
 800350c:	b513      	push	{r0, r1, r4, lr}
 800350e:	0004      	movs	r4, r0
 8003510:	f7ff ffec 	bl	80034ec <__sinit_lock_acquire>
 8003514:	69a3      	ldr	r3, [r4, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <__sinit+0x14>
 800351a:	f7ff ffef 	bl	80034fc <__sinit_lock_release>
 800351e:	bd13      	pop	{r0, r1, r4, pc}
 8003520:	64a3      	str	r3, [r4, #72]	; 0x48
 8003522:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003524:	6523      	str	r3, [r4, #80]	; 0x50
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <__sinit+0x68>)
 8003528:	4a13      	ldr	r2, [pc, #76]	; (8003578 <__sinit+0x6c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	62a2      	str	r2, [r4, #40]	; 0x28
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	42a3      	cmp	r3, r4
 8003532:	d101      	bne.n	8003538 <__sinit+0x2c>
 8003534:	2301      	movs	r3, #1
 8003536:	61a3      	str	r3, [r4, #24]
 8003538:	0020      	movs	r0, r4
 800353a:	f000 f81f 	bl	800357c <__sfp>
 800353e:	6060      	str	r0, [r4, #4]
 8003540:	0020      	movs	r0, r4
 8003542:	f000 f81b 	bl	800357c <__sfp>
 8003546:	60a0      	str	r0, [r4, #8]
 8003548:	0020      	movs	r0, r4
 800354a:	f000 f817 	bl	800357c <__sfp>
 800354e:	2200      	movs	r2, #0
 8003550:	2104      	movs	r1, #4
 8003552:	60e0      	str	r0, [r4, #12]
 8003554:	6860      	ldr	r0, [r4, #4]
 8003556:	f7ff ff77 	bl	8003448 <std>
 800355a:	2201      	movs	r2, #1
 800355c:	2109      	movs	r1, #9
 800355e:	68a0      	ldr	r0, [r4, #8]
 8003560:	f7ff ff72 	bl	8003448 <std>
 8003564:	2202      	movs	r2, #2
 8003566:	2112      	movs	r1, #18
 8003568:	68e0      	ldr	r0, [r4, #12]
 800356a:	f7ff ff6d 	bl	8003448 <std>
 800356e:	2301      	movs	r3, #1
 8003570:	61a3      	str	r3, [r4, #24]
 8003572:	e7d2      	b.n	800351a <__sinit+0xe>
 8003574:	080041c4 	.word	0x080041c4
 8003578:	08003491 	.word	0x08003491

0800357c <__sfp>:
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357e:	0007      	movs	r7, r0
 8003580:	f7ff ffa4 	bl	80034cc <__sfp_lock_acquire>
 8003584:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <__sfp+0x88>)
 8003586:	681e      	ldr	r6, [r3, #0]
 8003588:	69b3      	ldr	r3, [r6, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <__sfp+0x18>
 800358e:	0030      	movs	r0, r6
 8003590:	f7ff ffbc 	bl	800350c <__sinit>
 8003594:	3648      	adds	r6, #72	; 0x48
 8003596:	68b4      	ldr	r4, [r6, #8]
 8003598:	6873      	ldr	r3, [r6, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	d504      	bpl.n	80035a8 <__sfp+0x2c>
 800359e:	6833      	ldr	r3, [r6, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d022      	beq.n	80035ea <__sfp+0x6e>
 80035a4:	6836      	ldr	r6, [r6, #0]
 80035a6:	e7f6      	b.n	8003596 <__sfp+0x1a>
 80035a8:	220c      	movs	r2, #12
 80035aa:	5ea5      	ldrsh	r5, [r4, r2]
 80035ac:	2d00      	cmp	r5, #0
 80035ae:	d11a      	bne.n	80035e6 <__sfp+0x6a>
 80035b0:	0020      	movs	r0, r4
 80035b2:	4b15      	ldr	r3, [pc, #84]	; (8003608 <__sfp+0x8c>)
 80035b4:	3058      	adds	r0, #88	; 0x58
 80035b6:	60e3      	str	r3, [r4, #12]
 80035b8:	6665      	str	r5, [r4, #100]	; 0x64
 80035ba:	f000 f847 	bl	800364c <__retarget_lock_init_recursive>
 80035be:	f7ff ff8d 	bl	80034dc <__sfp_lock_release>
 80035c2:	0020      	movs	r0, r4
 80035c4:	2208      	movs	r2, #8
 80035c6:	0029      	movs	r1, r5
 80035c8:	6025      	str	r5, [r4, #0]
 80035ca:	60a5      	str	r5, [r4, #8]
 80035cc:	6065      	str	r5, [r4, #4]
 80035ce:	6125      	str	r5, [r4, #16]
 80035d0:	6165      	str	r5, [r4, #20]
 80035d2:	61a5      	str	r5, [r4, #24]
 80035d4:	305c      	adds	r0, #92	; 0x5c
 80035d6:	f7ff fc19 	bl	8002e0c <memset>
 80035da:	6365      	str	r5, [r4, #52]	; 0x34
 80035dc:	63a5      	str	r5, [r4, #56]	; 0x38
 80035de:	64a5      	str	r5, [r4, #72]	; 0x48
 80035e0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80035e2:	0020      	movs	r0, r4
 80035e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035e6:	3468      	adds	r4, #104	; 0x68
 80035e8:	e7d7      	b.n	800359a <__sfp+0x1e>
 80035ea:	2104      	movs	r1, #4
 80035ec:	0038      	movs	r0, r7
 80035ee:	f7ff ff57 	bl	80034a0 <__sfmoreglue>
 80035f2:	1e04      	subs	r4, r0, #0
 80035f4:	6030      	str	r0, [r6, #0]
 80035f6:	d1d5      	bne.n	80035a4 <__sfp+0x28>
 80035f8:	f7ff ff70 	bl	80034dc <__sfp_lock_release>
 80035fc:	230c      	movs	r3, #12
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	e7ef      	b.n	80035e2 <__sfp+0x66>
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	080041c4 	.word	0x080041c4
 8003608:	ffff0001 	.word	0xffff0001

0800360c <_fwalk_reent>:
 800360c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800360e:	0004      	movs	r4, r0
 8003610:	0006      	movs	r6, r0
 8003612:	2700      	movs	r7, #0
 8003614:	9101      	str	r1, [sp, #4]
 8003616:	3448      	adds	r4, #72	; 0x48
 8003618:	6863      	ldr	r3, [r4, #4]
 800361a:	68a5      	ldr	r5, [r4, #8]
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	9b00      	ldr	r3, [sp, #0]
 8003620:	3b01      	subs	r3, #1
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	d504      	bpl.n	8003630 <_fwalk_reent+0x24>
 8003626:	6824      	ldr	r4, [r4, #0]
 8003628:	2c00      	cmp	r4, #0
 800362a:	d1f5      	bne.n	8003618 <_fwalk_reent+0xc>
 800362c:	0038      	movs	r0, r7
 800362e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003630:	89ab      	ldrh	r3, [r5, #12]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d908      	bls.n	8003648 <_fwalk_reent+0x3c>
 8003636:	220e      	movs	r2, #14
 8003638:	5eab      	ldrsh	r3, [r5, r2]
 800363a:	3301      	adds	r3, #1
 800363c:	d004      	beq.n	8003648 <_fwalk_reent+0x3c>
 800363e:	0029      	movs	r1, r5
 8003640:	0030      	movs	r0, r6
 8003642:	9b01      	ldr	r3, [sp, #4]
 8003644:	4798      	blx	r3
 8003646:	4307      	orrs	r7, r0
 8003648:	3568      	adds	r5, #104	; 0x68
 800364a:	e7e8      	b.n	800361e <_fwalk_reent+0x12>

0800364c <__retarget_lock_init_recursive>:
 800364c:	4770      	bx	lr

0800364e <__retarget_lock_acquire_recursive>:
 800364e:	4770      	bx	lr

08003650 <__retarget_lock_release_recursive>:
 8003650:	4770      	bx	lr
	...

08003654 <__swhatbuf_r>:
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	000e      	movs	r6, r1
 8003658:	001d      	movs	r5, r3
 800365a:	230e      	movs	r3, #14
 800365c:	5ec9      	ldrsh	r1, [r1, r3]
 800365e:	0014      	movs	r4, r2
 8003660:	b096      	sub	sp, #88	; 0x58
 8003662:	2900      	cmp	r1, #0
 8003664:	da08      	bge.n	8003678 <__swhatbuf_r+0x24>
 8003666:	220c      	movs	r2, #12
 8003668:	5eb3      	ldrsh	r3, [r6, r2]
 800366a:	2200      	movs	r2, #0
 800366c:	602a      	str	r2, [r5, #0]
 800366e:	061b      	lsls	r3, r3, #24
 8003670:	d411      	bmi.n	8003696 <__swhatbuf_r+0x42>
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	e00f      	b.n	8003698 <__swhatbuf_r+0x44>
 8003678:	466a      	mov	r2, sp
 800367a:	f000 fcf5 	bl	8004068 <_fstat_r>
 800367e:	2800      	cmp	r0, #0
 8003680:	dbf1      	blt.n	8003666 <__swhatbuf_r+0x12>
 8003682:	23f0      	movs	r3, #240	; 0xf0
 8003684:	9901      	ldr	r1, [sp, #4]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	4019      	ands	r1, r3
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <__swhatbuf_r+0x4c>)
 800368c:	18c9      	adds	r1, r1, r3
 800368e:	424b      	negs	r3, r1
 8003690:	4159      	adcs	r1, r3
 8003692:	6029      	str	r1, [r5, #0]
 8003694:	e7ed      	b.n	8003672 <__swhatbuf_r+0x1e>
 8003696:	2340      	movs	r3, #64	; 0x40
 8003698:	2000      	movs	r0, #0
 800369a:	6023      	str	r3, [r4, #0]
 800369c:	b016      	add	sp, #88	; 0x58
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	ffffe000 	.word	0xffffe000

080036a4 <__smakebuf_r>:
 80036a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036a6:	2602      	movs	r6, #2
 80036a8:	898b      	ldrh	r3, [r1, #12]
 80036aa:	0005      	movs	r5, r0
 80036ac:	000c      	movs	r4, r1
 80036ae:	4233      	tst	r3, r6
 80036b0:	d006      	beq.n	80036c0 <__smakebuf_r+0x1c>
 80036b2:	0023      	movs	r3, r4
 80036b4:	3347      	adds	r3, #71	; 0x47
 80036b6:	6023      	str	r3, [r4, #0]
 80036b8:	6123      	str	r3, [r4, #16]
 80036ba:	2301      	movs	r3, #1
 80036bc:	6163      	str	r3, [r4, #20]
 80036be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80036c0:	466a      	mov	r2, sp
 80036c2:	ab01      	add	r3, sp, #4
 80036c4:	f7ff ffc6 	bl	8003654 <__swhatbuf_r>
 80036c8:	9900      	ldr	r1, [sp, #0]
 80036ca:	0007      	movs	r7, r0
 80036cc:	0028      	movs	r0, r5
 80036ce:	f000 f8a3 	bl	8003818 <_malloc_r>
 80036d2:	2800      	cmp	r0, #0
 80036d4:	d108      	bne.n	80036e8 <__smakebuf_r+0x44>
 80036d6:	220c      	movs	r2, #12
 80036d8:	5ea3      	ldrsh	r3, [r4, r2]
 80036da:	059a      	lsls	r2, r3, #22
 80036dc:	d4ef      	bmi.n	80036be <__smakebuf_r+0x1a>
 80036de:	2203      	movs	r2, #3
 80036e0:	4393      	bics	r3, r2
 80036e2:	431e      	orrs	r6, r3
 80036e4:	81a6      	strh	r6, [r4, #12]
 80036e6:	e7e4      	b.n	80036b2 <__smakebuf_r+0xe>
 80036e8:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <__smakebuf_r+0x84>)
 80036ea:	62ab      	str	r3, [r5, #40]	; 0x28
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	89a2      	ldrh	r2, [r4, #12]
 80036f0:	6020      	str	r0, [r4, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	81a3      	strh	r3, [r4, #12]
 80036f6:	9b00      	ldr	r3, [sp, #0]
 80036f8:	6120      	str	r0, [r4, #16]
 80036fa:	6163      	str	r3, [r4, #20]
 80036fc:	9b01      	ldr	r3, [sp, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00d      	beq.n	800371e <__smakebuf_r+0x7a>
 8003702:	0028      	movs	r0, r5
 8003704:	230e      	movs	r3, #14
 8003706:	5ee1      	ldrsh	r1, [r4, r3]
 8003708:	f000 fcc0 	bl	800408c <_isatty_r>
 800370c:	2800      	cmp	r0, #0
 800370e:	d006      	beq.n	800371e <__smakebuf_r+0x7a>
 8003710:	2203      	movs	r2, #3
 8003712:	89a3      	ldrh	r3, [r4, #12]
 8003714:	4393      	bics	r3, r2
 8003716:	001a      	movs	r2, r3
 8003718:	2301      	movs	r3, #1
 800371a:	4313      	orrs	r3, r2
 800371c:	81a3      	strh	r3, [r4, #12]
 800371e:	89a0      	ldrh	r0, [r4, #12]
 8003720:	4307      	orrs	r7, r0
 8003722:	81a7      	strh	r7, [r4, #12]
 8003724:	e7cb      	b.n	80036be <__smakebuf_r+0x1a>
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	08003491 	.word	0x08003491

0800372c <malloc>:
 800372c:	b510      	push	{r4, lr}
 800372e:	4b03      	ldr	r3, [pc, #12]	; (800373c <malloc+0x10>)
 8003730:	0001      	movs	r1, r0
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	f000 f870 	bl	8003818 <_malloc_r>
 8003738:	bd10      	pop	{r4, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	20000004 	.word	0x20000004

08003740 <_free_r>:
 8003740:	b570      	push	{r4, r5, r6, lr}
 8003742:	0005      	movs	r5, r0
 8003744:	2900      	cmp	r1, #0
 8003746:	d010      	beq.n	800376a <_free_r+0x2a>
 8003748:	1f0c      	subs	r4, r1, #4
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	da00      	bge.n	8003752 <_free_r+0x12>
 8003750:	18e4      	adds	r4, r4, r3
 8003752:	0028      	movs	r0, r5
 8003754:	f000 fccc 	bl	80040f0 <__malloc_lock>
 8003758:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <_free_r+0x90>)
 800375a:	6813      	ldr	r3, [r2, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <_free_r+0x2c>
 8003760:	6063      	str	r3, [r4, #4]
 8003762:	6014      	str	r4, [r2, #0]
 8003764:	0028      	movs	r0, r5
 8003766:	f000 fccb 	bl	8004100 <__malloc_unlock>
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	42a3      	cmp	r3, r4
 800376e:	d908      	bls.n	8003782 <_free_r+0x42>
 8003770:	6821      	ldr	r1, [r4, #0]
 8003772:	1860      	adds	r0, r4, r1
 8003774:	4283      	cmp	r3, r0
 8003776:	d1f3      	bne.n	8003760 <_free_r+0x20>
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	1841      	adds	r1, r0, r1
 800377e:	6021      	str	r1, [r4, #0]
 8003780:	e7ee      	b.n	8003760 <_free_r+0x20>
 8003782:	001a      	movs	r2, r3
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <_free_r+0x4e>
 800378a:	42a3      	cmp	r3, r4
 800378c:	d9f9      	bls.n	8003782 <_free_r+0x42>
 800378e:	6811      	ldr	r1, [r2, #0]
 8003790:	1850      	adds	r0, r2, r1
 8003792:	42a0      	cmp	r0, r4
 8003794:	d10b      	bne.n	80037ae <_free_r+0x6e>
 8003796:	6820      	ldr	r0, [r4, #0]
 8003798:	1809      	adds	r1, r1, r0
 800379a:	1850      	adds	r0, r2, r1
 800379c:	6011      	str	r1, [r2, #0]
 800379e:	4283      	cmp	r3, r0
 80037a0:	d1e0      	bne.n	8003764 <_free_r+0x24>
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	1841      	adds	r1, r0, r1
 80037a8:	6011      	str	r1, [r2, #0]
 80037aa:	6053      	str	r3, [r2, #4]
 80037ac:	e7da      	b.n	8003764 <_free_r+0x24>
 80037ae:	42a0      	cmp	r0, r4
 80037b0:	d902      	bls.n	80037b8 <_free_r+0x78>
 80037b2:	230c      	movs	r3, #12
 80037b4:	602b      	str	r3, [r5, #0]
 80037b6:	e7d5      	b.n	8003764 <_free_r+0x24>
 80037b8:	6821      	ldr	r1, [r4, #0]
 80037ba:	1860      	adds	r0, r4, r1
 80037bc:	4283      	cmp	r3, r0
 80037be:	d103      	bne.n	80037c8 <_free_r+0x88>
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	1841      	adds	r1, r0, r1
 80037c6:	6021      	str	r1, [r4, #0]
 80037c8:	6063      	str	r3, [r4, #4]
 80037ca:	6054      	str	r4, [r2, #4]
 80037cc:	e7ca      	b.n	8003764 <_free_r+0x24>
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	200003a4 	.word	0x200003a4

080037d4 <sbrk_aligned>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	4e0f      	ldr	r6, [pc, #60]	; (8003814 <sbrk_aligned+0x40>)
 80037d8:	000d      	movs	r5, r1
 80037da:	6831      	ldr	r1, [r6, #0]
 80037dc:	0004      	movs	r4, r0
 80037de:	2900      	cmp	r1, #0
 80037e0:	d102      	bne.n	80037e8 <sbrk_aligned+0x14>
 80037e2:	f000 fbbd 	bl	8003f60 <_sbrk_r>
 80037e6:	6030      	str	r0, [r6, #0]
 80037e8:	0029      	movs	r1, r5
 80037ea:	0020      	movs	r0, r4
 80037ec:	f000 fbb8 	bl	8003f60 <_sbrk_r>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d00a      	beq.n	800380a <sbrk_aligned+0x36>
 80037f4:	2303      	movs	r3, #3
 80037f6:	1cc5      	adds	r5, r0, #3
 80037f8:	439d      	bics	r5, r3
 80037fa:	42a8      	cmp	r0, r5
 80037fc:	d007      	beq.n	800380e <sbrk_aligned+0x3a>
 80037fe:	1a29      	subs	r1, r5, r0
 8003800:	0020      	movs	r0, r4
 8003802:	f000 fbad 	bl	8003f60 <_sbrk_r>
 8003806:	1c43      	adds	r3, r0, #1
 8003808:	d101      	bne.n	800380e <sbrk_aligned+0x3a>
 800380a:	2501      	movs	r5, #1
 800380c:	426d      	negs	r5, r5
 800380e:	0028      	movs	r0, r5
 8003810:	bd70      	pop	{r4, r5, r6, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	200003a8 	.word	0x200003a8

08003818 <_malloc_r>:
 8003818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800381a:	2203      	movs	r2, #3
 800381c:	1ccb      	adds	r3, r1, #3
 800381e:	4393      	bics	r3, r2
 8003820:	3308      	adds	r3, #8
 8003822:	0006      	movs	r6, r0
 8003824:	001f      	movs	r7, r3
 8003826:	2b0c      	cmp	r3, #12
 8003828:	d232      	bcs.n	8003890 <_malloc_r+0x78>
 800382a:	270c      	movs	r7, #12
 800382c:	42b9      	cmp	r1, r7
 800382e:	d831      	bhi.n	8003894 <_malloc_r+0x7c>
 8003830:	0030      	movs	r0, r6
 8003832:	f000 fc5d 	bl	80040f0 <__malloc_lock>
 8003836:	4d32      	ldr	r5, [pc, #200]	; (8003900 <_malloc_r+0xe8>)
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	001c      	movs	r4, r3
 800383c:	2c00      	cmp	r4, #0
 800383e:	d12e      	bne.n	800389e <_malloc_r+0x86>
 8003840:	0039      	movs	r1, r7
 8003842:	0030      	movs	r0, r6
 8003844:	f7ff ffc6 	bl	80037d4 <sbrk_aligned>
 8003848:	0004      	movs	r4, r0
 800384a:	1c43      	adds	r3, r0, #1
 800384c:	d11e      	bne.n	800388c <_malloc_r+0x74>
 800384e:	682c      	ldr	r4, [r5, #0]
 8003850:	0025      	movs	r5, r4
 8003852:	2d00      	cmp	r5, #0
 8003854:	d14a      	bne.n	80038ec <_malloc_r+0xd4>
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	0029      	movs	r1, r5
 800385a:	18e3      	adds	r3, r4, r3
 800385c:	0030      	movs	r0, r6
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	f000 fb7e 	bl	8003f60 <_sbrk_r>
 8003864:	9b01      	ldr	r3, [sp, #4]
 8003866:	4283      	cmp	r3, r0
 8003868:	d143      	bne.n	80038f2 <_malloc_r+0xda>
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	3703      	adds	r7, #3
 800386e:	1aff      	subs	r7, r7, r3
 8003870:	2303      	movs	r3, #3
 8003872:	439f      	bics	r7, r3
 8003874:	3708      	adds	r7, #8
 8003876:	2f0c      	cmp	r7, #12
 8003878:	d200      	bcs.n	800387c <_malloc_r+0x64>
 800387a:	270c      	movs	r7, #12
 800387c:	0039      	movs	r1, r7
 800387e:	0030      	movs	r0, r6
 8003880:	f7ff ffa8 	bl	80037d4 <sbrk_aligned>
 8003884:	1c43      	adds	r3, r0, #1
 8003886:	d034      	beq.n	80038f2 <_malloc_r+0xda>
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	19df      	adds	r7, r3, r7
 800388c:	6027      	str	r7, [r4, #0]
 800388e:	e013      	b.n	80038b8 <_malloc_r+0xa0>
 8003890:	2b00      	cmp	r3, #0
 8003892:	dacb      	bge.n	800382c <_malloc_r+0x14>
 8003894:	230c      	movs	r3, #12
 8003896:	2500      	movs	r5, #0
 8003898:	6033      	str	r3, [r6, #0]
 800389a:	0028      	movs	r0, r5
 800389c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800389e:	6822      	ldr	r2, [r4, #0]
 80038a0:	1bd1      	subs	r1, r2, r7
 80038a2:	d420      	bmi.n	80038e6 <_malloc_r+0xce>
 80038a4:	290b      	cmp	r1, #11
 80038a6:	d917      	bls.n	80038d8 <_malloc_r+0xc0>
 80038a8:	19e2      	adds	r2, r4, r7
 80038aa:	6027      	str	r7, [r4, #0]
 80038ac:	42a3      	cmp	r3, r4
 80038ae:	d111      	bne.n	80038d4 <_malloc_r+0xbc>
 80038b0:	602a      	str	r2, [r5, #0]
 80038b2:	6863      	ldr	r3, [r4, #4]
 80038b4:	6011      	str	r1, [r2, #0]
 80038b6:	6053      	str	r3, [r2, #4]
 80038b8:	0030      	movs	r0, r6
 80038ba:	0025      	movs	r5, r4
 80038bc:	f000 fc20 	bl	8004100 <__malloc_unlock>
 80038c0:	2207      	movs	r2, #7
 80038c2:	350b      	adds	r5, #11
 80038c4:	1d23      	adds	r3, r4, #4
 80038c6:	4395      	bics	r5, r2
 80038c8:	1aea      	subs	r2, r5, r3
 80038ca:	429d      	cmp	r5, r3
 80038cc:	d0e5      	beq.n	800389a <_malloc_r+0x82>
 80038ce:	1b5b      	subs	r3, r3, r5
 80038d0:	50a3      	str	r3, [r4, r2]
 80038d2:	e7e2      	b.n	800389a <_malloc_r+0x82>
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	e7ec      	b.n	80038b2 <_malloc_r+0x9a>
 80038d8:	6862      	ldr	r2, [r4, #4]
 80038da:	42a3      	cmp	r3, r4
 80038dc:	d101      	bne.n	80038e2 <_malloc_r+0xca>
 80038de:	602a      	str	r2, [r5, #0]
 80038e0:	e7ea      	b.n	80038b8 <_malloc_r+0xa0>
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	e7e8      	b.n	80038b8 <_malloc_r+0xa0>
 80038e6:	0023      	movs	r3, r4
 80038e8:	6864      	ldr	r4, [r4, #4]
 80038ea:	e7a7      	b.n	800383c <_malloc_r+0x24>
 80038ec:	002c      	movs	r4, r5
 80038ee:	686d      	ldr	r5, [r5, #4]
 80038f0:	e7af      	b.n	8003852 <_malloc_r+0x3a>
 80038f2:	230c      	movs	r3, #12
 80038f4:	0030      	movs	r0, r6
 80038f6:	6033      	str	r3, [r6, #0]
 80038f8:	f000 fc02 	bl	8004100 <__malloc_unlock>
 80038fc:	e7cd      	b.n	800389a <_malloc_r+0x82>
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	200003a4 	.word	0x200003a4

08003904 <__sfputc_r>:
 8003904:	6893      	ldr	r3, [r2, #8]
 8003906:	b510      	push	{r4, lr}
 8003908:	3b01      	subs	r3, #1
 800390a:	6093      	str	r3, [r2, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	da04      	bge.n	800391a <__sfputc_r+0x16>
 8003910:	6994      	ldr	r4, [r2, #24]
 8003912:	42a3      	cmp	r3, r4
 8003914:	db07      	blt.n	8003926 <__sfputc_r+0x22>
 8003916:	290a      	cmp	r1, #10
 8003918:	d005      	beq.n	8003926 <__sfputc_r+0x22>
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	1c58      	adds	r0, r3, #1
 800391e:	6010      	str	r0, [r2, #0]
 8003920:	7019      	strb	r1, [r3, #0]
 8003922:	0008      	movs	r0, r1
 8003924:	bd10      	pop	{r4, pc}
 8003926:	f7ff fbf5 	bl	8003114 <__swbuf_r>
 800392a:	0001      	movs	r1, r0
 800392c:	e7f9      	b.n	8003922 <__sfputc_r+0x1e>

0800392e <__sfputs_r>:
 800392e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003930:	0006      	movs	r6, r0
 8003932:	000f      	movs	r7, r1
 8003934:	0014      	movs	r4, r2
 8003936:	18d5      	adds	r5, r2, r3
 8003938:	42ac      	cmp	r4, r5
 800393a:	d101      	bne.n	8003940 <__sfputs_r+0x12>
 800393c:	2000      	movs	r0, #0
 800393e:	e007      	b.n	8003950 <__sfputs_r+0x22>
 8003940:	7821      	ldrb	r1, [r4, #0]
 8003942:	003a      	movs	r2, r7
 8003944:	0030      	movs	r0, r6
 8003946:	f7ff ffdd 	bl	8003904 <__sfputc_r>
 800394a:	3401      	adds	r4, #1
 800394c:	1c43      	adds	r3, r0, #1
 800394e:	d1f3      	bne.n	8003938 <__sfputs_r+0xa>
 8003950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003954 <_vfiprintf_r>:
 8003954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003956:	b0a1      	sub	sp, #132	; 0x84
 8003958:	0006      	movs	r6, r0
 800395a:	000c      	movs	r4, r1
 800395c:	001f      	movs	r7, r3
 800395e:	9203      	str	r2, [sp, #12]
 8003960:	2800      	cmp	r0, #0
 8003962:	d004      	beq.n	800396e <_vfiprintf_r+0x1a>
 8003964:	6983      	ldr	r3, [r0, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <_vfiprintf_r+0x1a>
 800396a:	f7ff fdcf 	bl	800350c <__sinit>
 800396e:	4b8e      	ldr	r3, [pc, #568]	; (8003ba8 <_vfiprintf_r+0x254>)
 8003970:	429c      	cmp	r4, r3
 8003972:	d11c      	bne.n	80039ae <_vfiprintf_r+0x5a>
 8003974:	6874      	ldr	r4, [r6, #4]
 8003976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003978:	07db      	lsls	r3, r3, #31
 800397a:	d405      	bmi.n	8003988 <_vfiprintf_r+0x34>
 800397c:	89a3      	ldrh	r3, [r4, #12]
 800397e:	059b      	lsls	r3, r3, #22
 8003980:	d402      	bmi.n	8003988 <_vfiprintf_r+0x34>
 8003982:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003984:	f7ff fe63 	bl	800364e <__retarget_lock_acquire_recursive>
 8003988:	89a3      	ldrh	r3, [r4, #12]
 800398a:	071b      	lsls	r3, r3, #28
 800398c:	d502      	bpl.n	8003994 <_vfiprintf_r+0x40>
 800398e:	6923      	ldr	r3, [r4, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d11d      	bne.n	80039d0 <_vfiprintf_r+0x7c>
 8003994:	0021      	movs	r1, r4
 8003996:	0030      	movs	r0, r6
 8003998:	f7ff fc12 	bl	80031c0 <__swsetup_r>
 800399c:	2800      	cmp	r0, #0
 800399e:	d017      	beq.n	80039d0 <_vfiprintf_r+0x7c>
 80039a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039a2:	07db      	lsls	r3, r3, #31
 80039a4:	d50d      	bpl.n	80039c2 <_vfiprintf_r+0x6e>
 80039a6:	2001      	movs	r0, #1
 80039a8:	4240      	negs	r0, r0
 80039aa:	b021      	add	sp, #132	; 0x84
 80039ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ae:	4b7f      	ldr	r3, [pc, #508]	; (8003bac <_vfiprintf_r+0x258>)
 80039b0:	429c      	cmp	r4, r3
 80039b2:	d101      	bne.n	80039b8 <_vfiprintf_r+0x64>
 80039b4:	68b4      	ldr	r4, [r6, #8]
 80039b6:	e7de      	b.n	8003976 <_vfiprintf_r+0x22>
 80039b8:	4b7d      	ldr	r3, [pc, #500]	; (8003bb0 <_vfiprintf_r+0x25c>)
 80039ba:	429c      	cmp	r4, r3
 80039bc:	d1db      	bne.n	8003976 <_vfiprintf_r+0x22>
 80039be:	68f4      	ldr	r4, [r6, #12]
 80039c0:	e7d9      	b.n	8003976 <_vfiprintf_r+0x22>
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	059b      	lsls	r3, r3, #22
 80039c6:	d4ee      	bmi.n	80039a6 <_vfiprintf_r+0x52>
 80039c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039ca:	f7ff fe41 	bl	8003650 <__retarget_lock_release_recursive>
 80039ce:	e7ea      	b.n	80039a6 <_vfiprintf_r+0x52>
 80039d0:	2300      	movs	r3, #0
 80039d2:	ad08      	add	r5, sp, #32
 80039d4:	616b      	str	r3, [r5, #20]
 80039d6:	3320      	adds	r3, #32
 80039d8:	766b      	strb	r3, [r5, #25]
 80039da:	3310      	adds	r3, #16
 80039dc:	76ab      	strb	r3, [r5, #26]
 80039de:	9707      	str	r7, [sp, #28]
 80039e0:	9f03      	ldr	r7, [sp, #12]
 80039e2:	783b      	ldrb	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <_vfiprintf_r+0x98>
 80039e8:	2b25      	cmp	r3, #37	; 0x25
 80039ea:	d14e      	bne.n	8003a8a <_vfiprintf_r+0x136>
 80039ec:	9b03      	ldr	r3, [sp, #12]
 80039ee:	1afb      	subs	r3, r7, r3
 80039f0:	9305      	str	r3, [sp, #20]
 80039f2:	9b03      	ldr	r3, [sp, #12]
 80039f4:	429f      	cmp	r7, r3
 80039f6:	d00d      	beq.n	8003a14 <_vfiprintf_r+0xc0>
 80039f8:	9b05      	ldr	r3, [sp, #20]
 80039fa:	0021      	movs	r1, r4
 80039fc:	0030      	movs	r0, r6
 80039fe:	9a03      	ldr	r2, [sp, #12]
 8003a00:	f7ff ff95 	bl	800392e <__sfputs_r>
 8003a04:	1c43      	adds	r3, r0, #1
 8003a06:	d100      	bne.n	8003a0a <_vfiprintf_r+0xb6>
 8003a08:	e0b5      	b.n	8003b76 <_vfiprintf_r+0x222>
 8003a0a:	696a      	ldr	r2, [r5, #20]
 8003a0c:	9b05      	ldr	r3, [sp, #20]
 8003a0e:	4694      	mov	ip, r2
 8003a10:	4463      	add	r3, ip
 8003a12:	616b      	str	r3, [r5, #20]
 8003a14:	783b      	ldrb	r3, [r7, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d100      	bne.n	8003a1c <_vfiprintf_r+0xc8>
 8003a1a:	e0ac      	b.n	8003b76 <_vfiprintf_r+0x222>
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	1c7b      	adds	r3, r7, #1
 8003a20:	9303      	str	r3, [sp, #12]
 8003a22:	2300      	movs	r3, #0
 8003a24:	4252      	negs	r2, r2
 8003a26:	606a      	str	r2, [r5, #4]
 8003a28:	a904      	add	r1, sp, #16
 8003a2a:	3254      	adds	r2, #84	; 0x54
 8003a2c:	1852      	adds	r2, r2, r1
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	60eb      	str	r3, [r5, #12]
 8003a32:	60ab      	str	r3, [r5, #8]
 8003a34:	7013      	strb	r3, [r2, #0]
 8003a36:	65ab      	str	r3, [r5, #88]	; 0x58
 8003a38:	9b03      	ldr	r3, [sp, #12]
 8003a3a:	2205      	movs	r2, #5
 8003a3c:	7819      	ldrb	r1, [r3, #0]
 8003a3e:	485d      	ldr	r0, [pc, #372]	; (8003bb4 <_vfiprintf_r+0x260>)
 8003a40:	f000 fb4a 	bl	80040d8 <memchr>
 8003a44:	9b03      	ldr	r3, [sp, #12]
 8003a46:	1c5f      	adds	r7, r3, #1
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	d120      	bne.n	8003a8e <_vfiprintf_r+0x13a>
 8003a4c:	682a      	ldr	r2, [r5, #0]
 8003a4e:	06d3      	lsls	r3, r2, #27
 8003a50:	d504      	bpl.n	8003a5c <_vfiprintf_r+0x108>
 8003a52:	2353      	movs	r3, #83	; 0x53
 8003a54:	a904      	add	r1, sp, #16
 8003a56:	185b      	adds	r3, r3, r1
 8003a58:	2120      	movs	r1, #32
 8003a5a:	7019      	strb	r1, [r3, #0]
 8003a5c:	0713      	lsls	r3, r2, #28
 8003a5e:	d504      	bpl.n	8003a6a <_vfiprintf_r+0x116>
 8003a60:	2353      	movs	r3, #83	; 0x53
 8003a62:	a904      	add	r1, sp, #16
 8003a64:	185b      	adds	r3, r3, r1
 8003a66:	212b      	movs	r1, #43	; 0x2b
 8003a68:	7019      	strb	r1, [r3, #0]
 8003a6a:	9b03      	ldr	r3, [sp, #12]
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a70:	d016      	beq.n	8003aa0 <_vfiprintf_r+0x14c>
 8003a72:	2100      	movs	r1, #0
 8003a74:	68eb      	ldr	r3, [r5, #12]
 8003a76:	9f03      	ldr	r7, [sp, #12]
 8003a78:	783a      	ldrb	r2, [r7, #0]
 8003a7a:	1c78      	adds	r0, r7, #1
 8003a7c:	3a30      	subs	r2, #48	; 0x30
 8003a7e:	4684      	mov	ip, r0
 8003a80:	2a09      	cmp	r2, #9
 8003a82:	d94f      	bls.n	8003b24 <_vfiprintf_r+0x1d0>
 8003a84:	2900      	cmp	r1, #0
 8003a86:	d111      	bne.n	8003aac <_vfiprintf_r+0x158>
 8003a88:	e017      	b.n	8003aba <_vfiprintf_r+0x166>
 8003a8a:	3701      	adds	r7, #1
 8003a8c:	e7a9      	b.n	80039e2 <_vfiprintf_r+0x8e>
 8003a8e:	4b49      	ldr	r3, [pc, #292]	; (8003bb4 <_vfiprintf_r+0x260>)
 8003a90:	682a      	ldr	r2, [r5, #0]
 8003a92:	1ac0      	subs	r0, r0, r3
 8003a94:	2301      	movs	r3, #1
 8003a96:	4083      	lsls	r3, r0
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	602b      	str	r3, [r5, #0]
 8003a9c:	9703      	str	r7, [sp, #12]
 8003a9e:	e7cb      	b.n	8003a38 <_vfiprintf_r+0xe4>
 8003aa0:	9b07      	ldr	r3, [sp, #28]
 8003aa2:	1d19      	adds	r1, r3, #4
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	9107      	str	r1, [sp, #28]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	db01      	blt.n	8003ab0 <_vfiprintf_r+0x15c>
 8003aac:	930b      	str	r3, [sp, #44]	; 0x2c
 8003aae:	e004      	b.n	8003aba <_vfiprintf_r+0x166>
 8003ab0:	425b      	negs	r3, r3
 8003ab2:	60eb      	str	r3, [r5, #12]
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	602b      	str	r3, [r5, #0]
 8003aba:	783b      	ldrb	r3, [r7, #0]
 8003abc:	2b2e      	cmp	r3, #46	; 0x2e
 8003abe:	d10a      	bne.n	8003ad6 <_vfiprintf_r+0x182>
 8003ac0:	787b      	ldrb	r3, [r7, #1]
 8003ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ac4:	d137      	bne.n	8003b36 <_vfiprintf_r+0x1e2>
 8003ac6:	9b07      	ldr	r3, [sp, #28]
 8003ac8:	3702      	adds	r7, #2
 8003aca:	1d1a      	adds	r2, r3, #4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	9207      	str	r2, [sp, #28]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	db2d      	blt.n	8003b30 <_vfiprintf_r+0x1dc>
 8003ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	7839      	ldrb	r1, [r7, #0]
 8003ada:	4837      	ldr	r0, [pc, #220]	; (8003bb8 <_vfiprintf_r+0x264>)
 8003adc:	f000 fafc 	bl	80040d8 <memchr>
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d007      	beq.n	8003af4 <_vfiprintf_r+0x1a0>
 8003ae4:	4b34      	ldr	r3, [pc, #208]	; (8003bb8 <_vfiprintf_r+0x264>)
 8003ae6:	682a      	ldr	r2, [r5, #0]
 8003ae8:	1ac0      	subs	r0, r0, r3
 8003aea:	2340      	movs	r3, #64	; 0x40
 8003aec:	4083      	lsls	r3, r0
 8003aee:	4313      	orrs	r3, r2
 8003af0:	3701      	adds	r7, #1
 8003af2:	602b      	str	r3, [r5, #0]
 8003af4:	7839      	ldrb	r1, [r7, #0]
 8003af6:	1c7b      	adds	r3, r7, #1
 8003af8:	2206      	movs	r2, #6
 8003afa:	4830      	ldr	r0, [pc, #192]	; (8003bbc <_vfiprintf_r+0x268>)
 8003afc:	9303      	str	r3, [sp, #12]
 8003afe:	7629      	strb	r1, [r5, #24]
 8003b00:	f000 faea 	bl	80040d8 <memchr>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d045      	beq.n	8003b94 <_vfiprintf_r+0x240>
 8003b08:	4b2d      	ldr	r3, [pc, #180]	; (8003bc0 <_vfiprintf_r+0x26c>)
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d127      	bne.n	8003b5e <_vfiprintf_r+0x20a>
 8003b0e:	2207      	movs	r2, #7
 8003b10:	9b07      	ldr	r3, [sp, #28]
 8003b12:	3307      	adds	r3, #7
 8003b14:	4393      	bics	r3, r2
 8003b16:	3308      	adds	r3, #8
 8003b18:	9307      	str	r3, [sp, #28]
 8003b1a:	696b      	ldr	r3, [r5, #20]
 8003b1c:	9a04      	ldr	r2, [sp, #16]
 8003b1e:	189b      	adds	r3, r3, r2
 8003b20:	616b      	str	r3, [r5, #20]
 8003b22:	e75d      	b.n	80039e0 <_vfiprintf_r+0x8c>
 8003b24:	210a      	movs	r1, #10
 8003b26:	434b      	muls	r3, r1
 8003b28:	4667      	mov	r7, ip
 8003b2a:	189b      	adds	r3, r3, r2
 8003b2c:	3909      	subs	r1, #9
 8003b2e:	e7a3      	b.n	8003a78 <_vfiprintf_r+0x124>
 8003b30:	2301      	movs	r3, #1
 8003b32:	425b      	negs	r3, r3
 8003b34:	e7ce      	b.n	8003ad4 <_vfiprintf_r+0x180>
 8003b36:	2300      	movs	r3, #0
 8003b38:	001a      	movs	r2, r3
 8003b3a:	3701      	adds	r7, #1
 8003b3c:	606b      	str	r3, [r5, #4]
 8003b3e:	7839      	ldrb	r1, [r7, #0]
 8003b40:	1c78      	adds	r0, r7, #1
 8003b42:	3930      	subs	r1, #48	; 0x30
 8003b44:	4684      	mov	ip, r0
 8003b46:	2909      	cmp	r1, #9
 8003b48:	d903      	bls.n	8003b52 <_vfiprintf_r+0x1fe>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0c3      	beq.n	8003ad6 <_vfiprintf_r+0x182>
 8003b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8003b50:	e7c1      	b.n	8003ad6 <_vfiprintf_r+0x182>
 8003b52:	230a      	movs	r3, #10
 8003b54:	435a      	muls	r2, r3
 8003b56:	4667      	mov	r7, ip
 8003b58:	1852      	adds	r2, r2, r1
 8003b5a:	3b09      	subs	r3, #9
 8003b5c:	e7ef      	b.n	8003b3e <_vfiprintf_r+0x1ea>
 8003b5e:	ab07      	add	r3, sp, #28
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	0022      	movs	r2, r4
 8003b64:	0029      	movs	r1, r5
 8003b66:	0030      	movs	r0, r6
 8003b68:	4b16      	ldr	r3, [pc, #88]	; (8003bc4 <_vfiprintf_r+0x270>)
 8003b6a:	e000      	b.n	8003b6e <_vfiprintf_r+0x21a>
 8003b6c:	bf00      	nop
 8003b6e:	9004      	str	r0, [sp, #16]
 8003b70:	9b04      	ldr	r3, [sp, #16]
 8003b72:	3301      	adds	r3, #1
 8003b74:	d1d1      	bne.n	8003b1a <_vfiprintf_r+0x1c6>
 8003b76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b78:	07db      	lsls	r3, r3, #31
 8003b7a:	d405      	bmi.n	8003b88 <_vfiprintf_r+0x234>
 8003b7c:	89a3      	ldrh	r3, [r4, #12]
 8003b7e:	059b      	lsls	r3, r3, #22
 8003b80:	d402      	bmi.n	8003b88 <_vfiprintf_r+0x234>
 8003b82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b84:	f7ff fd64 	bl	8003650 <__retarget_lock_release_recursive>
 8003b88:	89a3      	ldrh	r3, [r4, #12]
 8003b8a:	065b      	lsls	r3, r3, #25
 8003b8c:	d500      	bpl.n	8003b90 <_vfiprintf_r+0x23c>
 8003b8e:	e70a      	b.n	80039a6 <_vfiprintf_r+0x52>
 8003b90:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003b92:	e70a      	b.n	80039aa <_vfiprintf_r+0x56>
 8003b94:	ab07      	add	r3, sp, #28
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	0022      	movs	r2, r4
 8003b9a:	0029      	movs	r1, r5
 8003b9c:	0030      	movs	r0, r6
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <_vfiprintf_r+0x270>)
 8003ba0:	f000 f882 	bl	8003ca8 <_printf_i>
 8003ba4:	e7e3      	b.n	8003b6e <_vfiprintf_r+0x21a>
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	080041e8 	.word	0x080041e8
 8003bac:	08004208 	.word	0x08004208
 8003bb0:	080041c8 	.word	0x080041c8
 8003bb4:	08004228 	.word	0x08004228
 8003bb8:	0800422e 	.word	0x0800422e
 8003bbc:	08004232 	.word	0x08004232
 8003bc0:	00000000 	.word	0x00000000
 8003bc4:	0800392f 	.word	0x0800392f

08003bc8 <_printf_common>:
 8003bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bca:	0015      	movs	r5, r2
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	688a      	ldr	r2, [r1, #8]
 8003bd0:	690b      	ldr	r3, [r1, #16]
 8003bd2:	000c      	movs	r4, r1
 8003bd4:	9000      	str	r0, [sp, #0]
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	da00      	bge.n	8003bdc <_printf_common+0x14>
 8003bda:	0013      	movs	r3, r2
 8003bdc:	0022      	movs	r2, r4
 8003bde:	602b      	str	r3, [r5, #0]
 8003be0:	3243      	adds	r2, #67	; 0x43
 8003be2:	7812      	ldrb	r2, [r2, #0]
 8003be4:	2a00      	cmp	r2, #0
 8003be6:	d001      	beq.n	8003bec <_printf_common+0x24>
 8003be8:	3301      	adds	r3, #1
 8003bea:	602b      	str	r3, [r5, #0]
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	069b      	lsls	r3, r3, #26
 8003bf0:	d502      	bpl.n	8003bf8 <_printf_common+0x30>
 8003bf2:	682b      	ldr	r3, [r5, #0]
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	602b      	str	r3, [r5, #0]
 8003bf8:	6822      	ldr	r2, [r4, #0]
 8003bfa:	2306      	movs	r3, #6
 8003bfc:	0017      	movs	r7, r2
 8003bfe:	401f      	ands	r7, r3
 8003c00:	421a      	tst	r2, r3
 8003c02:	d027      	beq.n	8003c54 <_printf_common+0x8c>
 8003c04:	0023      	movs	r3, r4
 8003c06:	3343      	adds	r3, #67	; 0x43
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	1e5a      	subs	r2, r3, #1
 8003c0c:	4193      	sbcs	r3, r2
 8003c0e:	6822      	ldr	r2, [r4, #0]
 8003c10:	0692      	lsls	r2, r2, #26
 8003c12:	d430      	bmi.n	8003c76 <_printf_common+0xae>
 8003c14:	0022      	movs	r2, r4
 8003c16:	9901      	ldr	r1, [sp, #4]
 8003c18:	9800      	ldr	r0, [sp, #0]
 8003c1a:	9e08      	ldr	r6, [sp, #32]
 8003c1c:	3243      	adds	r2, #67	; 0x43
 8003c1e:	47b0      	blx	r6
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d025      	beq.n	8003c70 <_printf_common+0xa8>
 8003c24:	2306      	movs	r3, #6
 8003c26:	6820      	ldr	r0, [r4, #0]
 8003c28:	682a      	ldr	r2, [r5, #0]
 8003c2a:	68e1      	ldr	r1, [r4, #12]
 8003c2c:	2500      	movs	r5, #0
 8003c2e:	4003      	ands	r3, r0
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d103      	bne.n	8003c3c <_printf_common+0x74>
 8003c34:	1a8d      	subs	r5, r1, r2
 8003c36:	43eb      	mvns	r3, r5
 8003c38:	17db      	asrs	r3, r3, #31
 8003c3a:	401d      	ands	r5, r3
 8003c3c:	68a3      	ldr	r3, [r4, #8]
 8003c3e:	6922      	ldr	r2, [r4, #16]
 8003c40:	4293      	cmp	r3, r2
 8003c42:	dd01      	ble.n	8003c48 <_printf_common+0x80>
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	18ed      	adds	r5, r5, r3
 8003c48:	2700      	movs	r7, #0
 8003c4a:	42bd      	cmp	r5, r7
 8003c4c:	d120      	bne.n	8003c90 <_printf_common+0xc8>
 8003c4e:	2000      	movs	r0, #0
 8003c50:	e010      	b.n	8003c74 <_printf_common+0xac>
 8003c52:	3701      	adds	r7, #1
 8003c54:	68e3      	ldr	r3, [r4, #12]
 8003c56:	682a      	ldr	r2, [r5, #0]
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	42bb      	cmp	r3, r7
 8003c5c:	ddd2      	ble.n	8003c04 <_printf_common+0x3c>
 8003c5e:	0022      	movs	r2, r4
 8003c60:	2301      	movs	r3, #1
 8003c62:	9901      	ldr	r1, [sp, #4]
 8003c64:	9800      	ldr	r0, [sp, #0]
 8003c66:	9e08      	ldr	r6, [sp, #32]
 8003c68:	3219      	adds	r2, #25
 8003c6a:	47b0      	blx	r6
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d1f0      	bne.n	8003c52 <_printf_common+0x8a>
 8003c70:	2001      	movs	r0, #1
 8003c72:	4240      	negs	r0, r0
 8003c74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c76:	2030      	movs	r0, #48	; 0x30
 8003c78:	18e1      	adds	r1, r4, r3
 8003c7a:	3143      	adds	r1, #67	; 0x43
 8003c7c:	7008      	strb	r0, [r1, #0]
 8003c7e:	0021      	movs	r1, r4
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	3145      	adds	r1, #69	; 0x45
 8003c84:	7809      	ldrb	r1, [r1, #0]
 8003c86:	18a2      	adds	r2, r4, r2
 8003c88:	3243      	adds	r2, #67	; 0x43
 8003c8a:	3302      	adds	r3, #2
 8003c8c:	7011      	strb	r1, [r2, #0]
 8003c8e:	e7c1      	b.n	8003c14 <_printf_common+0x4c>
 8003c90:	0022      	movs	r2, r4
 8003c92:	2301      	movs	r3, #1
 8003c94:	9901      	ldr	r1, [sp, #4]
 8003c96:	9800      	ldr	r0, [sp, #0]
 8003c98:	9e08      	ldr	r6, [sp, #32]
 8003c9a:	321a      	adds	r2, #26
 8003c9c:	47b0      	blx	r6
 8003c9e:	1c43      	adds	r3, r0, #1
 8003ca0:	d0e6      	beq.n	8003c70 <_printf_common+0xa8>
 8003ca2:	3701      	adds	r7, #1
 8003ca4:	e7d1      	b.n	8003c4a <_printf_common+0x82>
	...

08003ca8 <_printf_i>:
 8003ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003caa:	b08b      	sub	sp, #44	; 0x2c
 8003cac:	9206      	str	r2, [sp, #24]
 8003cae:	000a      	movs	r2, r1
 8003cb0:	3243      	adds	r2, #67	; 0x43
 8003cb2:	9307      	str	r3, [sp, #28]
 8003cb4:	9005      	str	r0, [sp, #20]
 8003cb6:	9204      	str	r2, [sp, #16]
 8003cb8:	7e0a      	ldrb	r2, [r1, #24]
 8003cba:	000c      	movs	r4, r1
 8003cbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003cbe:	2a78      	cmp	r2, #120	; 0x78
 8003cc0:	d807      	bhi.n	8003cd2 <_printf_i+0x2a>
 8003cc2:	2a62      	cmp	r2, #98	; 0x62
 8003cc4:	d809      	bhi.n	8003cda <_printf_i+0x32>
 8003cc6:	2a00      	cmp	r2, #0
 8003cc8:	d100      	bne.n	8003ccc <_printf_i+0x24>
 8003cca:	e0c1      	b.n	8003e50 <_printf_i+0x1a8>
 8003ccc:	2a58      	cmp	r2, #88	; 0x58
 8003cce:	d100      	bne.n	8003cd2 <_printf_i+0x2a>
 8003cd0:	e08c      	b.n	8003dec <_printf_i+0x144>
 8003cd2:	0026      	movs	r6, r4
 8003cd4:	3642      	adds	r6, #66	; 0x42
 8003cd6:	7032      	strb	r2, [r6, #0]
 8003cd8:	e022      	b.n	8003d20 <_printf_i+0x78>
 8003cda:	0010      	movs	r0, r2
 8003cdc:	3863      	subs	r0, #99	; 0x63
 8003cde:	2815      	cmp	r0, #21
 8003ce0:	d8f7      	bhi.n	8003cd2 <_printf_i+0x2a>
 8003ce2:	f7fc fa0f 	bl	8000104 <__gnu_thumb1_case_shi>
 8003ce6:	0016      	.short	0x0016
 8003ce8:	fff6001f 	.word	0xfff6001f
 8003cec:	fff6fff6 	.word	0xfff6fff6
 8003cf0:	001ffff6 	.word	0x001ffff6
 8003cf4:	fff6fff6 	.word	0xfff6fff6
 8003cf8:	fff6fff6 	.word	0xfff6fff6
 8003cfc:	003600a8 	.word	0x003600a8
 8003d00:	fff6009a 	.word	0xfff6009a
 8003d04:	00b9fff6 	.word	0x00b9fff6
 8003d08:	0036fff6 	.word	0x0036fff6
 8003d0c:	fff6fff6 	.word	0xfff6fff6
 8003d10:	009e      	.short	0x009e
 8003d12:	0026      	movs	r6, r4
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	3642      	adds	r6, #66	; 0x42
 8003d18:	1d11      	adds	r1, r2, #4
 8003d1a:	6019      	str	r1, [r3, #0]
 8003d1c:	6813      	ldr	r3, [r2, #0]
 8003d1e:	7033      	strb	r3, [r6, #0]
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0a7      	b.n	8003e74 <_printf_i+0x1cc>
 8003d24:	6808      	ldr	r0, [r1, #0]
 8003d26:	6819      	ldr	r1, [r3, #0]
 8003d28:	1d0a      	adds	r2, r1, #4
 8003d2a:	0605      	lsls	r5, r0, #24
 8003d2c:	d50b      	bpl.n	8003d46 <_printf_i+0x9e>
 8003d2e:	680d      	ldr	r5, [r1, #0]
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	2d00      	cmp	r5, #0
 8003d34:	da03      	bge.n	8003d3e <_printf_i+0x96>
 8003d36:	232d      	movs	r3, #45	; 0x2d
 8003d38:	9a04      	ldr	r2, [sp, #16]
 8003d3a:	426d      	negs	r5, r5
 8003d3c:	7013      	strb	r3, [r2, #0]
 8003d3e:	4b61      	ldr	r3, [pc, #388]	; (8003ec4 <_printf_i+0x21c>)
 8003d40:	270a      	movs	r7, #10
 8003d42:	9303      	str	r3, [sp, #12]
 8003d44:	e01b      	b.n	8003d7e <_printf_i+0xd6>
 8003d46:	680d      	ldr	r5, [r1, #0]
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	0641      	lsls	r1, r0, #25
 8003d4c:	d5f1      	bpl.n	8003d32 <_printf_i+0x8a>
 8003d4e:	b22d      	sxth	r5, r5
 8003d50:	e7ef      	b.n	8003d32 <_printf_i+0x8a>
 8003d52:	680d      	ldr	r5, [r1, #0]
 8003d54:	6819      	ldr	r1, [r3, #0]
 8003d56:	1d08      	adds	r0, r1, #4
 8003d58:	6018      	str	r0, [r3, #0]
 8003d5a:	062e      	lsls	r6, r5, #24
 8003d5c:	d501      	bpl.n	8003d62 <_printf_i+0xba>
 8003d5e:	680d      	ldr	r5, [r1, #0]
 8003d60:	e003      	b.n	8003d6a <_printf_i+0xc2>
 8003d62:	066d      	lsls	r5, r5, #25
 8003d64:	d5fb      	bpl.n	8003d5e <_printf_i+0xb6>
 8003d66:	680d      	ldr	r5, [r1, #0]
 8003d68:	b2ad      	uxth	r5, r5
 8003d6a:	4b56      	ldr	r3, [pc, #344]	; (8003ec4 <_printf_i+0x21c>)
 8003d6c:	2708      	movs	r7, #8
 8003d6e:	9303      	str	r3, [sp, #12]
 8003d70:	2a6f      	cmp	r2, #111	; 0x6f
 8003d72:	d000      	beq.n	8003d76 <_printf_i+0xce>
 8003d74:	3702      	adds	r7, #2
 8003d76:	0023      	movs	r3, r4
 8003d78:	2200      	movs	r2, #0
 8003d7a:	3343      	adds	r3, #67	; 0x43
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	6863      	ldr	r3, [r4, #4]
 8003d80:	60a3      	str	r3, [r4, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	db03      	blt.n	8003d8e <_printf_i+0xe6>
 8003d86:	2204      	movs	r2, #4
 8003d88:	6821      	ldr	r1, [r4, #0]
 8003d8a:	4391      	bics	r1, r2
 8003d8c:	6021      	str	r1, [r4, #0]
 8003d8e:	2d00      	cmp	r5, #0
 8003d90:	d102      	bne.n	8003d98 <_printf_i+0xf0>
 8003d92:	9e04      	ldr	r6, [sp, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00c      	beq.n	8003db2 <_printf_i+0x10a>
 8003d98:	9e04      	ldr	r6, [sp, #16]
 8003d9a:	0028      	movs	r0, r5
 8003d9c:	0039      	movs	r1, r7
 8003d9e:	f7fc fa41 	bl	8000224 <__aeabi_uidivmod>
 8003da2:	9b03      	ldr	r3, [sp, #12]
 8003da4:	3e01      	subs	r6, #1
 8003da6:	5c5b      	ldrb	r3, [r3, r1]
 8003da8:	7033      	strb	r3, [r6, #0]
 8003daa:	002b      	movs	r3, r5
 8003dac:	0005      	movs	r5, r0
 8003dae:	429f      	cmp	r7, r3
 8003db0:	d9f3      	bls.n	8003d9a <_printf_i+0xf2>
 8003db2:	2f08      	cmp	r7, #8
 8003db4:	d109      	bne.n	8003dca <_printf_i+0x122>
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	07db      	lsls	r3, r3, #31
 8003dba:	d506      	bpl.n	8003dca <_printf_i+0x122>
 8003dbc:	6863      	ldr	r3, [r4, #4]
 8003dbe:	6922      	ldr	r2, [r4, #16]
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	dc02      	bgt.n	8003dca <_printf_i+0x122>
 8003dc4:	2330      	movs	r3, #48	; 0x30
 8003dc6:	3e01      	subs	r6, #1
 8003dc8:	7033      	strb	r3, [r6, #0]
 8003dca:	9b04      	ldr	r3, [sp, #16]
 8003dcc:	1b9b      	subs	r3, r3, r6
 8003dce:	6123      	str	r3, [r4, #16]
 8003dd0:	9b07      	ldr	r3, [sp, #28]
 8003dd2:	0021      	movs	r1, r4
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	9805      	ldr	r0, [sp, #20]
 8003dd8:	9b06      	ldr	r3, [sp, #24]
 8003dda:	aa09      	add	r2, sp, #36	; 0x24
 8003ddc:	f7ff fef4 	bl	8003bc8 <_printf_common>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	d14c      	bne.n	8003e7e <_printf_i+0x1d6>
 8003de4:	2001      	movs	r0, #1
 8003de6:	4240      	negs	r0, r0
 8003de8:	b00b      	add	sp, #44	; 0x2c
 8003dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dec:	3145      	adds	r1, #69	; 0x45
 8003dee:	700a      	strb	r2, [r1, #0]
 8003df0:	4a34      	ldr	r2, [pc, #208]	; (8003ec4 <_printf_i+0x21c>)
 8003df2:	9203      	str	r2, [sp, #12]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	6821      	ldr	r1, [r4, #0]
 8003df8:	ca20      	ldmia	r2!, {r5}
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	0608      	lsls	r0, r1, #24
 8003dfe:	d516      	bpl.n	8003e2e <_printf_i+0x186>
 8003e00:	07cb      	lsls	r3, r1, #31
 8003e02:	d502      	bpl.n	8003e0a <_printf_i+0x162>
 8003e04:	2320      	movs	r3, #32
 8003e06:	4319      	orrs	r1, r3
 8003e08:	6021      	str	r1, [r4, #0]
 8003e0a:	2710      	movs	r7, #16
 8003e0c:	2d00      	cmp	r5, #0
 8003e0e:	d1b2      	bne.n	8003d76 <_printf_i+0xce>
 8003e10:	2320      	movs	r3, #32
 8003e12:	6822      	ldr	r2, [r4, #0]
 8003e14:	439a      	bics	r2, r3
 8003e16:	6022      	str	r2, [r4, #0]
 8003e18:	e7ad      	b.n	8003d76 <_printf_i+0xce>
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	6809      	ldr	r1, [r1, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	6022      	str	r2, [r4, #0]
 8003e22:	0022      	movs	r2, r4
 8003e24:	2178      	movs	r1, #120	; 0x78
 8003e26:	3245      	adds	r2, #69	; 0x45
 8003e28:	7011      	strb	r1, [r2, #0]
 8003e2a:	4a27      	ldr	r2, [pc, #156]	; (8003ec8 <_printf_i+0x220>)
 8003e2c:	e7e1      	b.n	8003df2 <_printf_i+0x14a>
 8003e2e:	0648      	lsls	r0, r1, #25
 8003e30:	d5e6      	bpl.n	8003e00 <_printf_i+0x158>
 8003e32:	b2ad      	uxth	r5, r5
 8003e34:	e7e4      	b.n	8003e00 <_printf_i+0x158>
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	680d      	ldr	r5, [r1, #0]
 8003e3a:	1d10      	adds	r0, r2, #4
 8003e3c:	6949      	ldr	r1, [r1, #20]
 8003e3e:	6018      	str	r0, [r3, #0]
 8003e40:	6813      	ldr	r3, [r2, #0]
 8003e42:	062e      	lsls	r6, r5, #24
 8003e44:	d501      	bpl.n	8003e4a <_printf_i+0x1a2>
 8003e46:	6019      	str	r1, [r3, #0]
 8003e48:	e002      	b.n	8003e50 <_printf_i+0x1a8>
 8003e4a:	066d      	lsls	r5, r5, #25
 8003e4c:	d5fb      	bpl.n	8003e46 <_printf_i+0x19e>
 8003e4e:	8019      	strh	r1, [r3, #0]
 8003e50:	2300      	movs	r3, #0
 8003e52:	9e04      	ldr	r6, [sp, #16]
 8003e54:	6123      	str	r3, [r4, #16]
 8003e56:	e7bb      	b.n	8003dd0 <_printf_i+0x128>
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	1d11      	adds	r1, r2, #4
 8003e5c:	6019      	str	r1, [r3, #0]
 8003e5e:	6816      	ldr	r6, [r2, #0]
 8003e60:	2100      	movs	r1, #0
 8003e62:	0030      	movs	r0, r6
 8003e64:	6862      	ldr	r2, [r4, #4]
 8003e66:	f000 f937 	bl	80040d8 <memchr>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d001      	beq.n	8003e72 <_printf_i+0x1ca>
 8003e6e:	1b80      	subs	r0, r0, r6
 8003e70:	6060      	str	r0, [r4, #4]
 8003e72:	6863      	ldr	r3, [r4, #4]
 8003e74:	6123      	str	r3, [r4, #16]
 8003e76:	2300      	movs	r3, #0
 8003e78:	9a04      	ldr	r2, [sp, #16]
 8003e7a:	7013      	strb	r3, [r2, #0]
 8003e7c:	e7a8      	b.n	8003dd0 <_printf_i+0x128>
 8003e7e:	6923      	ldr	r3, [r4, #16]
 8003e80:	0032      	movs	r2, r6
 8003e82:	9906      	ldr	r1, [sp, #24]
 8003e84:	9805      	ldr	r0, [sp, #20]
 8003e86:	9d07      	ldr	r5, [sp, #28]
 8003e88:	47a8      	blx	r5
 8003e8a:	1c43      	adds	r3, r0, #1
 8003e8c:	d0aa      	beq.n	8003de4 <_printf_i+0x13c>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	079b      	lsls	r3, r3, #30
 8003e92:	d415      	bmi.n	8003ec0 <_printf_i+0x218>
 8003e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e96:	68e0      	ldr	r0, [r4, #12]
 8003e98:	4298      	cmp	r0, r3
 8003e9a:	daa5      	bge.n	8003de8 <_printf_i+0x140>
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	e7a3      	b.n	8003de8 <_printf_i+0x140>
 8003ea0:	0022      	movs	r2, r4
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	9906      	ldr	r1, [sp, #24]
 8003ea6:	9805      	ldr	r0, [sp, #20]
 8003ea8:	9e07      	ldr	r6, [sp, #28]
 8003eaa:	3219      	adds	r2, #25
 8003eac:	47b0      	blx	r6
 8003eae:	1c43      	adds	r3, r0, #1
 8003eb0:	d098      	beq.n	8003de4 <_printf_i+0x13c>
 8003eb2:	3501      	adds	r5, #1
 8003eb4:	68e3      	ldr	r3, [r4, #12]
 8003eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	42ab      	cmp	r3, r5
 8003ebc:	dcf0      	bgt.n	8003ea0 <_printf_i+0x1f8>
 8003ebe:	e7e9      	b.n	8003e94 <_printf_i+0x1ec>
 8003ec0:	2500      	movs	r5, #0
 8003ec2:	e7f7      	b.n	8003eb4 <_printf_i+0x20c>
 8003ec4:	08004239 	.word	0x08004239
 8003ec8:	0800424a 	.word	0x0800424a

08003ecc <_putc_r>:
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	0006      	movs	r6, r0
 8003ed0:	000d      	movs	r5, r1
 8003ed2:	0014      	movs	r4, r2
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	d004      	beq.n	8003ee2 <_putc_r+0x16>
 8003ed8:	6983      	ldr	r3, [r0, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <_putc_r+0x16>
 8003ede:	f7ff fb15 	bl	800350c <__sinit>
 8003ee2:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <_putc_r+0x88>)
 8003ee4:	429c      	cmp	r4, r3
 8003ee6:	d124      	bne.n	8003f32 <_putc_r+0x66>
 8003ee8:	6874      	ldr	r4, [r6, #4]
 8003eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003eec:	07db      	lsls	r3, r3, #31
 8003eee:	d405      	bmi.n	8003efc <_putc_r+0x30>
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	059b      	lsls	r3, r3, #22
 8003ef4:	d402      	bmi.n	8003efc <_putc_r+0x30>
 8003ef6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ef8:	f7ff fba9 	bl	800364e <__retarget_lock_acquire_recursive>
 8003efc:	68a3      	ldr	r3, [r4, #8]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	60a3      	str	r3, [r4, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da05      	bge.n	8003f12 <_putc_r+0x46>
 8003f06:	69a2      	ldr	r2, [r4, #24]
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	db1c      	blt.n	8003f46 <_putc_r+0x7a>
 8003f0c:	b2eb      	uxtb	r3, r5
 8003f0e:	2b0a      	cmp	r3, #10
 8003f10:	d019      	beq.n	8003f46 <_putc_r+0x7a>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	6022      	str	r2, [r4, #0]
 8003f18:	701d      	strb	r5, [r3, #0]
 8003f1a:	b2ed      	uxtb	r5, r5
 8003f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f1e:	07db      	lsls	r3, r3, #31
 8003f20:	d405      	bmi.n	8003f2e <_putc_r+0x62>
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	059b      	lsls	r3, r3, #22
 8003f26:	d402      	bmi.n	8003f2e <_putc_r+0x62>
 8003f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f2a:	f7ff fb91 	bl	8003650 <__retarget_lock_release_recursive>
 8003f2e:	0028      	movs	r0, r5
 8003f30:	bd70      	pop	{r4, r5, r6, pc}
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <_putc_r+0x8c>)
 8003f34:	429c      	cmp	r4, r3
 8003f36:	d101      	bne.n	8003f3c <_putc_r+0x70>
 8003f38:	68b4      	ldr	r4, [r6, #8]
 8003f3a:	e7d6      	b.n	8003eea <_putc_r+0x1e>
 8003f3c:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <_putc_r+0x90>)
 8003f3e:	429c      	cmp	r4, r3
 8003f40:	d1d3      	bne.n	8003eea <_putc_r+0x1e>
 8003f42:	68f4      	ldr	r4, [r6, #12]
 8003f44:	e7d1      	b.n	8003eea <_putc_r+0x1e>
 8003f46:	0029      	movs	r1, r5
 8003f48:	0022      	movs	r2, r4
 8003f4a:	0030      	movs	r0, r6
 8003f4c:	f7ff f8e2 	bl	8003114 <__swbuf_r>
 8003f50:	0005      	movs	r5, r0
 8003f52:	e7e3      	b.n	8003f1c <_putc_r+0x50>
 8003f54:	080041e8 	.word	0x080041e8
 8003f58:	08004208 	.word	0x08004208
 8003f5c:	080041c8 	.word	0x080041c8

08003f60 <_sbrk_r>:
 8003f60:	2300      	movs	r3, #0
 8003f62:	b570      	push	{r4, r5, r6, lr}
 8003f64:	4d06      	ldr	r5, [pc, #24]	; (8003f80 <_sbrk_r+0x20>)
 8003f66:	0004      	movs	r4, r0
 8003f68:	0008      	movs	r0, r1
 8003f6a:	602b      	str	r3, [r5, #0]
 8003f6c:	f7fc fd66 	bl	8000a3c <_sbrk>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	d103      	bne.n	8003f7c <_sbrk_r+0x1c>
 8003f74:	682b      	ldr	r3, [r5, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d000      	beq.n	8003f7c <_sbrk_r+0x1c>
 8003f7a:	6023      	str	r3, [r4, #0]
 8003f7c:	bd70      	pop	{r4, r5, r6, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	200003ac 	.word	0x200003ac

08003f84 <__sread>:
 8003f84:	b570      	push	{r4, r5, r6, lr}
 8003f86:	000c      	movs	r4, r1
 8003f88:	250e      	movs	r5, #14
 8003f8a:	5f49      	ldrsh	r1, [r1, r5]
 8003f8c:	f000 f8c0 	bl	8004110 <_read_r>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	db03      	blt.n	8003f9c <__sread+0x18>
 8003f94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f96:	181b      	adds	r3, r3, r0
 8003f98:	6563      	str	r3, [r4, #84]	; 0x54
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	4a02      	ldr	r2, [pc, #8]	; (8003fa8 <__sread+0x24>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	81a3      	strh	r3, [r4, #12]
 8003fa4:	e7f9      	b.n	8003f9a <__sread+0x16>
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	ffffefff 	.word	0xffffefff

08003fac <__swrite>:
 8003fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fae:	001f      	movs	r7, r3
 8003fb0:	898b      	ldrh	r3, [r1, #12]
 8003fb2:	0005      	movs	r5, r0
 8003fb4:	000c      	movs	r4, r1
 8003fb6:	0016      	movs	r6, r2
 8003fb8:	05db      	lsls	r3, r3, #23
 8003fba:	d505      	bpl.n	8003fc8 <__swrite+0x1c>
 8003fbc:	230e      	movs	r3, #14
 8003fbe:	5ec9      	ldrsh	r1, [r1, r3]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	f000 f874 	bl	80040b0 <_lseek_r>
 8003fc8:	89a3      	ldrh	r3, [r4, #12]
 8003fca:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <__swrite+0x34>)
 8003fcc:	0028      	movs	r0, r5
 8003fce:	4013      	ands	r3, r2
 8003fd0:	81a3      	strh	r3, [r4, #12]
 8003fd2:	0032      	movs	r2, r6
 8003fd4:	230e      	movs	r3, #14
 8003fd6:	5ee1      	ldrsh	r1, [r4, r3]
 8003fd8:	003b      	movs	r3, r7
 8003fda:	f000 f81f 	bl	800401c <_write_r>
 8003fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fe0:	ffffefff 	.word	0xffffefff

08003fe4 <__sseek>:
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	000c      	movs	r4, r1
 8003fe8:	250e      	movs	r5, #14
 8003fea:	5f49      	ldrsh	r1, [r1, r5]
 8003fec:	f000 f860 	bl	80040b0 <_lseek_r>
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	1c42      	adds	r2, r0, #1
 8003ff4:	d103      	bne.n	8003ffe <__sseek+0x1a>
 8003ff6:	4a05      	ldr	r2, [pc, #20]	; (800400c <__sseek+0x28>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	bd70      	pop	{r4, r5, r6, pc}
 8003ffe:	2280      	movs	r2, #128	; 0x80
 8004000:	0152      	lsls	r2, r2, #5
 8004002:	4313      	orrs	r3, r2
 8004004:	81a3      	strh	r3, [r4, #12]
 8004006:	6560      	str	r0, [r4, #84]	; 0x54
 8004008:	e7f8      	b.n	8003ffc <__sseek+0x18>
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	ffffefff 	.word	0xffffefff

08004010 <__sclose>:
 8004010:	b510      	push	{r4, lr}
 8004012:	230e      	movs	r3, #14
 8004014:	5ec9      	ldrsh	r1, [r1, r3]
 8004016:	f000 f815 	bl	8004044 <_close_r>
 800401a:	bd10      	pop	{r4, pc}

0800401c <_write_r>:
 800401c:	b570      	push	{r4, r5, r6, lr}
 800401e:	0004      	movs	r4, r0
 8004020:	0008      	movs	r0, r1
 8004022:	0011      	movs	r1, r2
 8004024:	001a      	movs	r2, r3
 8004026:	2300      	movs	r3, #0
 8004028:	4d05      	ldr	r5, [pc, #20]	; (8004040 <_write_r+0x24>)
 800402a:	602b      	str	r3, [r5, #0]
 800402c:	f7fd fd92 	bl	8001b54 <_write>
 8004030:	1c43      	adds	r3, r0, #1
 8004032:	d103      	bne.n	800403c <_write_r+0x20>
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d000      	beq.n	800403c <_write_r+0x20>
 800403a:	6023      	str	r3, [r4, #0]
 800403c:	bd70      	pop	{r4, r5, r6, pc}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	200003ac 	.word	0x200003ac

08004044 <_close_r>:
 8004044:	2300      	movs	r3, #0
 8004046:	b570      	push	{r4, r5, r6, lr}
 8004048:	4d06      	ldr	r5, [pc, #24]	; (8004064 <_close_r+0x20>)
 800404a:	0004      	movs	r4, r0
 800404c:	0008      	movs	r0, r1
 800404e:	602b      	str	r3, [r5, #0]
 8004050:	f7fc fcc7 	bl	80009e2 <_close>
 8004054:	1c43      	adds	r3, r0, #1
 8004056:	d103      	bne.n	8004060 <_close_r+0x1c>
 8004058:	682b      	ldr	r3, [r5, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d000      	beq.n	8004060 <_close_r+0x1c>
 800405e:	6023      	str	r3, [r4, #0]
 8004060:	bd70      	pop	{r4, r5, r6, pc}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	200003ac 	.word	0x200003ac

08004068 <_fstat_r>:
 8004068:	2300      	movs	r3, #0
 800406a:	b570      	push	{r4, r5, r6, lr}
 800406c:	4d06      	ldr	r5, [pc, #24]	; (8004088 <_fstat_r+0x20>)
 800406e:	0004      	movs	r4, r0
 8004070:	0008      	movs	r0, r1
 8004072:	0011      	movs	r1, r2
 8004074:	602b      	str	r3, [r5, #0]
 8004076:	f7fc fcbe 	bl	80009f6 <_fstat>
 800407a:	1c43      	adds	r3, r0, #1
 800407c:	d103      	bne.n	8004086 <_fstat_r+0x1e>
 800407e:	682b      	ldr	r3, [r5, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d000      	beq.n	8004086 <_fstat_r+0x1e>
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	bd70      	pop	{r4, r5, r6, pc}
 8004088:	200003ac 	.word	0x200003ac

0800408c <_isatty_r>:
 800408c:	2300      	movs	r3, #0
 800408e:	b570      	push	{r4, r5, r6, lr}
 8004090:	4d06      	ldr	r5, [pc, #24]	; (80040ac <_isatty_r+0x20>)
 8004092:	0004      	movs	r4, r0
 8004094:	0008      	movs	r0, r1
 8004096:	602b      	str	r3, [r5, #0]
 8004098:	f7fc fcbb 	bl	8000a12 <_isatty>
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	d103      	bne.n	80040a8 <_isatty_r+0x1c>
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d000      	beq.n	80040a8 <_isatty_r+0x1c>
 80040a6:	6023      	str	r3, [r4, #0]
 80040a8:	bd70      	pop	{r4, r5, r6, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	200003ac 	.word	0x200003ac

080040b0 <_lseek_r>:
 80040b0:	b570      	push	{r4, r5, r6, lr}
 80040b2:	0004      	movs	r4, r0
 80040b4:	0008      	movs	r0, r1
 80040b6:	0011      	movs	r1, r2
 80040b8:	001a      	movs	r2, r3
 80040ba:	2300      	movs	r3, #0
 80040bc:	4d05      	ldr	r5, [pc, #20]	; (80040d4 <_lseek_r+0x24>)
 80040be:	602b      	str	r3, [r5, #0]
 80040c0:	f7fc fcb0 	bl	8000a24 <_lseek>
 80040c4:	1c43      	adds	r3, r0, #1
 80040c6:	d103      	bne.n	80040d0 <_lseek_r+0x20>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d000      	beq.n	80040d0 <_lseek_r+0x20>
 80040ce:	6023      	str	r3, [r4, #0]
 80040d0:	bd70      	pop	{r4, r5, r6, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	200003ac 	.word	0x200003ac

080040d8 <memchr>:
 80040d8:	b2c9      	uxtb	r1, r1
 80040da:	1882      	adds	r2, r0, r2
 80040dc:	4290      	cmp	r0, r2
 80040de:	d101      	bne.n	80040e4 <memchr+0xc>
 80040e0:	2000      	movs	r0, #0
 80040e2:	4770      	bx	lr
 80040e4:	7803      	ldrb	r3, [r0, #0]
 80040e6:	428b      	cmp	r3, r1
 80040e8:	d0fb      	beq.n	80040e2 <memchr+0xa>
 80040ea:	3001      	adds	r0, #1
 80040ec:	e7f6      	b.n	80040dc <memchr+0x4>
	...

080040f0 <__malloc_lock>:
 80040f0:	b510      	push	{r4, lr}
 80040f2:	4802      	ldr	r0, [pc, #8]	; (80040fc <__malloc_lock+0xc>)
 80040f4:	f7ff faab 	bl	800364e <__retarget_lock_acquire_recursive>
 80040f8:	bd10      	pop	{r4, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	200003a0 	.word	0x200003a0

08004100 <__malloc_unlock>:
 8004100:	b510      	push	{r4, lr}
 8004102:	4802      	ldr	r0, [pc, #8]	; (800410c <__malloc_unlock+0xc>)
 8004104:	f7ff faa4 	bl	8003650 <__retarget_lock_release_recursive>
 8004108:	bd10      	pop	{r4, pc}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	200003a0 	.word	0x200003a0

08004110 <_read_r>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	0004      	movs	r4, r0
 8004114:	0008      	movs	r0, r1
 8004116:	0011      	movs	r1, r2
 8004118:	001a      	movs	r2, r3
 800411a:	2300      	movs	r3, #0
 800411c:	4d05      	ldr	r5, [pc, #20]	; (8004134 <_read_r+0x24>)
 800411e:	602b      	str	r3, [r5, #0]
 8004120:	f7fc fc42 	bl	80009a8 <_read>
 8004124:	1c43      	adds	r3, r0, #1
 8004126:	d103      	bne.n	8004130 <_read_r+0x20>
 8004128:	682b      	ldr	r3, [r5, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d000      	beq.n	8004130 <_read_r+0x20>
 800412e:	6023      	str	r3, [r4, #0]
 8004130:	bd70      	pop	{r4, r5, r6, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	200003ac 	.word	0x200003ac

08004138 <_init>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr

08004144 <_fini>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414a:	bc08      	pop	{r3}
 800414c:	469e      	mov	lr, r3
 800414e:	4770      	bx	lr
