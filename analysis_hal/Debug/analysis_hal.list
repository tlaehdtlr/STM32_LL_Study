
analysis_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004418  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800459c  0800459c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800459c  0800459c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800459c  0800459c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800459c  0800459c  0001459c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045a0  080045a0  000145a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080045a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000074  08004618  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004618  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2cf  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c7  00000000  00000000  0002f36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00031838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  000325c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb7f  00000000  00000000  00033250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011017  00000000  00000000  0004fdcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa354  00000000  00000000  00060de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010b13a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000365c  00000000  00000000  0010b18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080044bc 	.word	0x080044bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	080044bc 	.word	0x080044bc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b089      	sub	sp, #36	; 0x24
 8000220:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000222:	240c      	movs	r4, #12
 8000224:	193b      	adds	r3, r7, r4
 8000226:	0018      	movs	r0, r3
 8000228:	2314      	movs	r3, #20
 800022a:	001a      	movs	r2, r3
 800022c:	2100      	movs	r1, #0
 800022e:	f003 fbf3 	bl	8003a18 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000232:	4b1c      	ldr	r3, [pc, #112]	; (80002a4 <MX_GPIO_Init+0x88>)
 8000234:	695a      	ldr	r2, [r3, #20]
 8000236:	4b1b      	ldr	r3, [pc, #108]	; (80002a4 <MX_GPIO_Init+0x88>)
 8000238:	2180      	movs	r1, #128	; 0x80
 800023a:	03c9      	lsls	r1, r1, #15
 800023c:	430a      	orrs	r2, r1
 800023e:	615a      	str	r2, [r3, #20]
 8000240:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <MX_GPIO_Init+0x88>)
 8000242:	695a      	ldr	r2, [r3, #20]
 8000244:	2380      	movs	r3, #128	; 0x80
 8000246:	03db      	lsls	r3, r3, #15
 8000248:	4013      	ands	r3, r2
 800024a:	60bb      	str	r3, [r7, #8]
 800024c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800024e:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <MX_GPIO_Init+0x88>)
 8000250:	695a      	ldr	r2, [r3, #20]
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <MX_GPIO_Init+0x88>)
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	0309      	lsls	r1, r1, #12
 8000258:	430a      	orrs	r2, r1
 800025a:	615a      	str	r2, [r3, #20]
 800025c:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <MX_GPIO_Init+0x88>)
 800025e:	695a      	ldr	r2, [r3, #20]
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	031b      	lsls	r3, r3, #12
 8000264:	4013      	ands	r3, r2
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 800026a:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <MX_GPIO_Init+0x8c>)
 800026c:	2200      	movs	r2, #0
 800026e:	2148      	movs	r1, #72	; 0x48
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fe67 	bl	8000f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF3 PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000276:	0021      	movs	r1, r4
 8000278:	187b      	adds	r3, r7, r1
 800027a:	2248      	movs	r2, #72	; 0x48
 800027c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2201      	movs	r2, #1
 8000282:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000284:	187b      	adds	r3, r7, r1
 8000286:	2202      	movs	r2, #2
 8000288:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2200      	movs	r2, #0
 800028e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000290:	187b      	adds	r3, r7, r1
 8000292:	4a05      	ldr	r2, [pc, #20]	; (80002a8 <MX_GPIO_Init+0x8c>)
 8000294:	0019      	movs	r1, r3
 8000296:	0010      	movs	r0, r2
 8000298:	f000 fcdc 	bl	8000c54 <HAL_GPIO_Init>

}
 800029c:	46c0      	nop			; (mov r8, r8)
 800029e:	46bd      	mov	sp, r7
 80002a0:	b009      	add	sp, #36	; 0x24
 80002a2:	bd90      	pop	{r4, r7, pc}
 80002a4:	40021000 	.word	0x40021000
 80002a8:	48001400 	.word	0x48001400

080002ac <__io_putchar>:
   set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]

  // HAL_UART_Transmit_IT(&huart3, (uint8_t*)&ch, 1);
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <__io_putchar+0x20>)
 80002b6:	1d39      	adds	r1, r7, #4
 80002b8:	4805      	ldr	r0, [pc, #20]	; (80002d0 <__io_putchar+0x24>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	f001 ff88 	bl	80021d0 <HAL_UART_Transmit>
  
  return ch;
 80002c0:	687b      	ldr	r3, [r7, #4]
}
 80002c2:	0018      	movs	r0, r3
 80002c4:	46bd      	mov	sp, r7
 80002c6:	b002      	add	sp, #8
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	0000ffff 	.word	0x0000ffff
 80002d0:	20000100 	.word	0x20000100

080002d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d8:	f000 fafc 	bl	80008d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002dc:	f000 f822 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e0:	f7ff ff9c 	bl	800021c <MX_GPIO_Init>
  MX_TIM6_Init();
 80002e4:	f000 f978 	bl	80005d8 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 80002e8:	f000 fa12 	bl	8000710 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80002ec:	4b0b      	ldr	r3, [pc, #44]	; (800031c <main+0x48>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	2108      	movs	r1, #8
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fe26 	bl	8000f44 <HAL_GPIO_WritePin>
  printf("Hello, this is 'analysis of HAL project' \r\n");
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <main+0x4c>)
 80002fa:	0018      	movs	r0, r3
 80002fc:	f003 fc06 	bl	8003b0c <puts>
  while (1)
  {
    if (tim_check(1000))
 8000300:	23fa      	movs	r3, #250	; 0xfa
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	0018      	movs	r0, r3
 8000306:	f000 f9e9 	bl	80006dc <tim_check>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d0f8      	beq.n	8000300 <main+0x2c>
    {
      HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800030e:	4b03      	ldr	r3, [pc, #12]	; (800031c <main+0x48>)
 8000310:	2140      	movs	r1, #64	; 0x40
 8000312:	0018      	movs	r0, r3
 8000314:	f000 fe33 	bl	8000f7e <HAL_GPIO_TogglePin>
    if (tim_check(1000))
 8000318:	e7f2      	b.n	8000300 <main+0x2c>
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	48001400 	.word	0x48001400
 8000320:	080044d4 	.word	0x080044d4

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b099      	sub	sp, #100	; 0x64
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	242c      	movs	r4, #44	; 0x2c
 800032c:	193b      	adds	r3, r7, r4
 800032e:	0018      	movs	r0, r3
 8000330:	2334      	movs	r3, #52	; 0x34
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f003 fb6f 	bl	8003a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033a:	231c      	movs	r3, #28
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	0018      	movs	r0, r3
 8000340:	2310      	movs	r3, #16
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f003 fb67 	bl	8003a18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800034a:	003b      	movs	r3, r7
 800034c:	0018      	movs	r0, r3
 800034e:	231c      	movs	r3, #28
 8000350:	001a      	movs	r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	f003 fb60 	bl	8003a18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000358:	0021      	movs	r1, r4
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2201      	movs	r2, #1
 800035e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2201      	movs	r2, #1
 8000364:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2202      	movs	r2, #2
 800036a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2280      	movs	r2, #128	; 0x80
 8000370:	0252      	lsls	r2, r2, #9
 8000372:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2200      	movs	r2, #0
 8000378:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000380:	187b      	adds	r3, r7, r1
 8000382:	0018      	movs	r0, r3
 8000384:	f000 fe16 	bl	8000fb4 <HAL_RCC_OscConfig>
 8000388:	1e03      	subs	r3, r0, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800038c:	f000 f829 	bl	80003e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000390:	211c      	movs	r1, #28
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2202      	movs	r2, #2
 800039c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2200      	movs	r2, #0
 80003a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2101      	movs	r1, #1
 80003ae:	0018      	movs	r0, r3
 80003b0:	f001 f986 	bl	80016c0 <HAL_RCC_ClockConfig>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80003b8:	f000 f813 	bl	80003e2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80003bc:	003b      	movs	r3, r7
 80003be:	2280      	movs	r2, #128	; 0x80
 80003c0:	02d2      	lsls	r2, r2, #11
 80003c2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80003c4:	003b      	movs	r3, r7
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ca:	003b      	movs	r3, r7
 80003cc:	0018      	movs	r0, r3
 80003ce:	f001 fae5 	bl	800199c <HAL_RCCEx_PeriphCLKConfig>
 80003d2:	1e03      	subs	r3, r0, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003d6:	f000 f804 	bl	80003e2 <Error_Handler>
  }
}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	b019      	add	sp, #100	; 0x64
 80003e0:	bd90      	pop	{r4, r7, pc}

080003e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e2:	b580      	push	{r7, lr}
 80003e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e6:	b672      	cpsid	i
}
 80003e8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ea:	e7fe      	b.n	80003ea <Error_Handler+0x8>

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <HAL_MspInit+0x44>)
 80003f4:	699a      	ldr	r2, [r3, #24]
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <HAL_MspInit+0x44>)
 80003f8:	2101      	movs	r1, #1
 80003fa:	430a      	orrs	r2, r1
 80003fc:	619a      	str	r2, [r3, #24]
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_MspInit+0x44>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	2201      	movs	r2, #1
 8000404:	4013      	ands	r3, r2
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <HAL_MspInit+0x44>)
 800040c:	69da      	ldr	r2, [r3, #28]
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <HAL_MspInit+0x44>)
 8000410:	2180      	movs	r1, #128	; 0x80
 8000412:	0549      	lsls	r1, r1, #21
 8000414:	430a      	orrs	r2, r1
 8000416:	61da      	str	r2, [r3, #28]
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <HAL_MspInit+0x44>)
 800041a:	69da      	ldr	r2, [r3, #28]
 800041c:	2380      	movs	r3, #128	; 0x80
 800041e:	055b      	lsls	r3, r3, #21
 8000420:	4013      	ands	r3, r2
 8000422:	603b      	str	r3, [r7, #0]
 8000424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b002      	add	sp, #8
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	40021000 	.word	0x40021000

08000434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <NMI_Handler+0x4>

0800043a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <HardFault_Handler+0x4>

08000440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000458:	f000 fa84 	bl	8000964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <TIM6_DAC_IRQHandler+0x14>)
 800046a:	0018      	movs	r0, r3
 800046c:	f001 fc38 	bl	8001ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000470:	46c0      	nop			; (mov r8, r8)
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	20000098 	.word	0x20000098

0800047c <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000480:	4b03      	ldr	r3, [pc, #12]	; (8000490 <USART3_8_IRQHandler+0x14>)
 8000482:	0018      	movs	r0, r3
 8000484:	f002 f80c 	bl	80024a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

  /* USER CODE END USART3_8_IRQn 1 */
}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	20000100 	.word	0x20000100

08000494 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
 80004a4:	e00a      	b.n	80004bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004a6:	e000      	b.n	80004aa <_read+0x16>
 80004a8:	bf00      	nop
 80004aa:	0001      	movs	r1, r0
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	1c5a      	adds	r2, r3, #1
 80004b0:	60ba      	str	r2, [r7, #8]
 80004b2:	b2ca      	uxtb	r2, r1
 80004b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	3301      	adds	r3, #1
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	697a      	ldr	r2, [r7, #20]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	dbf0      	blt.n	80004a6 <_read+0x12>
	}

return len;
 80004c4:	687b      	ldr	r3, [r7, #4]
}
 80004c6:	0018      	movs	r0, r3
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b006      	add	sp, #24
 80004cc:	bd80      	pop	{r7, pc}

080004ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b086      	sub	sp, #24
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	60f8      	str	r0, [r7, #12]
 80004d6:	60b9      	str	r1, [r7, #8]
 80004d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
 80004de:	e009      	b.n	80004f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	60ba      	str	r2, [r7, #8]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	0018      	movs	r0, r3
 80004ea:	f7ff fedf 	bl	80002ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	3301      	adds	r3, #1
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	697a      	ldr	r2, [r7, #20]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	dbf1      	blt.n	80004e0 <_write+0x12>
	}
	return len;
 80004fc:	687b      	ldr	r3, [r7, #4]
}
 80004fe:	0018      	movs	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	b006      	add	sp, #24
 8000504:	bd80      	pop	{r7, pc}

08000506 <_close>:

int _close(int file)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
	return -1;
 800050e:	2301      	movs	r3, #1
 8000510:	425b      	negs	r3, r3
}
 8000512:	0018      	movs	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	b002      	add	sp, #8
 8000518:	bd80      	pop	{r7, pc}

0800051a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	0192      	lsls	r2, r2, #6
 800052a:	605a      	str	r2, [r3, #4]
	return 0;
 800052c:	2300      	movs	r3, #0
}
 800052e:	0018      	movs	r0, r3
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}

08000536 <_isatty>:

int _isatty(int file)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
	return 1;
 800053e:	2301      	movs	r3, #1
}
 8000540:	0018      	movs	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	b002      	add	sp, #8
 8000546:	bd80      	pop	{r7, pc}

08000548 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
	return 0;
 8000554:	2300      	movs	r3, #0
}
 8000556:	0018      	movs	r0, r3
 8000558:	46bd      	mov	sp, r7
 800055a:	b004      	add	sp, #16
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000568:	4a14      	ldr	r2, [pc, #80]	; (80005bc <_sbrk+0x5c>)
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <_sbrk+0x60>)
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000574:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <_sbrk+0x64>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d102      	bne.n	8000582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <_sbrk+0x64>)
 800057e:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <_sbrk+0x68>)
 8000580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <_sbrk+0x64>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	18d3      	adds	r3, r2, r3
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	429a      	cmp	r2, r3
 800058e:	d207      	bcs.n	80005a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000590:	f003 fa18 	bl	80039c4 <__errno>
 8000594:	0003      	movs	r3, r0
 8000596:	220c      	movs	r2, #12
 8000598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800059a:	2301      	movs	r3, #1
 800059c:	425b      	negs	r3, r3
 800059e:	e009      	b.n	80005b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <_sbrk+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <_sbrk+0x64>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	18d2      	adds	r2, r2, r3
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <_sbrk+0x64>)
 80005b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80005b2:	68fb      	ldr	r3, [r7, #12]
}
 80005b4:	0018      	movs	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b006      	add	sp, #24
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20008000 	.word	0x20008000
 80005c0:	00000400 	.word	0x00000400
 80005c4:	20000090 	.word	0x20000090
 80005c8:	200001a0 	.word	0x200001a0

080005cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005de:	003b      	movs	r3, r7
 80005e0:	0018      	movs	r0, r3
 80005e2:	2308      	movs	r3, #8
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f003 fa16 	bl	8003a18 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_TIM6_Init+0x7c>)
 80005ee:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <MX_TIM6_Init+0x80>)
 80005f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_TIM6_Init+0x7c>)
 80005f4:	222f      	movs	r2, #47	; 0x2f
 80005f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_TIM6_Init+0x7c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_TIM6_Init+0x7c>)
 8000600:	4a16      	ldr	r2, [pc, #88]	; (800065c <MX_TIM6_Init+0x84>)
 8000602:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_TIM6_Init+0x7c>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_TIM6_Init+0x7c>)
 800060c:	0018      	movs	r0, r3
 800060e:	f001 fac5 	bl	8001b9c <HAL_TIM_Base_Init>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000616:	f7ff fee4 	bl	80003e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061a:	003b      	movs	r3, r7
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000620:	003b      	movs	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000626:	003a      	movs	r2, r7
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_TIM6_Init+0x7c>)
 800062a:	0011      	movs	r1, r2
 800062c:	0018      	movs	r0, r3
 800062e:	f001 fd0d 	bl	800204c <HAL_TIMEx_MasterConfigSynchronization>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000636:	f7ff fed4 	bl	80003e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_TIM6_Init+0x7c>)
 800063c:	0018      	movs	r0, r3
 800063e:	f001 fafd 	bl	8001c3c <HAL_TIM_Base_Start_IT>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_TIM6_Init+0x72>
  {
    /* Starting Error */
    Error_Handler();
 8000646:	f7ff fecc 	bl	80003e2 <Error_Handler>
  }
  /* USER CODE END TIM6_Init 2 */

}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b002      	add	sp, #8
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	20000098 	.word	0x20000098
 8000658:	40001000 	.word	0x40001000
 800065c:	000003e7 	.word	0x000003e7

08000660 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <HAL_TIM_Base_MspInit+0x44>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d113      	bne.n	800069a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <HAL_TIM_Base_MspInit+0x48>)
 8000674:	69da      	ldr	r2, [r3, #28]
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_TIM_Base_MspInit+0x48>)
 8000678:	2110      	movs	r1, #16
 800067a:	430a      	orrs	r2, r1
 800067c:	61da      	str	r2, [r3, #28]
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_TIM_Base_MspInit+0x48>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	2210      	movs	r2, #16
 8000684:	4013      	ands	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	2011      	movs	r0, #17
 8000690:	f000 fa30 	bl	8000af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000694:	2011      	movs	r0, #17
 8000696:	f000 fa42 	bl	8000b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b004      	add	sp, #16
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	40001000 	.word	0x40001000
 80006a8:	40021000 	.word	0x40021000

080006ac <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM6)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d106      	bne.n	80006cc <HAL_TIM_PeriodElapsedCallback+0x20>
  {
    timer6_cnt++;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	3301      	adds	r3, #1
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006ca:	801a      	strh	r2, [r3, #0]
  }
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b002      	add	sp, #8
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40001000 	.word	0x40001000
 80006d8:	20000094 	.word	0x20000094

080006dc <tim_check>:

bool tim_check(uint16_t timeout)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	0002      	movs	r2, r0
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	801a      	strh	r2, [r3, #0]
  if (timer6_cnt > timeout)
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <tim_check+0x30>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	1dba      	adds	r2, r7, #6
 80006f0:	8812      	ldrh	r2, [r2, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d204      	bcs.n	8000700 <tim_check+0x24>
  {
    timer6_cnt = 0;
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <tim_check+0x30>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	801a      	strh	r2, [r3, #0]
    return true;
 80006fc:	2301      	movs	r3, #1
 80006fe:	e000      	b.n	8000702 <tim_check+0x26>
  }

  return false;
 8000700:	2300      	movs	r3, #0
}
 8000702:	0018      	movs	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	b002      	add	sp, #8
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000094 	.word	0x20000094

08000710 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_USART3_UART_Init+0x64>)
 8000716:	4a18      	ldr	r2, [pc, #96]	; (8000778 <MX_USART3_UART_Init+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_USART3_UART_Init+0x64>)
 800071c:	22e1      	movs	r2, #225	; 0xe1
 800071e:	0252      	lsls	r2, r2, #9
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_USART3_UART_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_USART3_UART_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART3_UART_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_USART3_UART_Init+0x64>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART3_UART_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART3_UART_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART3_UART_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART3_UART_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART3_UART_Init+0x64>)
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fce7 	bl	8002128 <HAL_UART_Init>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f7ff fe40 	bl	80003e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, uart_received_data, 1);
 8000762:	4906      	ldr	r1, [pc, #24]	; (800077c <MX_USART3_UART_Init+0x6c>)
 8000764:	4b03      	ldr	r3, [pc, #12]	; (8000774 <MX_USART3_UART_Init+0x64>)
 8000766:	2201      	movs	r2, #1
 8000768:	0018      	movs	r0, r3
 800076a:	f001 fe41 	bl	80023f0 <HAL_UART_Receive_IT>

  /* USER CODE END USART3_Init 2 */

}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000100 	.word	0x20000100
 8000778:	40004800 	.word	0x40004800
 800077c:	200000e0 	.word	0x200000e0

08000780 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b08b      	sub	sp, #44	; 0x2c
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	2414      	movs	r4, #20
 800078a:	193b      	adds	r3, r7, r4
 800078c:	0018      	movs	r0, r3
 800078e:	2314      	movs	r3, #20
 8000790:	001a      	movs	r2, r3
 8000792:	2100      	movs	r1, #0
 8000794:	f003 f940 	bl	8003a18 <memset>
  if(uartHandle->Instance==USART3)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a20      	ldr	r2, [pc, #128]	; (8000820 <HAL_UART_MspInit+0xa0>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d13a      	bne.n	8000818 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <HAL_UART_MspInit+0xa4>)
 80007a4:	69da      	ldr	r2, [r3, #28]
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <HAL_UART_MspInit+0xa4>)
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	02c9      	lsls	r1, r1, #11
 80007ac:	430a      	orrs	r2, r1
 80007ae:	61da      	str	r2, [r3, #28]
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <HAL_UART_MspInit+0xa4>)
 80007b2:	69da      	ldr	r2, [r3, #28]
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	02db      	lsls	r3, r3, #11
 80007b8:	4013      	ands	r3, r2
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <HAL_UART_MspInit+0xa4>)
 80007c0:	695a      	ldr	r2, [r3, #20]
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <HAL_UART_MspInit+0xa4>)
 80007c4:	2180      	movs	r1, #128	; 0x80
 80007c6:	0309      	lsls	r1, r1, #12
 80007c8:	430a      	orrs	r2, r1
 80007ca:	615a      	str	r2, [r3, #20]
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <HAL_UART_MspInit+0xa4>)
 80007ce:	695a      	ldr	r2, [r3, #20]
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	031b      	lsls	r3, r3, #12
 80007d4:	4013      	ands	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	22c0      	movs	r2, #192	; 0xc0
 80007de:	0112      	lsls	r2, r2, #4
 80007e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	0021      	movs	r1, r4
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2202      	movs	r2, #2
 80007e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2203      	movs	r2, #3
 80007f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2201      	movs	r2, #1
 80007fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <HAL_UART_MspInit+0xa8>)
 8000800:	0019      	movs	r1, r3
 8000802:	0010      	movs	r0, r2
 8000804:	f000 fa26 	bl	8000c54 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2100      	movs	r1, #0
 800080c:	201d      	movs	r0, #29
 800080e:	f000 f971 	bl	8000af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8000812:	201d      	movs	r0, #29
 8000814:	f000 f983 	bl	8000b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b00b      	add	sp, #44	; 0x2c
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	40004800 	.word	0x40004800
 8000824:	40021000 	.word	0x40021000
 8000828:	48000800 	.word	0x48000800

0800082c <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if (uart_received_data[0] == '\r' || uart_received_data[0] == '\n')
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_UART_RxCpltCallback+0x48>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b0d      	cmp	r3, #13
 800083a:	d003      	beq.n	8000844 <HAL_UART_RxCpltCallback+0x18>
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <HAL_UART_RxCpltCallback+0x48>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b0a      	cmp	r3, #10
 8000842:	d106      	bne.n	8000852 <HAL_UART_RxCpltCallback+0x26>
  {
    HAL_UART_Transmit_IT(&huart3, new_line, sizeof(new_line));
 8000844:	490c      	ldr	r1, [pc, #48]	; (8000878 <HAL_UART_RxCpltCallback+0x4c>)
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_UART_RxCpltCallback+0x50>)
 8000848:	2203      	movs	r2, #3
 800084a:	0018      	movs	r0, r3
 800084c:	f001 fd60 	bl	8002310 <HAL_UART_Transmit_IT>
 8000850:	e005      	b.n	800085e <HAL_UART_RxCpltCallback+0x32>
  }
  else
  {
    HAL_UART_Transmit_IT(&huart3, uart_received_data, 1);
 8000852:	4908      	ldr	r1, [pc, #32]	; (8000874 <HAL_UART_RxCpltCallback+0x48>)
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_UART_RxCpltCallback+0x50>)
 8000856:	2201      	movs	r2, #1
 8000858:	0018      	movs	r0, r3
 800085a:	f001 fd59 	bl	8002310 <HAL_UART_Transmit_IT>
  }
  HAL_UART_Receive_IT(&huart3, uart_received_data, 1);
 800085e:	4905      	ldr	r1, [pc, #20]	; (8000874 <HAL_UART_RxCpltCallback+0x48>)
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_UART_RxCpltCallback+0x50>)
 8000862:	2201      	movs	r2, #1
 8000864:	0018      	movs	r0, r3
 8000866:	f001 fdc3 	bl	80023f0 <HAL_UART_Receive_IT>
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	200000e0 	.word	0x200000e0
 8000878:	20000004 	.word	0x20000004
 800087c:	20000100 	.word	0x20000100

08000880 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000882:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000884:	f7ff fea2 	bl	80005cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <LoopForever+0x6>)
  ldr r1, =_edata
 800088a:	490d      	ldr	r1, [pc, #52]	; (80008c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <LoopForever+0xe>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a0:	4c0a      	ldr	r4, [pc, #40]	; (80008cc <LoopForever+0x16>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ae:	f003 f88f 	bl	80039d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b2:	f7ff fd0f 	bl	80002d4 <main>

080008b6 <LoopForever>:

LoopForever:
    b LoopForever
 80008b6:	e7fe      	b.n	80008b6 <LoopForever>
  ldr   r0, =_estack
 80008b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008c4:	080045a4 	.word	0x080045a4
  ldr r2, =_sbss
 80008c8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008cc:	2000019c 	.word	0x2000019c

080008d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC1_COMP_IRQHandler>
	...

080008d4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <HAL_Init+0x24>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_Init+0x24>)
 80008de:	2110      	movs	r1, #16
 80008e0:	430a      	orrs	r2, r1
 80008e2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 f809 	bl	80008fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ea:	f7ff fd7f 	bl	80003ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	0018      	movs	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	40022000 	.word	0x40022000

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_InitTick+0x5c>)
 8000906:	681c      	ldr	r4, [r3, #0]
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <HAL_InitTick+0x60>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	0019      	movs	r1, r3
 800090e:	23fa      	movs	r3, #250	; 0xfa
 8000910:	0098      	lsls	r0, r3, #2
 8000912:	f7ff fbf7 	bl	8000104 <__udivsi3>
 8000916:	0003      	movs	r3, r0
 8000918:	0019      	movs	r1, r3
 800091a:	0020      	movs	r0, r4
 800091c:	f7ff fbf2 	bl	8000104 <__udivsi3>
 8000920:	0003      	movs	r3, r0
 8000922:	0018      	movs	r0, r3
 8000924:	f000 f90b 	bl	8000b3e <HAL_SYSTICK_Config>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	e00f      	b.n	8000950 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b03      	cmp	r3, #3
 8000934:	d80b      	bhi.n	800094e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	2301      	movs	r3, #1
 800093a:	425b      	negs	r3, r3
 800093c:	2200      	movs	r2, #0
 800093e:	0018      	movs	r0, r3
 8000940:	f000 f8d8 	bl	8000af4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_InitTick+0x64>)
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	e000      	b.n	8000950 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
}
 8000950:	0018      	movs	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	b003      	add	sp, #12
 8000956:	bd90      	pop	{r4, r7, pc}
 8000958:	20000000 	.word	0x20000000
 800095c:	2000000c 	.word	0x2000000c
 8000960:	20000008 	.word	0x20000008

08000964 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x1c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	001a      	movs	r2, r3
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_IncTick+0x20>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	18d2      	adds	r2, r2, r3
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <HAL_IncTick+0x20>)
 8000976:	601a      	str	r2, [r3, #0]
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	2000000c 	.word	0x2000000c
 8000984:	20000188 	.word	0x20000188

08000988 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b02      	ldr	r3, [pc, #8]	; (8000998 <HAL_GetTick+0x10>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	0018      	movs	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	20000188 	.word	0x20000188

0800099c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	0002      	movs	r2, r0
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b7f      	cmp	r3, #127	; 0x7f
 80009ae:	d809      	bhi.n	80009c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	001a      	movs	r2, r3
 80009b6:	231f      	movs	r3, #31
 80009b8:	401a      	ands	r2, r3
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <__NVIC_EnableIRQ+0x30>)
 80009bc:	2101      	movs	r1, #1
 80009be:	4091      	lsls	r1, r2
 80009c0:	000a      	movs	r2, r1
 80009c2:	601a      	str	r2, [r3, #0]
  }
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b002      	add	sp, #8
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	e000e100 	.word	0xe000e100

080009d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	0002      	movs	r2, r0
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b7f      	cmp	r3, #127	; 0x7f
 80009e4:	d828      	bhi.n	8000a38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e6:	4a2f      	ldr	r2, [pc, #188]	; (8000aa4 <__NVIC_SetPriority+0xd4>)
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	33c0      	adds	r3, #192	; 0xc0
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	589b      	ldr	r3, [r3, r2]
 80009f6:	1dfa      	adds	r2, r7, #7
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	0011      	movs	r1, r2
 80009fc:	2203      	movs	r2, #3
 80009fe:	400a      	ands	r2, r1
 8000a00:	00d2      	lsls	r2, r2, #3
 8000a02:	21ff      	movs	r1, #255	; 0xff
 8000a04:	4091      	lsls	r1, r2
 8000a06:	000a      	movs	r2, r1
 8000a08:	43d2      	mvns	r2, r2
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	019b      	lsls	r3, r3, #6
 8000a12:	22ff      	movs	r2, #255	; 0xff
 8000a14:	401a      	ands	r2, r3
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	4003      	ands	r3, r0
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a24:	481f      	ldr	r0, [pc, #124]	; (8000aa4 <__NVIC_SetPriority+0xd4>)
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b25b      	sxtb	r3, r3
 8000a2c:	089b      	lsrs	r3, r3, #2
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	33c0      	adds	r3, #192	; 0xc0
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a36:	e031      	b.n	8000a9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a38:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <__NVIC_SetPriority+0xd8>)
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	0019      	movs	r1, r3
 8000a40:	230f      	movs	r3, #15
 8000a42:	400b      	ands	r3, r1
 8000a44:	3b08      	subs	r3, #8
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	3306      	adds	r3, #6
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	18d3      	adds	r3, r2, r3
 8000a4e:	3304      	adds	r3, #4
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	1dfa      	adds	r2, r7, #7
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	0011      	movs	r1, r2
 8000a58:	2203      	movs	r2, #3
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	00d2      	lsls	r2, r2, #3
 8000a5e:	21ff      	movs	r1, #255	; 0xff
 8000a60:	4091      	lsls	r1, r2
 8000a62:	000a      	movs	r2, r1
 8000a64:	43d2      	mvns	r2, r2
 8000a66:	401a      	ands	r2, r3
 8000a68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	019b      	lsls	r3, r3, #6
 8000a6e:	22ff      	movs	r2, #255	; 0xff
 8000a70:	401a      	ands	r2, r3
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	0018      	movs	r0, r3
 8000a78:	2303      	movs	r3, #3
 8000a7a:	4003      	ands	r3, r0
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a80:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <__NVIC_SetPriority+0xd8>)
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	001c      	movs	r4, r3
 8000a88:	230f      	movs	r3, #15
 8000a8a:	4023      	ands	r3, r4
 8000a8c:	3b08      	subs	r3, #8
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	430a      	orrs	r2, r1
 8000a92:	3306      	adds	r3, #6
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	18c3      	adds	r3, r0, r3
 8000a98:	3304      	adds	r3, #4
 8000a9a:	601a      	str	r2, [r3, #0]
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b003      	add	sp, #12
 8000aa2:	bd90      	pop	{r4, r7, pc}
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	045b      	lsls	r3, r3, #17
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d301      	bcc.n	8000ac4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e010      	b.n	8000ae6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <SysTick_Config+0x44>)
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	3a01      	subs	r2, #1
 8000aca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000acc:	2301      	movs	r3, #1
 8000ace:	425b      	negs	r3, r3
 8000ad0:	2103      	movs	r1, #3
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f7ff ff7c 	bl	80009d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <SysTick_Config+0x44>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <SysTick_Config+0x44>)
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	e000e010 	.word	0xe000e010

08000af4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	210f      	movs	r1, #15
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	1c02      	adds	r2, r0, #0
 8000b04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	0011      	movs	r1, r2
 8000b10:	0018      	movs	r0, r3
 8000b12:	f7ff ff5d 	bl	80009d0 <__NVIC_SetPriority>
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b004      	add	sp, #16
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	0002      	movs	r2, r0
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b25b      	sxtb	r3, r3
 8000b30:	0018      	movs	r0, r3
 8000b32:	f7ff ff33 	bl	800099c <__NVIC_EnableIRQ>
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f7ff ffaf 	bl	8000aac <SysTick_Config>
 8000b4e:	0003      	movs	r3, r0
}
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2221      	movs	r2, #33	; 0x21
 8000b64:	5c9b      	ldrb	r3, [r3, r2]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d008      	beq.n	8000b7e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2204      	movs	r2, #4
 8000b70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2220      	movs	r2, #32
 8000b76:	2100      	movs	r1, #0
 8000b78:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e020      	b.n	8000bc0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	210e      	movs	r1, #14
 8000b8a:	438a      	bics	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	438a      	bics	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4091      	lsls	r1, r2
 8000baa:	000a      	movs	r2, r1
 8000bac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2221      	movs	r2, #33	; 0x21
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2220      	movs	r2, #32
 8000bba:	2100      	movs	r1, #0
 8000bbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b002      	add	sp, #8
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2221      	movs	r2, #33	; 0x21
 8000bdc:	5c9b      	ldrb	r3, [r3, r2]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d006      	beq.n	8000bf2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2204      	movs	r2, #4
 8000be8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e028      	b.n	8000c44 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	210e      	movs	r1, #14
 8000bfe:	438a      	bics	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	438a      	bics	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	000a      	movs	r2, r1
 8000c20:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2221      	movs	r2, #33	; 0x21
 8000c26:	2101      	movs	r1, #1
 8000c28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2220      	movs	r2, #32
 8000c2e:	2100      	movs	r1, #0
 8000c30:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d004      	beq.n	8000c44 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	0010      	movs	r0, r2
 8000c42:	4798      	blx	r3
    }
  }
  return status;
 8000c44:	230f      	movs	r3, #15
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	781b      	ldrb	r3, [r3, #0]
}
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b004      	add	sp, #16
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c62:	e155      	b.n	8000f10 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2101      	movs	r1, #1
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	000a      	movs	r2, r1
 8000c70:	4013      	ands	r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d100      	bne.n	8000c7c <HAL_GPIO_Init+0x28>
 8000c7a:	e146      	b.n	8000f0a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2203      	movs	r2, #3
 8000c82:	4013      	ands	r3, r2
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d005      	beq.n	8000c94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d130      	bne.n	8000cf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	409a      	lsls	r2, r3
 8000ca2:	0013      	movs	r3, r2
 8000ca4:	43da      	mvns	r2, r3
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	0013      	movs	r3, r2
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cca:	2201      	movs	r2, #1
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	091b      	lsrs	r3, r3, #4
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	0013      	movs	r3, r2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d017      	beq.n	8000d32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	0013      	movs	r3, r2
 8000d12:	43da      	mvns	r2, r3
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2203      	movs	r2, #3
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d123      	bne.n	8000d86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	08da      	lsrs	r2, r3, #3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3208      	adds	r2, #8
 8000d46:	0092      	lsls	r2, r2, #2
 8000d48:	58d3      	ldr	r3, [r2, r3]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2207      	movs	r2, #7
 8000d50:	4013      	ands	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	220f      	movs	r2, #15
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	691a      	ldr	r2, [r3, #16]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	2107      	movs	r1, #7
 8000d6a:	400b      	ands	r3, r1
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	08da      	lsrs	r2, r3, #3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3208      	adds	r2, #8
 8000d80:	0092      	lsls	r2, r2, #2
 8000d82:	6939      	ldr	r1, [r7, #16]
 8000d84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	43da      	mvns	r2, r3
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2203      	movs	r2, #3
 8000da4:	401a      	ands	r2, r3
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	409a      	lsls	r2, r3
 8000dac:	0013      	movs	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	23c0      	movs	r3, #192	; 0xc0
 8000dc0:	029b      	lsls	r3, r3, #10
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	d100      	bne.n	8000dc8 <HAL_GPIO_Init+0x174>
 8000dc6:	e0a0      	b.n	8000f0a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc8:	4b57      	ldr	r3, [pc, #348]	; (8000f28 <HAL_GPIO_Init+0x2d4>)
 8000dca:	699a      	ldr	r2, [r3, #24]
 8000dcc:	4b56      	ldr	r3, [pc, #344]	; (8000f28 <HAL_GPIO_Init+0x2d4>)
 8000dce:	2101      	movs	r1, #1
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	619a      	str	r2, [r3, #24]
 8000dd4:	4b54      	ldr	r3, [pc, #336]	; (8000f28 <HAL_GPIO_Init+0x2d4>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4013      	ands	r3, r2
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000de0:	4a52      	ldr	r2, [pc, #328]	; (8000f2c <HAL_GPIO_Init+0x2d8>)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	3302      	adds	r3, #2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	589b      	ldr	r3, [r3, r2]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2203      	movs	r2, #3
 8000df2:	4013      	ands	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	220f      	movs	r2, #15
 8000df8:	409a      	lsls	r2, r3
 8000dfa:	0013      	movs	r3, r2
 8000dfc:	43da      	mvns	r2, r3
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	2390      	movs	r3, #144	; 0x90
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d019      	beq.n	8000e42 <HAL_GPIO_Init+0x1ee>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a47      	ldr	r2, [pc, #284]	; (8000f30 <HAL_GPIO_Init+0x2dc>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d013      	beq.n	8000e3e <HAL_GPIO_Init+0x1ea>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a46      	ldr	r2, [pc, #280]	; (8000f34 <HAL_GPIO_Init+0x2e0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00d      	beq.n	8000e3a <HAL_GPIO_Init+0x1e6>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a45      	ldr	r2, [pc, #276]	; (8000f38 <HAL_GPIO_Init+0x2e4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d007      	beq.n	8000e36 <HAL_GPIO_Init+0x1e2>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a44      	ldr	r2, [pc, #272]	; (8000f3c <HAL_GPIO_Init+0x2e8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_GPIO_Init+0x1de>
 8000e2e:	2304      	movs	r3, #4
 8000e30:	e008      	b.n	8000e44 <HAL_GPIO_Init+0x1f0>
 8000e32:	2305      	movs	r3, #5
 8000e34:	e006      	b.n	8000e44 <HAL_GPIO_Init+0x1f0>
 8000e36:	2303      	movs	r3, #3
 8000e38:	e004      	b.n	8000e44 <HAL_GPIO_Init+0x1f0>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e002      	b.n	8000e44 <HAL_GPIO_Init+0x1f0>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <HAL_GPIO_Init+0x1f0>
 8000e42:	2300      	movs	r3, #0
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	2103      	movs	r1, #3
 8000e48:	400a      	ands	r2, r1
 8000e4a:	0092      	lsls	r2, r2, #2
 8000e4c:	4093      	lsls	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e54:	4935      	ldr	r1, [pc, #212]	; (8000f2c <HAL_GPIO_Init+0x2d8>)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <HAL_GPIO_Init+0x2ec>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	035b      	lsls	r3, r3, #13
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e86:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <HAL_GPIO_Init+0x2ec>)
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e8c:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <HAL_GPIO_Init+0x2ec>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43da      	mvns	r2, r3
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	039b      	lsls	r3, r3, #14
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <HAL_GPIO_Init+0x2ec>)
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <HAL_GPIO_Init+0x2ec>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	029b      	lsls	r3, r3, #10
 8000ece:	4013      	ands	r3, r2
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_GPIO_Init+0x2ec>)
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_GPIO_Init+0x2ec>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43da      	mvns	r2, r3
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	025b      	lsls	r3, r3, #9
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_GPIO_Init+0x2ec>)
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	40da      	lsrs	r2, r3
 8000f18:	1e13      	subs	r3, r2, #0
 8000f1a:	d000      	beq.n	8000f1e <HAL_GPIO_Init+0x2ca>
 8000f1c:	e6a2      	b.n	8000c64 <HAL_GPIO_Init+0x10>
  } 
}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b006      	add	sp, #24
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	48000400 	.word	0x48000400
 8000f34:	48000800 	.word	0x48000800
 8000f38:	48000c00 	.word	0x48000c00
 8000f3c:	48001000 	.word	0x48001000
 8000f40:	40010400 	.word	0x40010400

08000f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	0008      	movs	r0, r1
 8000f4e:	0011      	movs	r1, r2
 8000f50:	1cbb      	adds	r3, r7, #2
 8000f52:	1c02      	adds	r2, r0, #0
 8000f54:	801a      	strh	r2, [r3, #0]
 8000f56:	1c7b      	adds	r3, r7, #1
 8000f58:	1c0a      	adds	r2, r1, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f5c:	1c7b      	adds	r3, r7, #1
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f64:	1cbb      	adds	r3, r7, #2
 8000f66:	881a      	ldrh	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f6c:	e003      	b.n	8000f76 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f6e:	1cbb      	adds	r3, r7, #2
 8000f70:	881a      	ldrh	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	000a      	movs	r2, r1
 8000f88:	1cbb      	adds	r3, r7, #2
 8000f8a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f92:	1cbb      	adds	r3, r7, #2
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	041a      	lsls	r2, r3, #16
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	1cb9      	adds	r1, r7, #2
 8000fa2:	8809      	ldrh	r1, [r1, #0]
 8000fa4:	400b      	ands	r3, r1
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b004      	add	sp, #16
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	f000 fb76 	bl	80016b4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d100      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x20>
 8000fd2:	e08e      	b.n	80010f2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fd4:	4bc5      	ldr	r3, [pc, #788]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	220c      	movs	r2, #12
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d00e      	beq.n	8000ffe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe0:	4bc2      	ldr	r3, [pc, #776]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	220c      	movs	r2, #12
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d117      	bne.n	800101c <HAL_RCC_OscConfig+0x68>
 8000fec:	4bbf      	ldr	r3, [pc, #764]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	23c0      	movs	r3, #192	; 0xc0
 8000ff2:	025b      	lsls	r3, r3, #9
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	025b      	lsls	r3, r3, #9
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d10e      	bne.n	800101c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffe:	4bbb      	ldr	r3, [pc, #748]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	029b      	lsls	r3, r3, #10
 8001006:	4013      	ands	r3, r2
 8001008:	d100      	bne.n	800100c <HAL_RCC_OscConfig+0x58>
 800100a:	e071      	b.n	80010f0 <HAL_RCC_OscConfig+0x13c>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d000      	beq.n	8001016 <HAL_RCC_OscConfig+0x62>
 8001014:	e06c      	b.n	80010f0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	f000 fb4c 	bl	80016b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d107      	bne.n	8001034 <HAL_RCC_OscConfig+0x80>
 8001024:	4bb1      	ldr	r3, [pc, #708]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4bb0      	ldr	r3, [pc, #704]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	0249      	lsls	r1, r1, #9
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e02f      	b.n	8001094 <HAL_RCC_OscConfig+0xe0>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10c      	bne.n	8001056 <HAL_RCC_OscConfig+0xa2>
 800103c:	4bab      	ldr	r3, [pc, #684]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4baa      	ldr	r3, [pc, #680]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001042:	49ab      	ldr	r1, [pc, #684]	; (80012f0 <HAL_RCC_OscConfig+0x33c>)
 8001044:	400a      	ands	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	4ba8      	ldr	r3, [pc, #672]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4ba7      	ldr	r3, [pc, #668]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800104e:	49a9      	ldr	r1, [pc, #676]	; (80012f4 <HAL_RCC_OscConfig+0x340>)
 8001050:	400a      	ands	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	e01e      	b.n	8001094 <HAL_RCC_OscConfig+0xe0>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b05      	cmp	r3, #5
 800105c:	d10e      	bne.n	800107c <HAL_RCC_OscConfig+0xc8>
 800105e:	4ba3      	ldr	r3, [pc, #652]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4ba2      	ldr	r3, [pc, #648]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	02c9      	lsls	r1, r1, #11
 8001068:	430a      	orrs	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	4b9f      	ldr	r3, [pc, #636]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b9e      	ldr	r3, [pc, #632]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001072:	2180      	movs	r1, #128	; 0x80
 8001074:	0249      	lsls	r1, r1, #9
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e00b      	b.n	8001094 <HAL_RCC_OscConfig+0xe0>
 800107c:	4b9b      	ldr	r3, [pc, #620]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b9a      	ldr	r3, [pc, #616]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001082:	499b      	ldr	r1, [pc, #620]	; (80012f0 <HAL_RCC_OscConfig+0x33c>)
 8001084:	400a      	ands	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	4b98      	ldr	r3, [pc, #608]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b97      	ldr	r3, [pc, #604]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800108e:	4999      	ldr	r1, [pc, #612]	; (80012f4 <HAL_RCC_OscConfig+0x340>)
 8001090:	400a      	ands	r2, r1
 8001092:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d014      	beq.n	80010c6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fc74 	bl	8000988 <HAL_GetTick>
 80010a0:	0003      	movs	r3, r0
 80010a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a6:	f7ff fc6f 	bl	8000988 <HAL_GetTick>
 80010aa:	0002      	movs	r2, r0
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b64      	cmp	r3, #100	; 0x64
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e2fd      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b8:	4b8c      	ldr	r3, [pc, #560]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	029b      	lsls	r3, r3, #10
 80010c0:	4013      	ands	r3, r2
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0xf2>
 80010c4:	e015      	b.n	80010f2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c6:	f7ff fc5f 	bl	8000988 <HAL_GetTick>
 80010ca:	0003      	movs	r3, r0
 80010cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fc5a 	bl	8000988 <HAL_GetTick>
 80010d4:	0002      	movs	r2, r0
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e2e8      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e2:	4b82      	ldr	r3, [pc, #520]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	029b      	lsls	r3, r3, #10
 80010ea:	4013      	ands	r3, r2
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x11c>
 80010ee:	e000      	b.n	80010f2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2202      	movs	r2, #2
 80010f8:	4013      	ands	r3, r2
 80010fa:	d100      	bne.n	80010fe <HAL_RCC_OscConfig+0x14a>
 80010fc:	e06c      	b.n	80011d8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010fe:	4b7b      	ldr	r3, [pc, #492]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	220c      	movs	r2, #12
 8001104:	4013      	ands	r3, r2
 8001106:	d00e      	beq.n	8001126 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001108:	4b78      	ldr	r3, [pc, #480]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	220c      	movs	r2, #12
 800110e:	4013      	ands	r3, r2
 8001110:	2b08      	cmp	r3, #8
 8001112:	d11f      	bne.n	8001154 <HAL_RCC_OscConfig+0x1a0>
 8001114:	4b75      	ldr	r3, [pc, #468]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	23c0      	movs	r3, #192	; 0xc0
 800111a:	025b      	lsls	r3, r3, #9
 800111c:	401a      	ands	r2, r3
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	429a      	cmp	r2, r3
 8001124:	d116      	bne.n	8001154 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001126:	4b71      	ldr	r3, [pc, #452]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2202      	movs	r2, #2
 800112c:	4013      	ands	r3, r2
 800112e:	d005      	beq.n	800113c <HAL_RCC_OscConfig+0x188>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d001      	beq.n	800113c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e2bb      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113c:	4b6b      	ldr	r3, [pc, #428]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	22f8      	movs	r2, #248	; 0xf8
 8001142:	4393      	bics	r3, r2
 8001144:	0019      	movs	r1, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	00da      	lsls	r2, r3, #3
 800114c:	4b67      	ldr	r3, [pc, #412]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001152:	e041      	b.n	80011d8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d024      	beq.n	80011a6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800115c:	4b63      	ldr	r3, [pc, #396]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b62      	ldr	r3, [pc, #392]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001162:	2101      	movs	r1, #1
 8001164:	430a      	orrs	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fc0e 	bl	8000988 <HAL_GetTick>
 800116c:	0003      	movs	r3, r0
 800116e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001172:	f7ff fc09 	bl	8000988 <HAL_GetTick>
 8001176:	0002      	movs	r2, r0
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e297      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001184:	4b59      	ldr	r3, [pc, #356]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2202      	movs	r2, #2
 800118a:	4013      	ands	r3, r2
 800118c:	d0f1      	beq.n	8001172 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118e:	4b57      	ldr	r3, [pc, #348]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	22f8      	movs	r2, #248	; 0xf8
 8001194:	4393      	bics	r3, r2
 8001196:	0019      	movs	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	00da      	lsls	r2, r3, #3
 800119e:	4b53      	ldr	r3, [pc, #332]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e018      	b.n	80011d8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a6:	4b51      	ldr	r3, [pc, #324]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b50      	ldr	r3, [pc, #320]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011ac:	2101      	movs	r1, #1
 80011ae:	438a      	bics	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fbe9 	bl	8000988 <HAL_GetTick>
 80011b6:	0003      	movs	r3, r0
 80011b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011bc:	f7ff fbe4 	bl	8000988 <HAL_GetTick>
 80011c0:	0002      	movs	r2, r0
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e272      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ce:	4b47      	ldr	r3, [pc, #284]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2202      	movs	r2, #2
 80011d4:	4013      	ands	r3, r2
 80011d6:	d1f1      	bne.n	80011bc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2208      	movs	r2, #8
 80011de:	4013      	ands	r3, r2
 80011e0:	d036      	beq.n	8001250 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d019      	beq.n	800121e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ea:	4b40      	ldr	r3, [pc, #256]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ee:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80011f0:	2101      	movs	r1, #1
 80011f2:	430a      	orrs	r2, r1
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f6:	f7ff fbc7 	bl	8000988 <HAL_GetTick>
 80011fa:	0003      	movs	r3, r0
 80011fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001200:	f7ff fbc2 	bl	8000988 <HAL_GetTick>
 8001204:	0002      	movs	r2, r0
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e250      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001212:	4b36      	ldr	r3, [pc, #216]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	2202      	movs	r2, #2
 8001218:	4013      	ands	r3, r2
 800121a:	d0f1      	beq.n	8001200 <HAL_RCC_OscConfig+0x24c>
 800121c:	e018      	b.n	8001250 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800121e:	4b33      	ldr	r3, [pc, #204]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001222:	4b32      	ldr	r3, [pc, #200]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001224:	2101      	movs	r1, #1
 8001226:	438a      	bics	r2, r1
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122a:	f7ff fbad 	bl	8000988 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff fba8 	bl	8000988 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e236      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	2202      	movs	r2, #2
 800124c:	4013      	ands	r3, r2
 800124e:	d1f1      	bne.n	8001234 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2204      	movs	r2, #4
 8001256:	4013      	ands	r3, r2
 8001258:	d100      	bne.n	800125c <HAL_RCC_OscConfig+0x2a8>
 800125a:	e0b5      	b.n	80013c8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125c:	201f      	movs	r0, #31
 800125e:	183b      	adds	r3, r7, r0
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001266:	69da      	ldr	r2, [r3, #28]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	055b      	lsls	r3, r3, #21
 800126c:	4013      	ands	r3, r2
 800126e:	d110      	bne.n	8001292 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001272:	69da      	ldr	r2, [r3, #28]
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	0549      	lsls	r1, r1, #21
 800127a:	430a      	orrs	r2, r1
 800127c:	61da      	str	r2, [r3, #28]
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 8001280:	69da      	ldr	r2, [r3, #28]
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	055b      	lsls	r3, r3, #21
 8001286:	4013      	ands	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800128c:	183b      	adds	r3, r7, r0
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_RCC_OscConfig+0x344>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4013      	ands	r3, r2
 800129c:	d11a      	bne.n	80012d4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_RCC_OscConfig+0x344>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_RCC_OscConfig+0x344>)
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	0049      	lsls	r1, r1, #1
 80012a8:	430a      	orrs	r2, r1
 80012aa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ac:	f7ff fb6c 	bl	8000988 <HAL_GetTick>
 80012b0:	0003      	movs	r3, r0
 80012b2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b6:	f7ff fb67 	bl	8000988 <HAL_GetTick>
 80012ba:	0002      	movs	r2, r0
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b64      	cmp	r3, #100	; 0x64
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e1f5      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_RCC_OscConfig+0x344>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4013      	ands	r3, r2
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d10f      	bne.n	80012fc <HAL_RCC_OscConfig+0x348>
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80012de:	6a1a      	ldr	r2, [r3, #32]
 80012e0:	4b02      	ldr	r3, [pc, #8]	; (80012ec <HAL_RCC_OscConfig+0x338>)
 80012e2:	2101      	movs	r1, #1
 80012e4:	430a      	orrs	r2, r1
 80012e6:	621a      	str	r2, [r3, #32]
 80012e8:	e036      	b.n	8001358 <HAL_RCC_OscConfig+0x3a4>
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	40021000 	.word	0x40021000
 80012f0:	fffeffff 	.word	0xfffeffff
 80012f4:	fffbffff 	.word	0xfffbffff
 80012f8:	40007000 	.word	0x40007000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10c      	bne.n	800131e <HAL_RCC_OscConfig+0x36a>
 8001304:	4bca      	ldr	r3, [pc, #808]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001306:	6a1a      	ldr	r2, [r3, #32]
 8001308:	4bc9      	ldr	r3, [pc, #804]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800130a:	2101      	movs	r1, #1
 800130c:	438a      	bics	r2, r1
 800130e:	621a      	str	r2, [r3, #32]
 8001310:	4bc7      	ldr	r3, [pc, #796]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001312:	6a1a      	ldr	r2, [r3, #32]
 8001314:	4bc6      	ldr	r3, [pc, #792]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001316:	2104      	movs	r1, #4
 8001318:	438a      	bics	r2, r1
 800131a:	621a      	str	r2, [r3, #32]
 800131c:	e01c      	b.n	8001358 <HAL_RCC_OscConfig+0x3a4>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2b05      	cmp	r3, #5
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0x38c>
 8001326:	4bc2      	ldr	r3, [pc, #776]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001328:	6a1a      	ldr	r2, [r3, #32]
 800132a:	4bc1      	ldr	r3, [pc, #772]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800132c:	2104      	movs	r1, #4
 800132e:	430a      	orrs	r2, r1
 8001330:	621a      	str	r2, [r3, #32]
 8001332:	4bbf      	ldr	r3, [pc, #764]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001334:	6a1a      	ldr	r2, [r3, #32]
 8001336:	4bbe      	ldr	r3, [pc, #760]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001338:	2101      	movs	r1, #1
 800133a:	430a      	orrs	r2, r1
 800133c:	621a      	str	r2, [r3, #32]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0x3a4>
 8001340:	4bbb      	ldr	r3, [pc, #748]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001342:	6a1a      	ldr	r2, [r3, #32]
 8001344:	4bba      	ldr	r3, [pc, #744]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001346:	2101      	movs	r1, #1
 8001348:	438a      	bics	r2, r1
 800134a:	621a      	str	r2, [r3, #32]
 800134c:	4bb8      	ldr	r3, [pc, #736]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800134e:	6a1a      	ldr	r2, [r3, #32]
 8001350:	4bb7      	ldr	r3, [pc, #732]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001352:	2104      	movs	r1, #4
 8001354:	438a      	bics	r2, r1
 8001356:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d014      	beq.n	800138a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001360:	f7ff fb12 	bl	8000988 <HAL_GetTick>
 8001364:	0003      	movs	r3, r0
 8001366:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001368:	e009      	b.n	800137e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136a:	f7ff fb0d 	bl	8000988 <HAL_GetTick>
 800136e:	0002      	movs	r2, r0
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	4aaf      	ldr	r2, [pc, #700]	; (8001634 <HAL_RCC_OscConfig+0x680>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e19a      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137e:	4bac      	ldr	r3, [pc, #688]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	2202      	movs	r2, #2
 8001384:	4013      	ands	r3, r2
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0x3b6>
 8001388:	e013      	b.n	80013b2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fafd 	bl	8000988 <HAL_GetTick>
 800138e:	0003      	movs	r3, r0
 8001390:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001392:	e009      	b.n	80013a8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f7ff faf8 	bl	8000988 <HAL_GetTick>
 8001398:	0002      	movs	r2, r0
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	4aa5      	ldr	r2, [pc, #660]	; (8001634 <HAL_RCC_OscConfig+0x680>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e185      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a8:	4ba1      	ldr	r3, [pc, #644]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	2202      	movs	r2, #2
 80013ae:	4013      	ands	r3, r2
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013b2:	231f      	movs	r3, #31
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d105      	bne.n	80013c8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013bc:	4b9c      	ldr	r3, [pc, #624]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013be:	69da      	ldr	r2, [r3, #28]
 80013c0:	4b9b      	ldr	r3, [pc, #620]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013c2:	499d      	ldr	r1, [pc, #628]	; (8001638 <HAL_RCC_OscConfig+0x684>)
 80013c4:	400a      	ands	r2, r1
 80013c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2210      	movs	r2, #16
 80013ce:	4013      	ands	r3, r2
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d12a      	bne.n	8001430 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013da:	4b95      	ldr	r3, [pc, #596]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013de:	4b94      	ldr	r3, [pc, #592]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013e0:	2104      	movs	r1, #4
 80013e2:	430a      	orrs	r2, r1
 80013e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80013e6:	4b92      	ldr	r3, [pc, #584]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ea:	4b91      	ldr	r3, [pc, #580]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80013ec:	2101      	movs	r1, #1
 80013ee:	430a      	orrs	r2, r1
 80013f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fac9 	bl	8000988 <HAL_GetTick>
 80013f6:	0003      	movs	r3, r0
 80013f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013fc:	f7ff fac4 	bl	8000988 <HAL_GetTick>
 8001400:	0002      	movs	r2, r0
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e152      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800140e:	4b88      	ldr	r3, [pc, #544]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001412:	2202      	movs	r2, #2
 8001414:	4013      	ands	r3, r2
 8001416:	d0f1      	beq.n	80013fc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001418:	4b85      	ldr	r3, [pc, #532]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800141a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141c:	22f8      	movs	r2, #248	; 0xf8
 800141e:	4393      	bics	r3, r2
 8001420:	0019      	movs	r1, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	00da      	lsls	r2, r3, #3
 8001428:	4b81      	ldr	r3, [pc, #516]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800142a:	430a      	orrs	r2, r1
 800142c:	635a      	str	r2, [r3, #52]	; 0x34
 800142e:	e034      	b.n	800149a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	3305      	adds	r3, #5
 8001436:	d111      	bne.n	800145c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001438:	4b7d      	ldr	r3, [pc, #500]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800143a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143c:	4b7c      	ldr	r3, [pc, #496]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800143e:	2104      	movs	r1, #4
 8001440:	438a      	bics	r2, r1
 8001442:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001444:	4b7a      	ldr	r3, [pc, #488]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001448:	22f8      	movs	r2, #248	; 0xf8
 800144a:	4393      	bics	r3, r2
 800144c:	0019      	movs	r1, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	00da      	lsls	r2, r3, #3
 8001454:	4b76      	ldr	r3, [pc, #472]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001456:	430a      	orrs	r2, r1
 8001458:	635a      	str	r2, [r3, #52]	; 0x34
 800145a:	e01e      	b.n	800149a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800145c:	4b74      	ldr	r3, [pc, #464]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800145e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001460:	4b73      	ldr	r3, [pc, #460]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001462:	2104      	movs	r1, #4
 8001464:	430a      	orrs	r2, r1
 8001466:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001468:	4b71      	ldr	r3, [pc, #452]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800146a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146c:	4b70      	ldr	r3, [pc, #448]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800146e:	2101      	movs	r1, #1
 8001470:	438a      	bics	r2, r1
 8001472:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001474:	f7ff fa88 	bl	8000988 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800147e:	f7ff fa83 	bl	8000988 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e111      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001490:	4b67      	ldr	r3, [pc, #412]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001494:	2202      	movs	r2, #2
 8001496:	4013      	ands	r3, r2
 8001498:	d1f1      	bne.n	800147e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2220      	movs	r2, #32
 80014a0:	4013      	ands	r3, r2
 80014a2:	d05c      	beq.n	800155e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014a4:	4b62      	ldr	r3, [pc, #392]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	220c      	movs	r2, #12
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d00e      	beq.n	80014ce <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014b0:	4b5f      	ldr	r3, [pc, #380]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	220c      	movs	r2, #12
 80014b6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d114      	bne.n	80014e6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014bc:	4b5c      	ldr	r3, [pc, #368]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	23c0      	movs	r3, #192	; 0xc0
 80014c2:	025b      	lsls	r3, r3, #9
 80014c4:	401a      	ands	r2, r3
 80014c6:	23c0      	movs	r3, #192	; 0xc0
 80014c8:	025b      	lsls	r3, r3, #9
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d10b      	bne.n	80014e6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80014ce:	4b58      	ldr	r3, [pc, #352]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	029b      	lsls	r3, r3, #10
 80014d6:	4013      	ands	r3, r2
 80014d8:	d040      	beq.n	800155c <HAL_RCC_OscConfig+0x5a8>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d03c      	beq.n	800155c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0e6      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d01b      	beq.n	8001526 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80014ee:	4b50      	ldr	r3, [pc, #320]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f2:	4b4f      	ldr	r3, [pc, #316]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	0249      	lsls	r1, r1, #9
 80014f8:	430a      	orrs	r2, r1
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fa44 	bl	8000988 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001506:	f7ff fa3f 	bl	8000988 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e0cd      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001518:	4b45      	ldr	r3, [pc, #276]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800151a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	029b      	lsls	r3, r3, #10
 8001520:	4013      	ands	r3, r2
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x552>
 8001524:	e01b      	b.n	800155e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001526:	4b42      	ldr	r3, [pc, #264]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800152c:	4943      	ldr	r1, [pc, #268]	; (800163c <HAL_RCC_OscConfig+0x688>)
 800152e:	400a      	ands	r2, r1
 8001530:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fa29 	bl	8000988 <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800153c:	f7ff fa24 	bl	8000988 <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0b2      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	029b      	lsls	r3, r3, #10
 8001556:	4013      	ands	r3, r2
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x588>
 800155a:	e000      	b.n	800155e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800155c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	2b00      	cmp	r3, #0
 8001564:	d100      	bne.n	8001568 <HAL_RCC_OscConfig+0x5b4>
 8001566:	e0a4      	b.n	80016b2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001568:	4b31      	ldr	r3, [pc, #196]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	220c      	movs	r2, #12
 800156e:	4013      	ands	r3, r2
 8001570:	2b08      	cmp	r3, #8
 8001572:	d100      	bne.n	8001576 <HAL_RCC_OscConfig+0x5c2>
 8001574:	e078      	b.n	8001668 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	2b02      	cmp	r3, #2
 800157c:	d14c      	bne.n	8001618 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 8001584:	492e      	ldr	r1, [pc, #184]	; (8001640 <HAL_RCC_OscConfig+0x68c>)
 8001586:	400a      	ands	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff f9fd 	bl	8000988 <HAL_GetTick>
 800158e:	0003      	movs	r3, r0
 8001590:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff f9f8 	bl	8000988 <HAL_GetTick>
 8001598:	0002      	movs	r2, r0
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e086      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	049b      	lsls	r3, r3, #18
 80015ae:	4013      	ands	r3, r2
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	220f      	movs	r2, #15
 80015b8:	4393      	bics	r3, r2
 80015ba:	0019      	movs	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015c2:	430a      	orrs	r2, r1
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4a1e      	ldr	r2, [pc, #120]	; (8001644 <HAL_RCC_OscConfig+0x690>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	0019      	movs	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	431a      	orrs	r2, r3
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015dc:	430a      	orrs	r2, r1
 80015de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	0449      	lsls	r1, r1, #17
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff f9cb 	bl	8000988 <HAL_GetTick>
 80015f2:	0003      	movs	r3, r0
 80015f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff f9c6 	bl	8000988 <HAL_GetTick>
 80015fc:	0002      	movs	r2, r0
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e054      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	049b      	lsls	r3, r3, #18
 8001612:	4013      	ands	r3, r2
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x644>
 8001616:	e04c      	b.n	80016b2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <HAL_RCC_OscConfig+0x67c>)
 800161e:	4908      	ldr	r1, [pc, #32]	; (8001640 <HAL_RCC_OscConfig+0x68c>)
 8001620:	400a      	ands	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff f9b0 	bl	8000988 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162c:	e015      	b.n	800165a <HAL_RCC_OscConfig+0x6a6>
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	40021000 	.word	0x40021000
 8001634:	00001388 	.word	0x00001388
 8001638:	efffffff 	.word	0xefffffff
 800163c:	fffeffff 	.word	0xfffeffff
 8001640:	feffffff 	.word	0xfeffffff
 8001644:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff f99e 	bl	8000988 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e02c      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_RCC_OscConfig+0x708>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	049b      	lsls	r3, r3, #18
 8001662:	4013      	ands	r3, r2
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x694>
 8001666:	e024      	b.n	80016b2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e01f      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_RCC_OscConfig+0x708>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_RCC_OscConfig+0x708>)
 800167c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	23c0      	movs	r3, #192	; 0xc0
 8001684:	025b      	lsls	r3, r3, #9
 8001686:	401a      	ands	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	429a      	cmp	r2, r3
 800168e:	d10e      	bne.n	80016ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	220f      	movs	r2, #15
 8001694:	401a      	ands	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800169a:	429a      	cmp	r2, r3
 800169c:	d107      	bne.n	80016ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	23f0      	movs	r3, #240	; 0xf0
 80016a2:	039b      	lsls	r3, r3, #14
 80016a4:	401a      	ands	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b008      	add	sp, #32
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0bf      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b61      	ldr	r3, [pc, #388]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2201      	movs	r2, #1
 80016da:	4013      	ands	r3, r2
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d911      	bls.n	8001706 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b5e      	ldr	r3, [pc, #376]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2201      	movs	r2, #1
 80016e8:	4393      	bics	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	4b5b      	ldr	r3, [pc, #364]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f4:	4b59      	ldr	r3, [pc, #356]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2201      	movs	r2, #1
 80016fa:	4013      	ands	r3, r2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d001      	beq.n	8001706 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0a6      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2202      	movs	r2, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d015      	beq.n	800173c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2204      	movs	r2, #4
 8001716:	4013      	ands	r3, r2
 8001718:	d006      	beq.n	8001728 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800171a:	4b51      	ldr	r3, [pc, #324]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4b50      	ldr	r3, [pc, #320]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001720:	21e0      	movs	r1, #224	; 0xe0
 8001722:	00c9      	lsls	r1, r1, #3
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001728:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	22f0      	movs	r2, #240	; 0xf0
 800172e:	4393      	bics	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001738:	430a      	orrs	r2, r1
 800173a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	4013      	ands	r3, r2
 8001744:	d04c      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	4b44      	ldr	r3, [pc, #272]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	029b      	lsls	r3, r3, #10
 8001756:	4013      	ands	r3, r2
 8001758:	d120      	bne.n	800179c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e07a      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001766:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	049b      	lsls	r3, r3, #18
 800176e:	4013      	ands	r3, r2
 8001770:	d114      	bne.n	800179c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06e      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800177e:	4b38      	ldr	r3, [pc, #224]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	029b      	lsls	r3, r3, #10
 8001786:	4013      	ands	r3, r2
 8001788:	d108      	bne.n	800179c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e062      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4b34      	ldr	r3, [pc, #208]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2202      	movs	r2, #2
 8001794:	4013      	ands	r3, r2
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e05b      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179c:	4b30      	ldr	r3, [pc, #192]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2203      	movs	r2, #3
 80017a2:	4393      	bics	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 80017ac:	430a      	orrs	r2, r1
 80017ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b0:	f7ff f8ea 	bl	8000988 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b8:	e009      	b.n	80017ce <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ba:	f7ff f8e5 	bl	8000988 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	4a27      	ldr	r2, [pc, #156]	; (8001864 <HAL_RCC_ClockConfig+0x1a4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e042      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	220c      	movs	r2, #12
 80017d4:	401a      	ands	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1ec      	bne.n	80017ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4013      	ands	r3, r2
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d211      	bcs.n	8001812 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4393      	bics	r3, r2
 80017f6:	0019      	movs	r1, r3
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	4013      	ands	r3, r2
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d001      	beq.n	8001812 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e020      	b.n	8001854 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2204      	movs	r2, #4
 8001818:	4013      	ands	r3, r2
 800181a:	d009      	beq.n	8001830 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4a11      	ldr	r2, [pc, #68]	; (8001868 <HAL_RCC_ClockConfig+0x1a8>)
 8001822:	4013      	ands	r3, r2
 8001824:	0019      	movs	r1, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 800182c:	430a      	orrs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001830:	f000 f820 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8001834:	0001      	movs	r1, r0
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	220f      	movs	r2, #15
 800183e:	4013      	ands	r3, r2
 8001840:	4a0a      	ldr	r2, [pc, #40]	; (800186c <HAL_RCC_ClockConfig+0x1ac>)
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	000a      	movs	r2, r1
 8001846:	40da      	lsrs	r2, r3
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_ClockConfig+0x1b0>)
 800184a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800184c:	2003      	movs	r0, #3
 800184e:	f7ff f855 	bl	80008fc <HAL_InitTick>
  
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40022000 	.word	0x40022000
 8001860:	40021000 	.word	0x40021000
 8001864:	00001388 	.word	0x00001388
 8001868:	fffff8ff 	.word	0xfffff8ff
 800186c:	08004500 	.word	0x08004500
 8001870:	20000000 	.word	0x20000000

08001874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800188e:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	220c      	movs	r2, #12
 8001898:	4013      	ands	r3, r2
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d046      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0xb8>
 800189e:	d848      	bhi.n	8001932 <HAL_RCC_GetSysClockFreq+0xbe>
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d002      	beq.n	80018aa <HAL_RCC_GetSysClockFreq+0x36>
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d003      	beq.n	80018b0 <HAL_RCC_GetSysClockFreq+0x3c>
 80018a8:	e043      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018aa:	4b27      	ldr	r3, [pc, #156]	; (8001948 <HAL_RCC_GetSysClockFreq+0xd4>)
 80018ac:	613b      	str	r3, [r7, #16]
      break;
 80018ae:	e043      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	0c9b      	lsrs	r3, r3, #18
 80018b4:	220f      	movs	r2, #15
 80018b6:	4013      	ands	r3, r2
 80018b8:	4a24      	ldr	r2, [pc, #144]	; (800194c <HAL_RCC_GetSysClockFreq+0xd8>)
 80018ba:	5cd3      	ldrb	r3, [r2, r3]
 80018bc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018be:	4b21      	ldr	r3, [pc, #132]	; (8001944 <HAL_RCC_GetSysClockFreq+0xd0>)
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	220f      	movs	r2, #15
 80018c4:	4013      	ands	r3, r2
 80018c6:	4a22      	ldr	r2, [pc, #136]	; (8001950 <HAL_RCC_GetSysClockFreq+0xdc>)
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	23c0      	movs	r3, #192	; 0xc0
 80018d0:	025b      	lsls	r3, r3, #9
 80018d2:	401a      	ands	r2, r3
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	025b      	lsls	r3, r3, #9
 80018d8:	429a      	cmp	r2, r3
 80018da:	d109      	bne.n	80018f0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	481a      	ldr	r0, [pc, #104]	; (8001948 <HAL_RCC_GetSysClockFreq+0xd4>)
 80018e0:	f7fe fc10 	bl	8000104 <__udivsi3>
 80018e4:	0003      	movs	r3, r0
 80018e6:	001a      	movs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4353      	muls	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e01a      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	23c0      	movs	r3, #192	; 0xc0
 80018f4:	025b      	lsls	r3, r3, #9
 80018f6:	401a      	ands	r2, r3
 80018f8:	23c0      	movs	r3, #192	; 0xc0
 80018fa:	025b      	lsls	r3, r3, #9
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d109      	bne.n	8001914 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	4814      	ldr	r0, [pc, #80]	; (8001954 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001904:	f7fe fbfe 	bl	8000104 <__udivsi3>
 8001908:	0003      	movs	r3, r0
 800190a:	001a      	movs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4353      	muls	r3, r2
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e008      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	4810      	ldr	r0, [pc, #64]	; (8001958 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001918:	f7fe fbf4 	bl	8000104 <__udivsi3>
 800191c:	0003      	movs	r3, r0
 800191e:	001a      	movs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4353      	muls	r3, r2
 8001924:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	613b      	str	r3, [r7, #16]
      break;
 800192a:	e005      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_GetSysClockFreq+0xe0>)
 800192e:	613b      	str	r3, [r7, #16]
      break;
 8001930:	e002      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001934:	613b      	str	r3, [r7, #16]
      break;
 8001936:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001938:	693b      	ldr	r3, [r7, #16]
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b006      	add	sp, #24
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	40021000 	.word	0x40021000
 8001948:	016e3600 	.word	0x016e3600
 800194c:	08004518 	.word	0x08004518
 8001950:	08004528 	.word	0x08004528
 8001954:	02dc6c00 	.word	0x02dc6c00
 8001958:	007a1200 	.word	0x007a1200

0800195c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001960:	4b02      	ldr	r3, [pc, #8]	; (800196c <HAL_RCC_GetHCLKFreq+0x10>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	0018      	movs	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	20000000 	.word	0x20000000

08001970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001974:	f7ff fff2 	bl	800195c <HAL_RCC_GetHCLKFreq>
 8001978:	0001      	movs	r1, r0
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	2207      	movs	r2, #7
 8001982:	4013      	ands	r3, r2
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001986:	5cd3      	ldrb	r3, [r2, r3]
 8001988:	40d9      	lsrs	r1, r3
 800198a:	000b      	movs	r3, r1
}    
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	40021000 	.word	0x40021000
 8001998:	08004510 	.word	0x08004510

0800199c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	025b      	lsls	r3, r3, #9
 80019b4:	4013      	ands	r3, r2
 80019b6:	d100      	bne.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80019b8:	e08e      	b.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80019ba:	2017      	movs	r0, #23
 80019bc:	183b      	adds	r3, r7, r0
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c2:	4b6e      	ldr	r3, [pc, #440]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019c4:	69da      	ldr	r2, [r3, #28]
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	055b      	lsls	r3, r3, #21
 80019ca:	4013      	ands	r3, r2
 80019cc:	d110      	bne.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	4b6b      	ldr	r3, [pc, #428]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019d4:	2180      	movs	r1, #128	; 0x80
 80019d6:	0549      	lsls	r1, r1, #21
 80019d8:	430a      	orrs	r2, r1
 80019da:	61da      	str	r2, [r3, #28]
 80019dc:	4b67      	ldr	r3, [pc, #412]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019de:	69da      	ldr	r2, [r3, #28]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	055b      	lsls	r3, r3, #21
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ea:	183b      	adds	r3, r7, r0
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	4b63      	ldr	r3, [pc, #396]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4013      	ands	r3, r2
 80019fa:	d11a      	bne.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fc:	4b60      	ldr	r3, [pc, #384]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b5f      	ldr	r3, [pc, #380]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	0049      	lsls	r1, r1, #1
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0a:	f7fe ffbd 	bl	8000988 <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	e008      	b.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a14:	f7fe ffb8 	bl	8000988 <HAL_GetTick>
 8001a18:	0002      	movs	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e0a6      	b.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	4b56      	ldr	r3, [pc, #344]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a32:	4b52      	ldr	r3, [pc, #328]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a34:	6a1a      	ldr	r2, [r3, #32]
 8001a36:	23c0      	movs	r3, #192	; 0xc0
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d034      	beq.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	23c0      	movs	r3, #192	; 0xc0
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d02c      	beq.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a54:	4b49      	ldr	r3, [pc, #292]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4a4a      	ldr	r2, [pc, #296]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a5e:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a60:	6a1a      	ldr	r2, [r3, #32]
 8001a62:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a64:	2180      	movs	r1, #128	; 0x80
 8001a66:	0249      	lsls	r1, r1, #9
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a6c:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a6e:	6a1a      	ldr	r2, [r3, #32]
 8001a70:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a72:	4945      	ldr	r1, [pc, #276]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a78:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2201      	movs	r2, #1
 8001a82:	4013      	ands	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7fe ff7f 	bl	8000988 <HAL_GetTick>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8e:	e009      	b.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a90:	f7fe ff7a 	bl	8000988 <HAL_GetTick>
 8001a94:	0002      	movs	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	4a3c      	ldr	r2, [pc, #240]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e067      	b.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa4:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aae:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4a34      	ldr	r2, [pc, #208]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ac2:	2317      	movs	r3, #23
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001acc:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ace:	69da      	ldr	r2, [r3, #28]
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad2:	492f      	ldr	r1, [pc, #188]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2201      	movs	r2, #1
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d009      	beq.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	4393      	bics	r3, r2
 8001aea:	0019      	movs	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af2:	430a      	orrs	r2, r1
 8001af4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2202      	movs	r2, #2
 8001afc:	4013      	ands	r3, r2
 8001afe:	d009      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b00:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	4a23      	ldr	r2, [pc, #140]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	0019      	movs	r1, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b10:	430a      	orrs	r2, r1
 8001b12:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	02db      	lsls	r3, r3, #11
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d009      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b30:	430a      	orrs	r2, r1
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d009      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	2210      	movs	r2, #16
 8001b44:	4393      	bics	r3, r2
 8001b46:	0019      	movs	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695a      	ldr	r2, [r3, #20]
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d009      	beq.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	2240      	movs	r2, #64	; 0x40
 8001b64:	4393      	bics	r3, r2
 8001b66:	0019      	movs	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699a      	ldr	r2, [r3, #24]
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b006      	add	sp, #24
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40007000 	.word	0x40007000
 8001b84:	fffffcff 	.word	0xfffffcff
 8001b88:	fffeffff 	.word	0xfffeffff
 8001b8c:	00001388 	.word	0x00001388
 8001b90:	efffffff 	.word	0xefffffff
 8001b94:	fffcffff 	.word	0xfffcffff
 8001b98:	fff3ffff 	.word	0xfff3ffff

08001b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e042      	b.n	8001c34 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	223d      	movs	r2, #61	; 0x3d
 8001bb2:	5c9b      	ldrb	r3, [r3, r2]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d107      	bne.n	8001bca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	223c      	movs	r2, #60	; 0x3c
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7fe fd4b 	bl	8000660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	223d      	movs	r2, #61	; 0x3d
 8001bce:	2102      	movs	r1, #2
 8001bd0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	0019      	movs	r1, r3
 8001bdc:	0010      	movs	r0, r2
 8001bde:	f000 f9b5 	bl	8001f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2246      	movs	r2, #70	; 0x46
 8001be6:	2101      	movs	r1, #1
 8001be8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	223e      	movs	r2, #62	; 0x3e
 8001bee:	2101      	movs	r1, #1
 8001bf0:	5499      	strb	r1, [r3, r2]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	223f      	movs	r2, #63	; 0x3f
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	5499      	strb	r1, [r3, r2]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2240      	movs	r2, #64	; 0x40
 8001bfe:	2101      	movs	r1, #1
 8001c00:	5499      	strb	r1, [r3, r2]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2241      	movs	r2, #65	; 0x41
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2242      	movs	r2, #66	; 0x42
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2243      	movs	r2, #67	; 0x43
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2244      	movs	r2, #68	; 0x44
 8001c1e:	2101      	movs	r1, #1
 8001c20:	5499      	strb	r1, [r3, r2]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2245      	movs	r2, #69	; 0x45
 8001c26:	2101      	movs	r1, #1
 8001c28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	223d      	movs	r2, #61	; 0x3d
 8001c2e:	2101      	movs	r1, #1
 8001c30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	0018      	movs	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b002      	add	sp, #8
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	223d      	movs	r2, #61	; 0x3d
 8001c48:	5c9b      	ldrb	r3, [r3, r2]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d001      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e03b      	b.n	8001ccc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	223d      	movs	r2, #61	; 0x3d
 8001c58:	2102      	movs	r1, #2
 8001c5a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2101      	movs	r1, #1
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a18      	ldr	r2, [pc, #96]	; (8001cd4 <HAL_TIM_Base_Start_IT+0x98>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00f      	beq.n	8001c96 <HAL_TIM_Base_Start_IT+0x5a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	05db      	lsls	r3, r3, #23
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d009      	beq.n	8001c96 <HAL_TIM_Base_Start_IT+0x5a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d004      	beq.n	8001c96 <HAL_TIM_Base_Start_IT+0x5a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <HAL_TIM_Base_Start_IT+0xa0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d111      	bne.n	8001cba <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b06      	cmp	r3, #6
 8001ca6:	d010      	beq.n	8001cca <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb8:	e007      	b.n	8001cca <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b004      	add	sp, #16
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	40014000 	.word	0x40014000

08001ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d124      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d11d      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	4252      	negs	r2, r2
 8001d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d004      	beq.n	8001d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	0018      	movs	r0, r3
 8001d24:	f000 f8fa 	bl	8001f1c <HAL_TIM_IC_CaptureCallback>
 8001d28:	e007      	b.n	8001d3a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f000 f8ed 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	0018      	movs	r0, r3
 8001d36:	f000 f8f9 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	2204      	movs	r2, #4
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d125      	bne.n	8001d9a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2204      	movs	r2, #4
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d11e      	bne.n	8001d9a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2205      	movs	r2, #5
 8001d62:	4252      	negs	r2, r2
 8001d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	23c0      	movs	r3, #192	; 0xc0
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4013      	ands	r3, r2
 8001d78:	d004      	beq.n	8001d84 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f000 f8cd 	bl	8001f1c <HAL_TIM_IC_CaptureCallback>
 8001d82:	e007      	b.n	8001d94 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	0018      	movs	r0, r3
 8001d88:	f000 f8c0 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f000 f8cc 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2208      	movs	r2, #8
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d124      	bne.n	8001df2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2208      	movs	r2, #8
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d11d      	bne.n	8001df2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2209      	movs	r2, #9
 8001dbc:	4252      	negs	r2, r2
 8001dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2203      	movs	r2, #3
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d004      	beq.n	8001ddc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f000 f8a1 	bl	8001f1c <HAL_TIM_IC_CaptureCallback>
 8001dda:	e007      	b.n	8001dec <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	0018      	movs	r0, r3
 8001de0:	f000 f894 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	0018      	movs	r0, r3
 8001de8:	f000 f8a0 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	d125      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2210      	movs	r2, #16
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b10      	cmp	r3, #16
 8001e0c:	d11e      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2211      	movs	r2, #17
 8001e14:	4252      	negs	r2, r2
 8001e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	69da      	ldr	r2, [r3, #28]
 8001e24:	23c0      	movs	r3, #192	; 0xc0
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d004      	beq.n	8001e36 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f000 f874 	bl	8001f1c <HAL_TIM_IC_CaptureCallback>
 8001e34:	e007      	b.n	8001e46 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 f867 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	0018      	movs	r0, r3
 8001e42:	f000 f873 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2201      	movs	r2, #1
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d10f      	bne.n	8001e7a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2201      	movs	r2, #1
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d108      	bne.n	8001e7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	4252      	negs	r2, r2
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7fe fc19 	bl	80006ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	2280      	movs	r2, #128	; 0x80
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b80      	cmp	r3, #128	; 0x80
 8001e86:	d10f      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b80      	cmp	r3, #128	; 0x80
 8001e94:	d108      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2281      	movs	r2, #129	; 0x81
 8001e9c:	4252      	negs	r2, r2
 8001e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 f938 	bl	8002118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2240      	movs	r2, #64	; 0x40
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b40      	cmp	r3, #64	; 0x40
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2240      	movs	r2, #64	; 0x40
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b40      	cmp	r3, #64	; 0x40
 8001ec2:	d108      	bne.n	8001ed6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2241      	movs	r2, #65	; 0x41
 8001eca:	4252      	negs	r2, r2
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f000 f833 	bl	8001f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	2220      	movs	r2, #32
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b20      	cmp	r3, #32
 8001ee2:	d10f      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	d108      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2221      	movs	r2, #33	; 0x21
 8001ef8:	4252      	negs	r2, r2
 8001efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 f902 	bl	8002108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f04:	46c0      	nop			; (mov r8, r8)
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b002      	add	sp, #8
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b002      	add	sp, #8
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b002      	add	sp, #8
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a34      	ldr	r2, [pc, #208]	; (8002030 <TIM_Base_SetConfig+0xe4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d008      	beq.n	8001f76 <TIM_Base_SetConfig+0x2a>
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	05db      	lsls	r3, r3, #23
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d003      	beq.n	8001f76 <TIM_Base_SetConfig+0x2a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a30      	ldr	r2, [pc, #192]	; (8002034 <TIM_Base_SetConfig+0xe8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d108      	bne.n	8001f88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2270      	movs	r2, #112	; 0x70
 8001f7a:	4393      	bics	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a29      	ldr	r2, [pc, #164]	; (8002030 <TIM_Base_SetConfig+0xe4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d018      	beq.n	8001fc2 <TIM_Base_SetConfig+0x76>
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	05db      	lsls	r3, r3, #23
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d013      	beq.n	8001fc2 <TIM_Base_SetConfig+0x76>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a25      	ldr	r2, [pc, #148]	; (8002034 <TIM_Base_SetConfig+0xe8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00f      	beq.n	8001fc2 <TIM_Base_SetConfig+0x76>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a24      	ldr	r2, [pc, #144]	; (8002038 <TIM_Base_SetConfig+0xec>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00b      	beq.n	8001fc2 <TIM_Base_SetConfig+0x76>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a23      	ldr	r2, [pc, #140]	; (800203c <TIM_Base_SetConfig+0xf0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d007      	beq.n	8001fc2 <TIM_Base_SetConfig+0x76>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a22      	ldr	r2, [pc, #136]	; (8002040 <TIM_Base_SetConfig+0xf4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d003      	beq.n	8001fc2 <TIM_Base_SetConfig+0x76>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a21      	ldr	r2, [pc, #132]	; (8002044 <TIM_Base_SetConfig+0xf8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d108      	bne.n	8001fd4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4a20      	ldr	r2, [pc, #128]	; (8002048 <TIM_Base_SetConfig+0xfc>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2280      	movs	r2, #128	; 0x80
 8001fd8:	4393      	bics	r3, r2
 8001fda:	001a      	movs	r2, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a0c      	ldr	r2, [pc, #48]	; (8002030 <TIM_Base_SetConfig+0xe4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00b      	beq.n	800201a <TIM_Base_SetConfig+0xce>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <TIM_Base_SetConfig+0xf0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <TIM_Base_SetConfig+0xce>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <TIM_Base_SetConfig+0xf4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d003      	beq.n	800201a <TIM_Base_SetConfig+0xce>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <TIM_Base_SetConfig+0xf8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d103      	bne.n	8002022 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	615a      	str	r2, [r3, #20]
}
 8002028:	46c0      	nop			; (mov r8, r8)
 800202a:	46bd      	mov	sp, r7
 800202c:	b004      	add	sp, #16
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40012c00 	.word	0x40012c00
 8002034:	40000400 	.word	0x40000400
 8002038:	40002000 	.word	0x40002000
 800203c:	40014000 	.word	0x40014000
 8002040:	40014400 	.word	0x40014400
 8002044:	40014800 	.word	0x40014800
 8002048:	fffffcff 	.word	0xfffffcff

0800204c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	223c      	movs	r2, #60	; 0x3c
 800205a:	5c9b      	ldrb	r3, [r3, r2]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002060:	2302      	movs	r3, #2
 8002062:	e047      	b.n	80020f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	223c      	movs	r2, #60	; 0x3c
 8002068:	2101      	movs	r1, #1
 800206a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	223d      	movs	r2, #61	; 0x3d
 8002070:	2102      	movs	r1, #2
 8002072:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2270      	movs	r2, #112	; 0x70
 8002088:	4393      	bics	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a16      	ldr	r2, [pc, #88]	; (80020fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00f      	beq.n	80020c8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	05db      	lsls	r3, r3, #23
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d009      	beq.n	80020c8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a11      	ldr	r2, [pc, #68]	; (8002100 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d004      	beq.n	80020c8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a10      	ldr	r2, [pc, #64]	; (8002104 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d10c      	bne.n	80020e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2280      	movs	r2, #128	; 0x80
 80020cc:	4393      	bics	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	223d      	movs	r2, #61	; 0x3d
 80020e6:	2101      	movs	r1, #1
 80020e8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	223c      	movs	r2, #60	; 0x3c
 80020ee:	2100      	movs	r1, #0
 80020f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b004      	add	sp, #16
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40012c00 	.word	0x40012c00
 8002100:	40000400 	.word	0x40000400
 8002104:	40014000 	.word	0x40014000

08002108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b002      	add	sp, #8
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b002      	add	sp, #8
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e044      	b.n	80021c4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800213e:	2b00      	cmp	r3, #0
 8002140:	d107      	bne.n	8002152 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2278      	movs	r2, #120	; 0x78
 8002146:	2100      	movs	r1, #0
 8002148:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	0018      	movs	r0, r3
 800214e:	f7fe fb17 	bl	8000780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2224      	movs	r2, #36	; 0x24
 8002156:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2101      	movs	r1, #1
 8002164:	438a      	bics	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	0018      	movs	r0, r3
 800216c:	f000 fc94 	bl	8002a98 <UART_SetConfig>
 8002170:	0003      	movs	r3, r0
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e024      	b.n	80021c4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	0018      	movs	r0, r3
 8002186:	f000 fe6f 	bl	8002e68 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	490d      	ldr	r1, [pc, #52]	; (80021cc <HAL_UART_Init+0xa4>)
 8002196:	400a      	ands	r2, r1
 8002198:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	212a      	movs	r1, #42	; 0x2a
 80021a6:	438a      	bics	r2, r1
 80021a8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2101      	movs	r1, #1
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0018      	movs	r0, r3
 80021be:	f000 ff07 	bl	8002fd0 <UART_CheckIdleState>
 80021c2:	0003      	movs	r3, r0
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b002      	add	sp, #8
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	ffffb7ff 	.word	0xffffb7ff

080021d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	1dbb      	adds	r3, r7, #6
 80021de:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	d000      	beq.n	80021ea <HAL_UART_Transmit+0x1a>
 80021e8:	e08d      	b.n	8002306 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_UART_Transmit+0x28>
 80021f0:	1dbb      	adds	r3, r7, #6
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e085      	b.n	8002308 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	015b      	lsls	r3, r3, #5
 8002204:	429a      	cmp	r2, r3
 8002206:	d109      	bne.n	800221c <HAL_UART_Transmit+0x4c>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d105      	bne.n	800221c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2201      	movs	r2, #1
 8002214:	4013      	ands	r3, r2
 8002216:	d001      	beq.n	800221c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e075      	b.n	8002308 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2284      	movs	r2, #132	; 0x84
 8002220:	2100      	movs	r1, #0
 8002222:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2221      	movs	r2, #33	; 0x21
 8002228:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800222a:	f7fe fbad 	bl	8000988 <HAL_GetTick>
 800222e:	0003      	movs	r3, r0
 8002230:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1dba      	adds	r2, r7, #6
 8002236:	2150      	movs	r1, #80	; 0x50
 8002238:	8812      	ldrh	r2, [r2, #0]
 800223a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1dba      	adds	r2, r7, #6
 8002240:	2152      	movs	r1, #82	; 0x52
 8002242:	8812      	ldrh	r2, [r2, #0]
 8002244:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	015b      	lsls	r3, r3, #5
 800224e:	429a      	cmp	r2, r3
 8002250:	d108      	bne.n	8002264 <HAL_UART_Transmit+0x94>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d104      	bne.n	8002264 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	e003      	b.n	800226c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800226c:	e030      	b.n	80022d0 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	0013      	movs	r3, r2
 8002278:	2200      	movs	r2, #0
 800227a:	2180      	movs	r1, #128	; 0x80
 800227c:	f000 ff50 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 8002280:	1e03      	subs	r3, r0, #0
 8002282:	d004      	beq.n	800228e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e03c      	b.n	8002308 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	881a      	ldrh	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	05d2      	lsls	r2, r2, #23
 800229e:	0dd2      	lsrs	r2, r2, #23
 80022a0:	b292      	uxth	r2, r2
 80022a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	3302      	adds	r3, #2
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	e008      	b.n	80022be <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	781a      	ldrb	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b292      	uxth	r2, r2
 80022b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	3301      	adds	r3, #1
 80022bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2252      	movs	r2, #82	; 0x52
 80022c2:	5a9b      	ldrh	r3, [r3, r2]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b299      	uxth	r1, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2252      	movs	r2, #82	; 0x52
 80022ce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2252      	movs	r2, #82	; 0x52
 80022d4:	5a9b      	ldrh	r3, [r3, r2]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1c8      	bne.n	800226e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	0013      	movs	r3, r2
 80022e6:	2200      	movs	r2, #0
 80022e8:	2140      	movs	r1, #64	; 0x40
 80022ea:	f000 ff19 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 80022ee:	1e03      	subs	r3, r0, #0
 80022f0:	d004      	beq.n	80022fc <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e005      	b.n	8002308 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002306:	2302      	movs	r3, #2
  }
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b008      	add	sp, #32
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	1dbb      	adds	r3, r7, #6
 800231c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002322:	2b20      	cmp	r3, #32
 8002324:	d15b      	bne.n	80023de <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_UART_Transmit_IT+0x24>
 800232c:	1dbb      	adds	r3, r7, #6
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e053      	b.n	80023e0 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	015b      	lsls	r3, r3, #5
 8002340:	429a      	cmp	r2, r3
 8002342:	d109      	bne.n	8002358 <HAL_UART_Transmit_IT+0x48>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2201      	movs	r2, #1
 8002350:	4013      	ands	r3, r2
 8002352:	d001      	beq.n	8002358 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e043      	b.n	80023e0 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1dba      	adds	r2, r7, #6
 8002362:	2150      	movs	r1, #80	; 0x50
 8002364:	8812      	ldrh	r2, [r2, #0]
 8002366:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1dba      	adds	r2, r7, #6
 800236c:	2152      	movs	r1, #82	; 0x52
 800236e:	8812      	ldrh	r2, [r2, #0]
 8002370:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2284      	movs	r2, #132	; 0x84
 800237c:	2100      	movs	r1, #0
 800237e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2221      	movs	r2, #33	; 0x21
 8002384:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	015b      	lsls	r3, r3, #5
 800238e:	429a      	cmp	r2, r3
 8002390:	d107      	bne.n	80023a2 <HAL_UART_Transmit_IT+0x92>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d103      	bne.n	80023a2 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <HAL_UART_Transmit_IT+0xd8>)
 800239e:	66da      	str	r2, [r3, #108]	; 0x6c
 80023a0:	e002      	b.n	80023a8 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4a11      	ldr	r2, [pc, #68]	; (80023ec <HAL_UART_Transmit_IT+0xdc>)
 80023a6:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a8:	f3ef 8310 	mrs	r3, PRIMASK
 80023ac:	613b      	str	r3, [r7, #16]
  return(result);
 80023ae:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	2301      	movs	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f383 8810 	msr	PRIMASK, r3
}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2180      	movs	r1, #128	; 0x80
 80023ca:	430a      	orrs	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	f383 8810 	msr	PRIMASK, r3
}
 80023d8:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e000      	b.n	80023e0 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80023de:	2302      	movs	r3, #2
  }
}
 80023e0:	0018      	movs	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b008      	add	sp, #32
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	08003533 	.word	0x08003533
 80023ec:	0800347f 	.word	0x0800347f

080023f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	1dbb      	adds	r3, r7, #6
 80023fc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2280      	movs	r2, #128	; 0x80
 8002402:	589b      	ldr	r3, [r3, r2]
 8002404:	2b20      	cmp	r3, #32
 8002406:	d145      	bne.n	8002494 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_UART_Receive_IT+0x26>
 800240e:	1dbb      	adds	r3, r7, #6
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e03d      	b.n	8002496 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	015b      	lsls	r3, r3, #5
 8002422:	429a      	cmp	r2, r3
 8002424:	d109      	bne.n	800243a <HAL_UART_Receive_IT+0x4a>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2201      	movs	r2, #1
 8002432:	4013      	ands	r3, r2
 8002434:	d001      	beq.n	800243a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e02d      	b.n	8002496 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	041b      	lsls	r3, r3, #16
 800244a:	4013      	ands	r3, r2
 800244c:	d019      	beq.n	8002482 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800244e:	f3ef 8310 	mrs	r3, PRIMASK
 8002452:	613b      	str	r3, [r7, #16]
  return(result);
 8002454:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	2301      	movs	r3, #1
 800245a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f383 8810 	msr	PRIMASK, r3
}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2180      	movs	r1, #128	; 0x80
 8002470:	04c9      	lsls	r1, r1, #19
 8002472:	430a      	orrs	r2, r1
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f383 8810 	msr	PRIMASK, r3
}
 8002480:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002482:	1dbb      	adds	r3, r7, #6
 8002484:	881a      	ldrh	r2, [r3, #0]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	0018      	movs	r0, r3
 800248c:	f000 feb2 	bl	80031f4 <UART_Start_Receive_IT>
 8002490:	0003      	movs	r3, r0
 8002492:	e000      	b.n	8002496 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002494:	2302      	movs	r3, #2
  }
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	b008      	add	sp, #32
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b0ab      	sub	sp, #172	; 0xac
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	22a4      	movs	r2, #164	; 0xa4
 80024b0:	18b9      	adds	r1, r7, r2
 80024b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	20a0      	movs	r0, #160	; 0xa0
 80024bc:	1839      	adds	r1, r7, r0
 80024be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	219c      	movs	r1, #156	; 0x9c
 80024c8:	1879      	adds	r1, r7, r1
 80024ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024cc:	0011      	movs	r1, r2
 80024ce:	18bb      	adds	r3, r7, r2
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a99      	ldr	r2, [pc, #612]	; (8002738 <HAL_UART_IRQHandler+0x298>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	2298      	movs	r2, #152	; 0x98
 80024d8:	18bc      	adds	r4, r7, r2
 80024da:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80024dc:	18bb      	adds	r3, r7, r2
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d114      	bne.n	800250e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2220      	movs	r2, #32
 80024ea:	4013      	ands	r3, r2
 80024ec:	d00f      	beq.n	800250e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024ee:	183b      	adds	r3, r7, r0
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2220      	movs	r2, #32
 80024f4:	4013      	ands	r3, r2
 80024f6:	d00a      	beq.n	800250e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d100      	bne.n	8002502 <HAL_UART_IRQHandler+0x62>
 8002500:	e29e      	b.n	8002a40 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	0010      	movs	r0, r2
 800250a:	4798      	blx	r3
      }
      return;
 800250c:	e298      	b.n	8002a40 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800250e:	2398      	movs	r3, #152	; 0x98
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d100      	bne.n	800251a <HAL_UART_IRQHandler+0x7a>
 8002518:	e114      	b.n	8002744 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800251a:	239c      	movs	r3, #156	; 0x9c
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2201      	movs	r2, #1
 8002522:	4013      	ands	r3, r2
 8002524:	d106      	bne.n	8002534 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002526:	23a0      	movs	r3, #160	; 0xa0
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a83      	ldr	r2, [pc, #524]	; (800273c <HAL_UART_IRQHandler+0x29c>)
 800252e:	4013      	ands	r3, r2
 8002530:	d100      	bne.n	8002534 <HAL_UART_IRQHandler+0x94>
 8002532:	e107      	b.n	8002744 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002534:	23a4      	movs	r3, #164	; 0xa4
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2201      	movs	r2, #1
 800253c:	4013      	ands	r3, r2
 800253e:	d012      	beq.n	8002566 <HAL_UART_IRQHandler+0xc6>
 8002540:	23a0      	movs	r3, #160	; 0xa0
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4013      	ands	r3, r2
 800254c:	d00b      	beq.n	8002566 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2201      	movs	r2, #1
 8002554:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2284      	movs	r2, #132	; 0x84
 800255a:	589b      	ldr	r3, [r3, r2]
 800255c:	2201      	movs	r2, #1
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2184      	movs	r1, #132	; 0x84
 8002564:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002566:	23a4      	movs	r3, #164	; 0xa4
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2202      	movs	r2, #2
 800256e:	4013      	ands	r3, r2
 8002570:	d011      	beq.n	8002596 <HAL_UART_IRQHandler+0xf6>
 8002572:	239c      	movs	r3, #156	; 0x9c
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2201      	movs	r2, #1
 800257a:	4013      	ands	r3, r2
 800257c:	d00b      	beq.n	8002596 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2202      	movs	r2, #2
 8002584:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2284      	movs	r2, #132	; 0x84
 800258a:	589b      	ldr	r3, [r3, r2]
 800258c:	2204      	movs	r2, #4
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2184      	movs	r1, #132	; 0x84
 8002594:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002596:	23a4      	movs	r3, #164	; 0xa4
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2204      	movs	r2, #4
 800259e:	4013      	ands	r3, r2
 80025a0:	d011      	beq.n	80025c6 <HAL_UART_IRQHandler+0x126>
 80025a2:	239c      	movs	r3, #156	; 0x9c
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2201      	movs	r2, #1
 80025aa:	4013      	ands	r3, r2
 80025ac:	d00b      	beq.n	80025c6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2204      	movs	r2, #4
 80025b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2284      	movs	r2, #132	; 0x84
 80025ba:	589b      	ldr	r3, [r3, r2]
 80025bc:	2202      	movs	r2, #2
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2184      	movs	r1, #132	; 0x84
 80025c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80025c6:	23a4      	movs	r3, #164	; 0xa4
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2208      	movs	r2, #8
 80025ce:	4013      	ands	r3, r2
 80025d0:	d017      	beq.n	8002602 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025d2:	23a0      	movs	r3, #160	; 0xa0
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2220      	movs	r2, #32
 80025da:	4013      	ands	r3, r2
 80025dc:	d105      	bne.n	80025ea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80025de:	239c      	movs	r3, #156	; 0x9c
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2201      	movs	r2, #1
 80025e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025e8:	d00b      	beq.n	8002602 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2208      	movs	r2, #8
 80025f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2284      	movs	r2, #132	; 0x84
 80025f6:	589b      	ldr	r3, [r3, r2]
 80025f8:	2208      	movs	r2, #8
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2184      	movs	r1, #132	; 0x84
 8002600:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002602:	23a4      	movs	r3, #164	; 0xa4
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	4013      	ands	r3, r2
 800260e:	d013      	beq.n	8002638 <HAL_UART_IRQHandler+0x198>
 8002610:	23a0      	movs	r3, #160	; 0xa0
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	04db      	lsls	r3, r3, #19
 800261a:	4013      	ands	r3, r2
 800261c:	d00c      	beq.n	8002638 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2280      	movs	r2, #128	; 0x80
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2284      	movs	r2, #132	; 0x84
 800262c:	589b      	ldr	r3, [r3, r2]
 800262e:	2220      	movs	r2, #32
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2184      	movs	r1, #132	; 0x84
 8002636:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2284      	movs	r2, #132	; 0x84
 800263c:	589b      	ldr	r3, [r3, r2]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d100      	bne.n	8002644 <HAL_UART_IRQHandler+0x1a4>
 8002642:	e1ff      	b.n	8002a44 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002644:	23a4      	movs	r3, #164	; 0xa4
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2220      	movs	r2, #32
 800264c:	4013      	ands	r3, r2
 800264e:	d00e      	beq.n	800266e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002650:	23a0      	movs	r3, #160	; 0xa0
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2220      	movs	r2, #32
 8002658:	4013      	ands	r3, r2
 800265a:	d008      	beq.n	800266e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	0010      	movs	r0, r2
 800266c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2284      	movs	r2, #132	; 0x84
 8002672:	589b      	ldr	r3, [r3, r2]
 8002674:	2194      	movs	r1, #148	; 0x94
 8002676:	187a      	adds	r2, r7, r1
 8002678:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2240      	movs	r2, #64	; 0x40
 8002682:	4013      	ands	r3, r2
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d004      	beq.n	8002692 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002688:	187b      	adds	r3, r7, r1
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2228      	movs	r2, #40	; 0x28
 800268e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002690:	d047      	beq.n	8002722 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	0018      	movs	r0, r3
 8002696:	f000 fe77 	bl	8003388 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2240      	movs	r2, #64	; 0x40
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d137      	bne.n	8002718 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026a8:	f3ef 8310 	mrs	r3, PRIMASK
 80026ac:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80026ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026b0:	2090      	movs	r0, #144	; 0x90
 80026b2:	183a      	adds	r2, r7, r0
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	2301      	movs	r3, #1
 80026b8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026bc:	f383 8810 	msr	PRIMASK, r3
}
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2140      	movs	r1, #64	; 0x40
 80026ce:	438a      	bics	r2, r1
 80026d0:	609a      	str	r2, [r3, #8]
 80026d2:	183b      	adds	r3, r7, r0
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026da:	f383 8810 	msr	PRIMASK, r3
}
 80026de:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d012      	beq.n	800270e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <HAL_UART_IRQHandler+0x2a0>)
 80026ee:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7fe fa67 	bl	8000bc8 <HAL_DMA_Abort_IT>
 80026fa:	1e03      	subs	r3, r0, #0
 80026fc:	d01a      	beq.n	8002734 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002708:	0018      	movs	r0, r3
 800270a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800270c:	e012      	b.n	8002734 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0018      	movs	r0, r3
 8002712:	f000 f9ad 	bl	8002a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002716:	e00d      	b.n	8002734 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	0018      	movs	r0, r3
 800271c:	f000 f9a8 	bl	8002a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002720:	e008      	b.n	8002734 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	0018      	movs	r0, r3
 8002726:	f000 f9a3 	bl	8002a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2284      	movs	r2, #132	; 0x84
 800272e:	2100      	movs	r1, #0
 8002730:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002732:	e187      	b.n	8002a44 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002734:	46c0      	nop			; (mov r8, r8)
    return;
 8002736:	e185      	b.n	8002a44 <HAL_UART_IRQHandler+0x5a4>
 8002738:	0000080f 	.word	0x0000080f
 800273c:	04000120 	.word	0x04000120
 8002740:	08003451 	.word	0x08003451

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002748:	2b01      	cmp	r3, #1
 800274a:	d000      	beq.n	800274e <HAL_UART_IRQHandler+0x2ae>
 800274c:	e139      	b.n	80029c2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800274e:	23a4      	movs	r3, #164	; 0xa4
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2210      	movs	r2, #16
 8002756:	4013      	ands	r3, r2
 8002758:	d100      	bne.n	800275c <HAL_UART_IRQHandler+0x2bc>
 800275a:	e132      	b.n	80029c2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800275c:	23a0      	movs	r3, #160	; 0xa0
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2210      	movs	r2, #16
 8002764:	4013      	ands	r3, r2
 8002766:	d100      	bne.n	800276a <HAL_UART_IRQHandler+0x2ca>
 8002768:	e12b      	b.n	80029c2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2210      	movs	r2, #16
 8002770:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2240      	movs	r2, #64	; 0x40
 800277a:	4013      	ands	r3, r2
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d000      	beq.n	8002782 <HAL_UART_IRQHandler+0x2e2>
 8002780:	e09f      	b.n	80028c2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	217e      	movs	r1, #126	; 0x7e
 800278c:	187b      	adds	r3, r7, r1
 800278e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002790:	187b      	adds	r3, r7, r1
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d100      	bne.n	800279a <HAL_UART_IRQHandler+0x2fa>
 8002798:	e156      	b.n	8002a48 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2258      	movs	r2, #88	; 0x58
 800279e:	5a9b      	ldrh	r3, [r3, r2]
 80027a0:	187a      	adds	r2, r7, r1
 80027a2:	8812      	ldrh	r2, [r2, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d300      	bcc.n	80027aa <HAL_UART_IRQHandler+0x30a>
 80027a8:	e14e      	b.n	8002a48 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	187a      	adds	r2, r7, r1
 80027ae:	215a      	movs	r1, #90	; 0x5a
 80027b0:	8812      	ldrh	r2, [r2, #0]
 80027b2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d06f      	beq.n	800289e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027be:	f3ef 8310 	mrs	r3, PRIMASK
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80027c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80027c8:	2301      	movs	r3, #1
 80027ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ce:	f383 8810 	msr	PRIMASK, r3
}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	499e      	ldr	r1, [pc, #632]	; (8002a58 <HAL_UART_IRQHandler+0x5b8>)
 80027e0:	400a      	ands	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ea:	f383 8810 	msr	PRIMASK, r3
}
 80027ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027f0:	f3ef 8310 	mrs	r3, PRIMASK
 80027f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80027f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f8:	677b      	str	r3, [r7, #116]	; 0x74
 80027fa:	2301      	movs	r3, #1
 80027fc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002800:	f383 8810 	msr	PRIMASK, r3
}
 8002804:	46c0      	nop			; (mov r8, r8)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2101      	movs	r1, #1
 8002812:	438a      	bics	r2, r1
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002818:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800281c:	f383 8810 	msr	PRIMASK, r3
}
 8002820:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002822:	f3ef 8310 	mrs	r3, PRIMASK
 8002826:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002828:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800282a:	673b      	str	r3, [r7, #112]	; 0x70
 800282c:	2301      	movs	r3, #1
 800282e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002832:	f383 8810 	msr	PRIMASK, r3
}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2140      	movs	r1, #64	; 0x40
 8002844:	438a      	bics	r2, r1
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800284a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800284e:	f383 8810 	msr	PRIMASK, r3
}
 8002852:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2280      	movs	r2, #128	; 0x80
 8002858:	2120      	movs	r1, #32
 800285a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002862:	f3ef 8310 	mrs	r3, PRIMASK
 8002866:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002868:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800286a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800286c:	2301      	movs	r3, #1
 800286e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002872:	f383 8810 	msr	PRIMASK, r3
}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2110      	movs	r1, #16
 8002884:	438a      	bics	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800288a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288e:	f383 8810 	msr	PRIMASK, r3
}
 8002892:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002898:	0018      	movs	r0, r3
 800289a:	f7fe f95d 	bl	8000b58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2202      	movs	r2, #2
 80028a2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2258      	movs	r2, #88	; 0x58
 80028a8:	5a9a      	ldrh	r2, [r3, r2]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	215a      	movs	r1, #90	; 0x5a
 80028ae:	5a5b      	ldrh	r3, [r3, r1]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0011      	movs	r1, r2
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 f8e0 	bl	8002a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028c0:	e0c2      	b.n	8002a48 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2258      	movs	r2, #88	; 0x58
 80028c6:	5a99      	ldrh	r1, [r3, r2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	225a      	movs	r2, #90	; 0x5a
 80028cc:	5a9b      	ldrh	r3, [r3, r2]
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	208e      	movs	r0, #142	; 0x8e
 80028d2:	183b      	adds	r3, r7, r0
 80028d4:	1a8a      	subs	r2, r1, r2
 80028d6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	225a      	movs	r2, #90	; 0x5a
 80028dc:	5a9b      	ldrh	r3, [r3, r2]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d100      	bne.n	80028e6 <HAL_UART_IRQHandler+0x446>
 80028e4:	e0b2      	b.n	8002a4c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80028e6:	183b      	adds	r3, r7, r0
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d100      	bne.n	80028f0 <HAL_UART_IRQHandler+0x450>
 80028ee:	e0ad      	b.n	8002a4c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f0:	f3ef 8310 	mrs	r3, PRIMASK
 80028f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80028f6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028f8:	2488      	movs	r4, #136	; 0x88
 80028fa:	193a      	adds	r2, r7, r4
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	2301      	movs	r3, #1
 8002900:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f383 8810 	msr	PRIMASK, r3
}
 8002908:	46c0      	nop			; (mov r8, r8)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4951      	ldr	r1, [pc, #324]	; (8002a5c <HAL_UART_IRQHandler+0x5bc>)
 8002916:	400a      	ands	r2, r1
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	193b      	adds	r3, r7, r4
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f383 8810 	msr	PRIMASK, r3
}
 8002926:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002928:	f3ef 8310 	mrs	r3, PRIMASK
 800292c:	61bb      	str	r3, [r7, #24]
  return(result);
 800292e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002930:	2484      	movs	r4, #132	; 0x84
 8002932:	193a      	adds	r2, r7, r4
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	2301      	movs	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f383 8810 	msr	PRIMASK, r3
}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2101      	movs	r1, #1
 800294e:	438a      	bics	r2, r1
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	193b      	adds	r3, r7, r4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	f383 8810 	msr	PRIMASK, r3
}
 800295e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2280      	movs	r2, #128	; 0x80
 8002964:	2120      	movs	r1, #32
 8002966:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002974:	f3ef 8310 	mrs	r3, PRIMASK
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800297c:	2480      	movs	r4, #128	; 0x80
 800297e:	193a      	adds	r2, r7, r4
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	2301      	movs	r3, #1
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	f383 8810 	msr	PRIMASK, r3
}
 800298c:	46c0      	nop			; (mov r8, r8)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2110      	movs	r1, #16
 800299a:	438a      	bics	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	193b      	adds	r3, r7, r4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a6:	f383 8810 	msr	PRIMASK, r3
}
 80029aa:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029b2:	183b      	adds	r3, r7, r0
 80029b4:	881a      	ldrh	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0011      	movs	r1, r2
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 f860 	bl	8002a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029c0:	e044      	b.n	8002a4c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80029c2:	23a4      	movs	r3, #164	; 0xa4
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	035b      	lsls	r3, r3, #13
 80029cc:	4013      	ands	r3, r2
 80029ce:	d010      	beq.n	80029f2 <HAL_UART_IRQHandler+0x552>
 80029d0:	239c      	movs	r3, #156	; 0x9c
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	03db      	lsls	r3, r3, #15
 80029da:	4013      	ands	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	0352      	lsls	r2, r2, #13
 80029e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 ffe2 	bl	80039b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029f0:	e02f      	b.n	8002a52 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80029f2:	23a4      	movs	r3, #164	; 0xa4
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2280      	movs	r2, #128	; 0x80
 80029fa:	4013      	ands	r3, r2
 80029fc:	d00f      	beq.n	8002a1e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80029fe:	23a0      	movs	r3, #160	; 0xa0
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2280      	movs	r2, #128	; 0x80
 8002a06:	4013      	ands	r3, r2
 8002a08:	d009      	beq.n	8002a1e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01e      	beq.n	8002a50 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	0010      	movs	r0, r2
 8002a1a:	4798      	blx	r3
    }
    return;
 8002a1c:	e018      	b.n	8002a50 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a1e:	23a4      	movs	r3, #164	; 0xa4
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2240      	movs	r2, #64	; 0x40
 8002a26:	4013      	ands	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_UART_IRQHandler+0x5b2>
 8002a2a:	23a0      	movs	r3, #160	; 0xa0
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2240      	movs	r2, #64	; 0x40
 8002a32:	4013      	ands	r3, r2
 8002a34:	d00d      	beq.n	8002a52 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f000 fdd8 	bl	80035ee <UART_EndTransmit_IT>
    return;
 8002a3e:	e008      	b.n	8002a52 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	e006      	b.n	8002a52 <HAL_UART_IRQHandler+0x5b2>
    return;
 8002a44:	46c0      	nop			; (mov r8, r8)
 8002a46:	e004      	b.n	8002a52 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	e002      	b.n	8002a52 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	e000      	b.n	8002a52 <HAL_UART_IRQHandler+0x5b2>
    return;
 8002a50:	46c0      	nop			; (mov r8, r8)
  }

}
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b02b      	add	sp, #172	; 0xac
 8002a56:	bd90      	pop	{r4, r7, pc}
 8002a58:	fffffeff 	.word	0xfffffeff
 8002a5c:	fffffedf 	.word	0xfffffedf

08002a60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a68:	46c0      	nop			; (mov r8, r8)
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b002      	add	sp, #8
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	000a      	movs	r2, r1
 8002a8a:	1cbb      	adds	r3, r7, #2
 8002a8c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b002      	add	sp, #8
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002aa0:	231e      	movs	r3, #30
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4abe      	ldr	r2, [pc, #760]	; (8002dc0 <UART_SetConfig+0x328>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4ab9      	ldr	r2, [pc, #740]	; (8002dc4 <UART_SetConfig+0x32c>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4ab0      	ldr	r2, [pc, #704]	; (8002dc8 <UART_SetConfig+0x330>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	0019      	movs	r1, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4aac      	ldr	r2, [pc, #688]	; (8002dcc <UART_SetConfig+0x334>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d127      	bne.n	8002b6e <UART_SetConfig+0xd6>
 8002b1e:	4bac      	ldr	r3, [pc, #688]	; (8002dd0 <UART_SetConfig+0x338>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	2203      	movs	r2, #3
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d00d      	beq.n	8002b46 <UART_SetConfig+0xae>
 8002b2a:	d81b      	bhi.n	8002b64 <UART_SetConfig+0xcc>
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d014      	beq.n	8002b5a <UART_SetConfig+0xc2>
 8002b30:	d818      	bhi.n	8002b64 <UART_SetConfig+0xcc>
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <UART_SetConfig+0xa4>
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d00a      	beq.n	8002b50 <UART_SetConfig+0xb8>
 8002b3a:	e013      	b.n	8002b64 <UART_SetConfig+0xcc>
 8002b3c:	231f      	movs	r3, #31
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e0bd      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002b46:	231f      	movs	r3, #31
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e0b8      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002b50:	231f      	movs	r3, #31
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	2204      	movs	r2, #4
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	e0b3      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002b5a:	231f      	movs	r3, #31
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	2208      	movs	r2, #8
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e0ae      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002b64:	231f      	movs	r3, #31
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	2210      	movs	r2, #16
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	e0a9      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a98      	ldr	r2, [pc, #608]	; (8002dd4 <UART_SetConfig+0x33c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d134      	bne.n	8002be2 <UART_SetConfig+0x14a>
 8002b78:	4b95      	ldr	r3, [pc, #596]	; (8002dd0 <UART_SetConfig+0x338>)
 8002b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b7c:	23c0      	movs	r3, #192	; 0xc0
 8002b7e:	029b      	lsls	r3, r3, #10
 8002b80:	4013      	ands	r3, r2
 8002b82:	22c0      	movs	r2, #192	; 0xc0
 8002b84:	0292      	lsls	r2, r2, #10
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d017      	beq.n	8002bba <UART_SetConfig+0x122>
 8002b8a:	22c0      	movs	r2, #192	; 0xc0
 8002b8c:	0292      	lsls	r2, r2, #10
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d822      	bhi.n	8002bd8 <UART_SetConfig+0x140>
 8002b92:	2280      	movs	r2, #128	; 0x80
 8002b94:	0292      	lsls	r2, r2, #10
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d019      	beq.n	8002bce <UART_SetConfig+0x136>
 8002b9a:	2280      	movs	r2, #128	; 0x80
 8002b9c:	0292      	lsls	r2, r2, #10
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d81a      	bhi.n	8002bd8 <UART_SetConfig+0x140>
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d004      	beq.n	8002bb0 <UART_SetConfig+0x118>
 8002ba6:	2280      	movs	r2, #128	; 0x80
 8002ba8:	0252      	lsls	r2, r2, #9
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00a      	beq.n	8002bc4 <UART_SetConfig+0x12c>
 8002bae:	e013      	b.n	8002bd8 <UART_SetConfig+0x140>
 8002bb0:	231f      	movs	r3, #31
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e083      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002bba:	231f      	movs	r3, #31
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	e07e      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002bc4:	231f      	movs	r3, #31
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	2204      	movs	r2, #4
 8002bca:	701a      	strb	r2, [r3, #0]
 8002bcc:	e079      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002bce:	231f      	movs	r3, #31
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e074      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002bd8:	231f      	movs	r3, #31
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	2210      	movs	r2, #16
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	e06f      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a7c      	ldr	r2, [pc, #496]	; (8002dd8 <UART_SetConfig+0x340>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d134      	bne.n	8002c56 <UART_SetConfig+0x1be>
 8002bec:	4b78      	ldr	r3, [pc, #480]	; (8002dd0 <UART_SetConfig+0x338>)
 8002bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf0:	23c0      	movs	r3, #192	; 0xc0
 8002bf2:	031b      	lsls	r3, r3, #12
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	22c0      	movs	r2, #192	; 0xc0
 8002bf8:	0312      	lsls	r2, r2, #12
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d017      	beq.n	8002c2e <UART_SetConfig+0x196>
 8002bfe:	22c0      	movs	r2, #192	; 0xc0
 8002c00:	0312      	lsls	r2, r2, #12
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d822      	bhi.n	8002c4c <UART_SetConfig+0x1b4>
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	0312      	lsls	r2, r2, #12
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d019      	beq.n	8002c42 <UART_SetConfig+0x1aa>
 8002c0e:	2280      	movs	r2, #128	; 0x80
 8002c10:	0312      	lsls	r2, r2, #12
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d81a      	bhi.n	8002c4c <UART_SetConfig+0x1b4>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d004      	beq.n	8002c24 <UART_SetConfig+0x18c>
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	02d2      	lsls	r2, r2, #11
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00a      	beq.n	8002c38 <UART_SetConfig+0x1a0>
 8002c22:	e013      	b.n	8002c4c <UART_SetConfig+0x1b4>
 8002c24:	231f      	movs	r3, #31
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
 8002c2c:	e049      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002c2e:	231f      	movs	r3, #31
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	2202      	movs	r2, #2
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e044      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002c38:	231f      	movs	r3, #31
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	e03f      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002c42:	231f      	movs	r3, #31
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	2208      	movs	r2, #8
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e03a      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002c4c:	231f      	movs	r3, #31
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	2210      	movs	r2, #16
 8002c52:	701a      	strb	r2, [r3, #0]
 8002c54:	e035      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a60      	ldr	r2, [pc, #384]	; (8002ddc <UART_SetConfig+0x344>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d104      	bne.n	8002c6a <UART_SetConfig+0x1d2>
 8002c60:	231f      	movs	r3, #31
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e02b      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a5c      	ldr	r2, [pc, #368]	; (8002de0 <UART_SetConfig+0x348>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d104      	bne.n	8002c7e <UART_SetConfig+0x1e6>
 8002c74:	231f      	movs	r3, #31
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	e021      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a58      	ldr	r2, [pc, #352]	; (8002de4 <UART_SetConfig+0x34c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d104      	bne.n	8002c92 <UART_SetConfig+0x1fa>
 8002c88:	231f      	movs	r3, #31
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e017      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a54      	ldr	r2, [pc, #336]	; (8002de8 <UART_SetConfig+0x350>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d104      	bne.n	8002ca6 <UART_SetConfig+0x20e>
 8002c9c:	231f      	movs	r3, #31
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e00d      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a50      	ldr	r2, [pc, #320]	; (8002dec <UART_SetConfig+0x354>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d104      	bne.n	8002cba <UART_SetConfig+0x222>
 8002cb0:	231f      	movs	r3, #31
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	e003      	b.n	8002cc2 <UART_SetConfig+0x22a>
 8002cba:	231f      	movs	r3, #31
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	2210      	movs	r2, #16
 8002cc0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69da      	ldr	r2, [r3, #28]
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d15c      	bne.n	8002d88 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8002cce:	231f      	movs	r3, #31
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d015      	beq.n	8002d04 <UART_SetConfig+0x26c>
 8002cd8:	dc18      	bgt.n	8002d0c <UART_SetConfig+0x274>
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d00d      	beq.n	8002cfa <UART_SetConfig+0x262>
 8002cde:	dc15      	bgt.n	8002d0c <UART_SetConfig+0x274>
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <UART_SetConfig+0x252>
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d005      	beq.n	8002cf4 <UART_SetConfig+0x25c>
 8002ce8:	e010      	b.n	8002d0c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cea:	f7fe fe41 	bl	8001970 <HAL_RCC_GetPCLK1Freq>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	61bb      	str	r3, [r7, #24]
        break;
 8002cf2:	e012      	b.n	8002d1a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cf4:	4b3e      	ldr	r3, [pc, #248]	; (8002df0 <UART_SetConfig+0x358>)
 8002cf6:	61bb      	str	r3, [r7, #24]
        break;
 8002cf8:	e00f      	b.n	8002d1a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cfa:	f7fe fdbb 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	61bb      	str	r3, [r7, #24]
        break;
 8002d02:	e00a      	b.n	8002d1a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	61bb      	str	r3, [r7, #24]
        break;
 8002d0a:	e006      	b.n	8002d1a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d10:	231e      	movs	r3, #30
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
        break;
 8002d18:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d100      	bne.n	8002d22 <UART_SetConfig+0x28a>
 8002d20:	e095      	b.n	8002e4e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	005a      	lsls	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	18d2      	adds	r2, r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	0019      	movs	r1, r3
 8002d34:	0010      	movs	r0, r2
 8002d36:	f7fd f9e5 	bl	8000104 <__udivsi3>
 8002d3a:	0003      	movs	r3, r0
 8002d3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b0f      	cmp	r3, #15
 8002d42:	d91c      	bls.n	8002d7e <UART_SetConfig+0x2e6>
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	025b      	lsls	r3, r3, #9
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d217      	bcs.n	8002d7e <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	200e      	movs	r0, #14
 8002d54:	183b      	adds	r3, r7, r0
 8002d56:	210f      	movs	r1, #15
 8002d58:	438a      	bics	r2, r1
 8002d5a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	085b      	lsrs	r3, r3, #1
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2207      	movs	r2, #7
 8002d64:	4013      	ands	r3, r2
 8002d66:	b299      	uxth	r1, r3
 8002d68:	183b      	adds	r3, r7, r0
 8002d6a:	183a      	adds	r2, r7, r0
 8002d6c:	8812      	ldrh	r2, [r2, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	183a      	adds	r2, r7, r0
 8002d78:	8812      	ldrh	r2, [r2, #0]
 8002d7a:	60da      	str	r2, [r3, #12]
 8002d7c:	e067      	b.n	8002e4e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002d7e:	231e      	movs	r3, #30
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e062      	b.n	8002e4e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d88:	231f      	movs	r3, #31
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d030      	beq.n	8002df4 <UART_SetConfig+0x35c>
 8002d92:	dc33      	bgt.n	8002dfc <UART_SetConfig+0x364>
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d00d      	beq.n	8002db4 <UART_SetConfig+0x31c>
 8002d98:	dc30      	bgt.n	8002dfc <UART_SetConfig+0x364>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <UART_SetConfig+0x30c>
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d005      	beq.n	8002dae <UART_SetConfig+0x316>
 8002da2:	e02b      	b.n	8002dfc <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002da4:	f7fe fde4 	bl	8001970 <HAL_RCC_GetPCLK1Freq>
 8002da8:	0003      	movs	r3, r0
 8002daa:	61bb      	str	r3, [r7, #24]
        break;
 8002dac:	e02d      	b.n	8002e0a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <UART_SetConfig+0x358>)
 8002db0:	61bb      	str	r3, [r7, #24]
        break;
 8002db2:	e02a      	b.n	8002e0a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002db4:	f7fe fd5e 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8002db8:	0003      	movs	r3, r0
 8002dba:	61bb      	str	r3, [r7, #24]
        break;
 8002dbc:	e025      	b.n	8002e0a <UART_SetConfig+0x372>
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	efff69f3 	.word	0xefff69f3
 8002dc4:	ffffcfff 	.word	0xffffcfff
 8002dc8:	fffff4ff 	.word	0xfffff4ff
 8002dcc:	40013800 	.word	0x40013800
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40004400 	.word	0x40004400
 8002dd8:	40004800 	.word	0x40004800
 8002ddc:	40004c00 	.word	0x40004c00
 8002de0:	40005000 	.word	0x40005000
 8002de4:	40011400 	.word	0x40011400
 8002de8:	40011800 	.word	0x40011800
 8002dec:	40011c00 	.word	0x40011c00
 8002df0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	61bb      	str	r3, [r7, #24]
        break;
 8002dfa:	e006      	b.n	8002e0a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e00:	231e      	movs	r3, #30
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
        break;
 8002e08:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01e      	beq.n	8002e4e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	085a      	lsrs	r2, r3, #1
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	18d2      	adds	r2, r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	0019      	movs	r1, r3
 8002e20:	0010      	movs	r0, r2
 8002e22:	f7fd f96f 	bl	8000104 <__udivsi3>
 8002e26:	0003      	movs	r3, r0
 8002e28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b0f      	cmp	r3, #15
 8002e2e:	d90a      	bls.n	8002e46 <UART_SetConfig+0x3ae>
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	025b      	lsls	r3, r3, #9
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d205      	bcs.n	8002e46 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60da      	str	r2, [r3, #12]
 8002e44:	e003      	b.n	8002e4e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002e46:	231e      	movs	r3, #30
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e5a:	231e      	movs	r3, #30
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	781b      	ldrb	r3, [r3, #0]
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b008      	add	sp, #32
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2201      	movs	r2, #1
 8002e76:	4013      	ands	r3, r2
 8002e78:	d00b      	beq.n	8002e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4a4a      	ldr	r2, [pc, #296]	; (8002fac <UART_AdvFeatureConfig+0x144>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	0019      	movs	r1, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	2202      	movs	r2, #2
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d00b      	beq.n	8002eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4a43      	ldr	r2, [pc, #268]	; (8002fb0 <UART_AdvFeatureConfig+0x148>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	2204      	movs	r2, #4
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d00b      	beq.n	8002ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a3b      	ldr	r2, [pc, #236]	; (8002fb4 <UART_AdvFeatureConfig+0x14c>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	2208      	movs	r2, #8
 8002edc:	4013      	ands	r3, r2
 8002ede:	d00b      	beq.n	8002ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4a34      	ldr	r2, [pc, #208]	; (8002fb8 <UART_AdvFeatureConfig+0x150>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	0019      	movs	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	2210      	movs	r2, #16
 8002efe:	4013      	ands	r3, r2
 8002f00:	d00b      	beq.n	8002f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a2c      	ldr	r2, [pc, #176]	; (8002fbc <UART_AdvFeatureConfig+0x154>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2220      	movs	r2, #32
 8002f20:	4013      	ands	r3, r2
 8002f22:	d00b      	beq.n	8002f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	4a25      	ldr	r2, [pc, #148]	; (8002fc0 <UART_AdvFeatureConfig+0x158>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	0019      	movs	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	2240      	movs	r2, #64	; 0x40
 8002f42:	4013      	ands	r3, r2
 8002f44:	d01d      	beq.n	8002f82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <UART_AdvFeatureConfig+0x15c>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	0019      	movs	r1, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	035b      	lsls	r3, r3, #13
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d10b      	bne.n	8002f82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a15      	ldr	r2, [pc, #84]	; (8002fc8 <UART_AdvFeatureConfig+0x160>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	2280      	movs	r2, #128	; 0x80
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d00b      	beq.n	8002fa4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <UART_AdvFeatureConfig+0x164>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	0019      	movs	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
  }
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b002      	add	sp, #8
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	fffdffff 	.word	0xfffdffff
 8002fb0:	fffeffff 	.word	0xfffeffff
 8002fb4:	fffbffff 	.word	0xfffbffff
 8002fb8:	ffff7fff 	.word	0xffff7fff
 8002fbc:	ffffefff 	.word	0xffffefff
 8002fc0:	ffffdfff 	.word	0xffffdfff
 8002fc4:	ffefffff 	.word	0xffefffff
 8002fc8:	ff9fffff 	.word	0xff9fffff
 8002fcc:	fff7ffff 	.word	0xfff7ffff

08002fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b092      	sub	sp, #72	; 0x48
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2284      	movs	r2, #132	; 0x84
 8002fdc:	2100      	movs	r1, #0
 8002fde:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fe0:	f7fd fcd2 	bl	8000988 <HAL_GetTick>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2208      	movs	r2, #8
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d12c      	bne.n	8003050 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	0391      	lsls	r1, r2, #14
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4a46      	ldr	r2, [pc, #280]	; (8003118 <UART_CheckIdleState+0x148>)
 8003000:	9200      	str	r2, [sp, #0]
 8003002:	2200      	movs	r2, #0
 8003004:	f000 f88c 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 8003008:	1e03      	subs	r3, r0, #0
 800300a:	d021      	beq.n	8003050 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800300c:	f3ef 8310 	mrs	r3, PRIMASK
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003014:	63bb      	str	r3, [r7, #56]	; 0x38
 8003016:	2301      	movs	r3, #1
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	f383 8810 	msr	PRIMASK, r3
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	438a      	bics	r2, r1
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	f383 8810 	msr	PRIMASK, r3
}
 800303c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2278      	movs	r2, #120	; 0x78
 8003048:	2100      	movs	r1, #0
 800304a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e05f      	b.n	8003110 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2204      	movs	r2, #4
 8003058:	4013      	ands	r3, r2
 800305a:	2b04      	cmp	r3, #4
 800305c:	d146      	bne.n	80030ec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800305e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	03d1      	lsls	r1, r2, #15
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4a2c      	ldr	r2, [pc, #176]	; (8003118 <UART_CheckIdleState+0x148>)
 8003068:	9200      	str	r2, [sp, #0]
 800306a:	2200      	movs	r2, #0
 800306c:	f000 f858 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 8003070:	1e03      	subs	r3, r0, #0
 8003072:	d03b      	beq.n	80030ec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003074:	f3ef 8310 	mrs	r3, PRIMASK
 8003078:	60fb      	str	r3, [r7, #12]
  return(result);
 800307a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800307c:	637b      	str	r3, [r7, #52]	; 0x34
 800307e:	2301      	movs	r3, #1
 8003080:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f383 8810 	msr	PRIMASK, r3
}
 8003088:	46c0      	nop			; (mov r8, r8)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4921      	ldr	r1, [pc, #132]	; (800311c <UART_CheckIdleState+0x14c>)
 8003096:	400a      	ands	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f383 8810 	msr	PRIMASK, r3
}
 80030a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a6:	f3ef 8310 	mrs	r3, PRIMASK
 80030aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80030ac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ae:	633b      	str	r3, [r7, #48]	; 0x30
 80030b0:	2301      	movs	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f383 8810 	msr	PRIMASK, r3
}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2101      	movs	r1, #1
 80030c8:	438a      	bics	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	f383 8810 	msr	PRIMASK, r3
}
 80030d6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2280      	movs	r2, #128	; 0x80
 80030dc:	2120      	movs	r1, #32
 80030de:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2278      	movs	r2, #120	; 0x78
 80030e4:	2100      	movs	r1, #0
 80030e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e011      	b.n	8003110 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	2120      	movs	r1, #32
 80030f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2278      	movs	r2, #120	; 0x78
 800310a:	2100      	movs	r1, #0
 800310c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	b010      	add	sp, #64	; 0x40
 8003116:	bd80      	pop	{r7, pc}
 8003118:	01ffffff 	.word	0x01ffffff
 800311c:	fffffedf 	.word	0xfffffedf

08003120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	1dfb      	adds	r3, r7, #7
 800312e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003130:	e04b      	b.n	80031ca <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	3301      	adds	r3, #1
 8003136:	d048      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003138:	f7fd fc26 	bl	8000988 <HAL_GetTick>
 800313c:	0002      	movs	r2, r0
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	429a      	cmp	r2, r3
 8003146:	d302      	bcc.n	800314e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e04b      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2204      	movs	r2, #4
 800315a:	4013      	ands	r3, r2
 800315c:	d035      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	2208      	movs	r2, #8
 8003166:	4013      	ands	r3, r2
 8003168:	2b08      	cmp	r3, #8
 800316a:	d111      	bne.n	8003190 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2208      	movs	r2, #8
 8003172:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	0018      	movs	r0, r3
 8003178:	f000 f906 	bl	8003388 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2284      	movs	r2, #132	; 0x84
 8003180:	2108      	movs	r1, #8
 8003182:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2278      	movs	r2, #120	; 0x78
 8003188:	2100      	movs	r1, #0
 800318a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e02c      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	401a      	ands	r2, r3
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d112      	bne.n	80031ca <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2280      	movs	r2, #128	; 0x80
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f000 f8e9 	bl	8003388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2284      	movs	r2, #132	; 0x84
 80031ba:	2120      	movs	r1, #32
 80031bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2278      	movs	r2, #120	; 0x78
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e00f      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	425a      	negs	r2, r3
 80031da:	4153      	adcs	r3, r2
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	001a      	movs	r2, r3
 80031e0:	1dfb      	adds	r3, r7, #7
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d0a4      	beq.n	8003132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b004      	add	sp, #16
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b090      	sub	sp, #64	; 0x40
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	1dbb      	adds	r3, r7, #6
 8003200:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1dba      	adds	r2, r7, #6
 800320c:	2158      	movs	r1, #88	; 0x58
 800320e:	8812      	ldrh	r2, [r2, #0]
 8003210:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1dba      	adds	r2, r7, #6
 8003216:	215a      	movs	r1, #90	; 0x5a
 8003218:	8812      	ldrh	r2, [r2, #0]
 800321a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	015b      	lsls	r3, r3, #5
 800322a:	429a      	cmp	r2, r3
 800322c:	d10d      	bne.n	800324a <UART_Start_Receive_IT+0x56>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d104      	bne.n	8003240 <UART_Start_Receive_IT+0x4c>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	225c      	movs	r2, #92	; 0x5c
 800323a:	4950      	ldr	r1, [pc, #320]	; (800337c <UART_Start_Receive_IT+0x188>)
 800323c:	5299      	strh	r1, [r3, r2]
 800323e:	e02e      	b.n	800329e <UART_Start_Receive_IT+0xaa>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	225c      	movs	r2, #92	; 0x5c
 8003244:	21ff      	movs	r1, #255	; 0xff
 8003246:	5299      	strh	r1, [r3, r2]
 8003248:	e029      	b.n	800329e <UART_Start_Receive_IT+0xaa>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10d      	bne.n	800326e <UART_Start_Receive_IT+0x7a>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d104      	bne.n	8003264 <UART_Start_Receive_IT+0x70>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	225c      	movs	r2, #92	; 0x5c
 800325e:	21ff      	movs	r1, #255	; 0xff
 8003260:	5299      	strh	r1, [r3, r2]
 8003262:	e01c      	b.n	800329e <UART_Start_Receive_IT+0xaa>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	225c      	movs	r2, #92	; 0x5c
 8003268:	217f      	movs	r1, #127	; 0x7f
 800326a:	5299      	strh	r1, [r3, r2]
 800326c:	e017      	b.n	800329e <UART_Start_Receive_IT+0xaa>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	055b      	lsls	r3, r3, #21
 8003276:	429a      	cmp	r2, r3
 8003278:	d10d      	bne.n	8003296 <UART_Start_Receive_IT+0xa2>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d104      	bne.n	800328c <UART_Start_Receive_IT+0x98>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	225c      	movs	r2, #92	; 0x5c
 8003286:	217f      	movs	r1, #127	; 0x7f
 8003288:	5299      	strh	r1, [r3, r2]
 800328a:	e008      	b.n	800329e <UART_Start_Receive_IT+0xaa>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	225c      	movs	r2, #92	; 0x5c
 8003290:	213f      	movs	r1, #63	; 0x3f
 8003292:	5299      	strh	r1, [r3, r2]
 8003294:	e003      	b.n	800329e <UART_Start_Receive_IT+0xaa>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	225c      	movs	r2, #92	; 0x5c
 800329a:	2100      	movs	r1, #0
 800329c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2284      	movs	r2, #132	; 0x84
 80032a2:	2100      	movs	r1, #0
 80032a4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2280      	movs	r2, #128	; 0x80
 80032aa:	2122      	movs	r1, #34	; 0x22
 80032ac:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ae:	f3ef 8310 	mrs	r3, PRIMASK
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032b8:	2301      	movs	r3, #1
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032be:	f383 8810 	msr	PRIMASK, r3
}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2101      	movs	r1, #1
 80032d0:	430a      	orrs	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	015b      	lsls	r3, r3, #5
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d107      	bne.n	80032fc <UART_Start_Receive_IT+0x108>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d103      	bne.n	80032fc <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4a22      	ldr	r2, [pc, #136]	; (8003380 <UART_Start_Receive_IT+0x18c>)
 80032f8:	669a      	str	r2, [r3, #104]	; 0x68
 80032fa:	e002      	b.n	8003302 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a21      	ldr	r2, [pc, #132]	; (8003384 <UART_Start_Receive_IT+0x190>)
 8003300:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d019      	beq.n	800333e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330a:	f3ef 8310 	mrs	r3, PRIMASK
 800330e:	61fb      	str	r3, [r7, #28]
  return(result);
 8003310:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
 8003314:	2301      	movs	r3, #1
 8003316:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	f383 8810 	msr	PRIMASK, r3
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2190      	movs	r1, #144	; 0x90
 800332c:	0049      	lsls	r1, r1, #1
 800332e:	430a      	orrs	r2, r1
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	f383 8810 	msr	PRIMASK, r3
}
 800333c:	e018      	b.n	8003370 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800333e:	f3ef 8310 	mrs	r3, PRIMASK
 8003342:	613b      	str	r3, [r7, #16]
  return(result);
 8003344:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003346:	63bb      	str	r3, [r7, #56]	; 0x38
 8003348:	2301      	movs	r3, #1
 800334a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f383 8810 	msr	PRIMASK, r3
}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2120      	movs	r1, #32
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003366:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f383 8810 	msr	PRIMASK, r3
}
 800336e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	0018      	movs	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	b010      	add	sp, #64	; 0x40
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	000001ff 	.word	0x000001ff
 8003380:	080037fd 	.word	0x080037fd
 8003384:	08003645 	.word	0x08003645

08003388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08e      	sub	sp, #56	; 0x38
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003390:	f3ef 8310 	mrs	r3, PRIMASK
 8003394:	617b      	str	r3, [r7, #20]
  return(result);
 8003396:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003398:	637b      	str	r3, [r7, #52]	; 0x34
 800339a:	2301      	movs	r3, #1
 800339c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	f383 8810 	msr	PRIMASK, r3
}
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4926      	ldr	r1, [pc, #152]	; (800344c <UART_EndRxTransfer+0xc4>)
 80033b2:	400a      	ands	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f383 8810 	msr	PRIMASK, r3
}
 80033c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c2:	f3ef 8310 	mrs	r3, PRIMASK
 80033c6:	623b      	str	r3, [r7, #32]
  return(result);
 80033c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ca:	633b      	str	r3, [r7, #48]	; 0x30
 80033cc:	2301      	movs	r3, #1
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	f383 8810 	msr	PRIMASK, r3
}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2101      	movs	r1, #1
 80033e4:	438a      	bics	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	f383 8810 	msr	PRIMASK, r3
}
 80033f2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d118      	bne.n	800342e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003400:	60bb      	str	r3, [r7, #8]
  return(result);
 8003402:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003406:	2301      	movs	r3, #1
 8003408:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f383 8810 	msr	PRIMASK, r3
}
 8003410:	46c0      	nop			; (mov r8, r8)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2110      	movs	r1, #16
 800341e:	438a      	bics	r2, r1
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f383 8810 	msr	PRIMASK, r3
}
 800342c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2280      	movs	r2, #128	; 0x80
 8003432:	2120      	movs	r1, #32
 8003434:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b00e      	add	sp, #56	; 0x38
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	fffffedf 	.word	0xfffffedf

08003450 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	225a      	movs	r2, #90	; 0x5a
 8003462:	2100      	movs	r1, #0
 8003464:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2252      	movs	r2, #82	; 0x52
 800346a:	2100      	movs	r1, #0
 800346c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	0018      	movs	r0, r3
 8003472:	f7ff fafd 	bl	8002a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	46bd      	mov	sp, r7
 800347a:	b004      	add	sp, #16
 800347c:	bd80      	pop	{r7, pc}

0800347e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b08a      	sub	sp, #40	; 0x28
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800348a:	2b21      	cmp	r3, #33	; 0x21
 800348c:	d14d      	bne.n	800352a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2252      	movs	r2, #82	; 0x52
 8003492:	5a9b      	ldrh	r3, [r3, r2]
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d132      	bne.n	8003500 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349a:	f3ef 8310 	mrs	r3, PRIMASK
 800349e:	60bb      	str	r3, [r7, #8]
  return(result);
 80034a0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
 80034a4:	2301      	movs	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f383 8810 	msr	PRIMASK, r3
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2180      	movs	r1, #128	; 0x80
 80034bc:	438a      	bics	r2, r1
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f383 8810 	msr	PRIMASK, r3
}
 80034ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034cc:	f3ef 8310 	mrs	r3, PRIMASK
 80034d0:	617b      	str	r3, [r7, #20]
  return(result);
 80034d2:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034d4:	623b      	str	r3, [r7, #32]
 80034d6:	2301      	movs	r3, #1
 80034d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f383 8810 	msr	PRIMASK, r3
}
 80034e0:	46c0      	nop			; (mov r8, r8)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2140      	movs	r1, #64	; 0x40
 80034ee:	430a      	orrs	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f383 8810 	msr	PRIMASK, r3
}
 80034fc:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80034fe:	e014      	b.n	800352a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003504:	781a      	ldrb	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	b292      	uxth	r2, r2
 800350c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2252      	movs	r2, #82	; 0x52
 800351c:	5a9b      	ldrh	r3, [r3, r2]
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b299      	uxth	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2252      	movs	r2, #82	; 0x52
 8003528:	5299      	strh	r1, [r3, r2]
}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	46bd      	mov	sp, r7
 800352e:	b00a      	add	sp, #40	; 0x28
 8003530:	bd80      	pop	{r7, pc}

08003532 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b08c      	sub	sp, #48	; 0x30
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800353e:	2b21      	cmp	r3, #33	; 0x21
 8003540:	d151      	bne.n	80035e6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2252      	movs	r2, #82	; 0x52
 8003546:	5a9b      	ldrh	r3, [r3, r2]
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d132      	bne.n	80035b4 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800354e:	f3ef 8310 	mrs	r3, PRIMASK
 8003552:	60fb      	str	r3, [r7, #12]
  return(result);
 8003554:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
 8003558:	2301      	movs	r3, #1
 800355a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f383 8810 	msr	PRIMASK, r3
}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2180      	movs	r1, #128	; 0x80
 8003570:	438a      	bics	r2, r1
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f383 8810 	msr	PRIMASK, r3
}
 800357e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003580:	f3ef 8310 	mrs	r3, PRIMASK
 8003584:	61bb      	str	r3, [r7, #24]
  return(result);
 8003586:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
 800358a:	2301      	movs	r3, #1
 800358c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f383 8810 	msr	PRIMASK, r3
}
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2140      	movs	r1, #64	; 0x40
 80035a2:	430a      	orrs	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	f383 8810 	msr	PRIMASK, r3
}
 80035b0:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80035b2:	e018      	b.n	80035e6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	881a      	ldrh	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	05d2      	lsls	r2, r2, #23
 80035c4:	0dd2      	lsrs	r2, r2, #23
 80035c6:	b292      	uxth	r2, r2
 80035c8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ce:	1c9a      	adds	r2, r3, #2
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2252      	movs	r2, #82	; 0x52
 80035d8:	5a9b      	ldrh	r3, [r3, r2]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b299      	uxth	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2252      	movs	r2, #82	; 0x52
 80035e4:	5299      	strh	r1, [r3, r2]
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b00c      	add	sp, #48	; 0x30
 80035ec:	bd80      	pop	{r7, pc}

080035ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b086      	sub	sp, #24
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f6:	f3ef 8310 	mrs	r3, PRIMASK
 80035fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80035fc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	2301      	movs	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f383 8810 	msr	PRIMASK, r3
}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2140      	movs	r1, #64	; 0x40
 8003618:	438a      	bics	r2, r1
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f383 8810 	msr	PRIMASK, r3
}
 8003626:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	0018      	movs	r0, r3
 8003638:	f7ff fa12 	bl	8002a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b006      	add	sp, #24
 8003642:	bd80      	pop	{r7, pc}

08003644 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b094      	sub	sp, #80	; 0x50
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800364c:	204e      	movs	r0, #78	; 0x4e
 800364e:	183b      	adds	r3, r7, r0
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	215c      	movs	r1, #92	; 0x5c
 8003654:	5a52      	ldrh	r2, [r2, r1]
 8003656:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2280      	movs	r2, #128	; 0x80
 800365c:	589b      	ldr	r3, [r3, r2]
 800365e:	2b22      	cmp	r3, #34	; 0x22
 8003660:	d000      	beq.n	8003664 <UART_RxISR_8BIT+0x20>
 8003662:	e0ba      	b.n	80037da <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	214c      	movs	r1, #76	; 0x4c
 800366a:	187b      	adds	r3, r7, r1
 800366c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800366e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003670:	187b      	adds	r3, r7, r1
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	183b      	adds	r3, r7, r0
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	b2d9      	uxtb	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003680:	400a      	ands	r2, r1
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	225a      	movs	r2, #90	; 0x5a
 8003694:	5a9b      	ldrh	r3, [r3, r2]
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b299      	uxth	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	225a      	movs	r2, #90	; 0x5a
 80036a0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	225a      	movs	r2, #90	; 0x5a
 80036a6:	5a9b      	ldrh	r3, [r3, r2]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d000      	beq.n	80036b0 <UART_RxISR_8BIT+0x6c>
 80036ae:	e09c      	b.n	80037ea <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b0:	f3ef 8310 	mrs	r3, PRIMASK
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80036ba:	2301      	movs	r3, #1
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	f383 8810 	msr	PRIMASK, r3
}
 80036c4:	46c0      	nop			; (mov r8, r8)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4948      	ldr	r1, [pc, #288]	; (80037f4 <UART_RxISR_8BIT+0x1b0>)
 80036d2:	400a      	ands	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	f383 8810 	msr	PRIMASK, r3
}
 80036e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e2:	f3ef 8310 	mrs	r3, PRIMASK
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ea:	647b      	str	r3, [r7, #68]	; 0x44
 80036ec:	2301      	movs	r3, #1
 80036ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f2:	f383 8810 	msr	PRIMASK, r3
}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2101      	movs	r1, #1
 8003704:	438a      	bics	r2, r1
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370e:	f383 8810 	msr	PRIMASK, r3
}
 8003712:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2280      	movs	r2, #128	; 0x80
 8003718:	2120      	movs	r1, #32
 800371a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	041b      	lsls	r3, r3, #16
 8003732:	4013      	ands	r3, r2
 8003734:	d018      	beq.n	8003768 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003736:	f3ef 8310 	mrs	r3, PRIMASK
 800373a:	61bb      	str	r3, [r7, #24]
  return(result);
 800373c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800373e:	643b      	str	r3, [r7, #64]	; 0x40
 8003740:	2301      	movs	r3, #1
 8003742:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f383 8810 	msr	PRIMASK, r3
}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4928      	ldr	r1, [pc, #160]	; (80037f8 <UART_RxISR_8BIT+0x1b4>)
 8003758:	400a      	ands	r2, r1
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	f383 8810 	msr	PRIMASK, r3
}
 8003766:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376c:	2b01      	cmp	r3, #1
 800376e:	d12f      	bne.n	80037d0 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003776:	f3ef 8310 	mrs	r3, PRIMASK
 800377a:	60fb      	str	r3, [r7, #12]
  return(result);
 800377c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800377e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003780:	2301      	movs	r3, #1
 8003782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f383 8810 	msr	PRIMASK, r3
}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2110      	movs	r1, #16
 8003798:	438a      	bics	r2, r1
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f383 8810 	msr	PRIMASK, r3
}
 80037a6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	2210      	movs	r2, #16
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b10      	cmp	r3, #16
 80037b4:	d103      	bne.n	80037be <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2210      	movs	r2, #16
 80037bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2258      	movs	r2, #88	; 0x58
 80037c2:	5a9a      	ldrh	r2, [r3, r2]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	0011      	movs	r1, r2
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7ff f959 	bl	8002a80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037ce:	e00c      	b.n	80037ea <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7fd f82a 	bl	800082c <HAL_UART_RxCpltCallback>
}
 80037d8:	e007      	b.n	80037ea <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699a      	ldr	r2, [r3, #24]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2108      	movs	r1, #8
 80037e6:	430a      	orrs	r2, r1
 80037e8:	619a      	str	r2, [r3, #24]
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b014      	add	sp, #80	; 0x50
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	fffffedf 	.word	0xfffffedf
 80037f8:	fbffffff 	.word	0xfbffffff

080037fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b094      	sub	sp, #80	; 0x50
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003804:	204e      	movs	r0, #78	; 0x4e
 8003806:	183b      	adds	r3, r7, r0
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	215c      	movs	r1, #92	; 0x5c
 800380c:	5a52      	ldrh	r2, [r2, r1]
 800380e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2280      	movs	r2, #128	; 0x80
 8003814:	589b      	ldr	r3, [r3, r2]
 8003816:	2b22      	cmp	r3, #34	; 0x22
 8003818:	d000      	beq.n	800381c <UART_RxISR_16BIT+0x20>
 800381a:	e0ba      	b.n	8003992 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	214c      	movs	r1, #76	; 0x4c
 8003822:	187b      	adds	r3, r7, r1
 8003824:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003826:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800382e:	187b      	adds	r3, r7, r1
 8003830:	183a      	adds	r2, r7, r0
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	8812      	ldrh	r2, [r2, #0]
 8003836:	4013      	ands	r3, r2
 8003838:	b29a      	uxth	r2, r3
 800383a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800383c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	1c9a      	adds	r2, r3, #2
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	225a      	movs	r2, #90	; 0x5a
 800384c:	5a9b      	ldrh	r3, [r3, r2]
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b299      	uxth	r1, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	225a      	movs	r2, #90	; 0x5a
 8003858:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	225a      	movs	r2, #90	; 0x5a
 800385e:	5a9b      	ldrh	r3, [r3, r2]
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d000      	beq.n	8003868 <UART_RxISR_16BIT+0x6c>
 8003866:	e09c      	b.n	80039a2 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003868:	f3ef 8310 	mrs	r3, PRIMASK
 800386c:	623b      	str	r3, [r7, #32]
  return(result);
 800386e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003870:	647b      	str	r3, [r7, #68]	; 0x44
 8003872:	2301      	movs	r3, #1
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	f383 8810 	msr	PRIMASK, r3
}
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4948      	ldr	r1, [pc, #288]	; (80039ac <UART_RxISR_16BIT+0x1b0>)
 800388a:	400a      	ands	r2, r1
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003890:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	f383 8810 	msr	PRIMASK, r3
}
 8003898:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389a:	f3ef 8310 	mrs	r3, PRIMASK
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a2:	643b      	str	r3, [r7, #64]	; 0x40
 80038a4:	2301      	movs	r3, #1
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	f383 8810 	msr	PRIMASK, r3
}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2101      	movs	r1, #1
 80038bc:	438a      	bics	r2, r1
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c6:	f383 8810 	msr	PRIMASK, r3
}
 80038ca:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	2120      	movs	r1, #32
 80038d2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	4013      	ands	r3, r2
 80038ec:	d018      	beq.n	8003920 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ee:	f3ef 8310 	mrs	r3, PRIMASK
 80038f2:	617b      	str	r3, [r7, #20]
  return(result);
 80038f4:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f8:	2301      	movs	r3, #1
 80038fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	f383 8810 	msr	PRIMASK, r3
}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4928      	ldr	r1, [pc, #160]	; (80039b0 <UART_RxISR_16BIT+0x1b4>)
 8003910:	400a      	ands	r2, r1
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003916:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f383 8810 	msr	PRIMASK, r3
}
 800391e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003924:	2b01      	cmp	r3, #1
 8003926:	d12f      	bne.n	8003988 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800392e:	f3ef 8310 	mrs	r3, PRIMASK
 8003932:	60bb      	str	r3, [r7, #8]
  return(result);
 8003934:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003936:	63bb      	str	r3, [r7, #56]	; 0x38
 8003938:	2301      	movs	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f383 8810 	msr	PRIMASK, r3
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2110      	movs	r1, #16
 8003950:	438a      	bics	r2, r1
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f383 8810 	msr	PRIMASK, r3
}
 800395e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	2210      	movs	r2, #16
 8003968:	4013      	ands	r3, r2
 800396a:	2b10      	cmp	r3, #16
 800396c:	d103      	bne.n	8003976 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2210      	movs	r2, #16
 8003974:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2258      	movs	r2, #88	; 0x58
 800397a:	5a9a      	ldrh	r2, [r3, r2]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	0011      	movs	r1, r2
 8003980:	0018      	movs	r0, r3
 8003982:	f7ff f87d 	bl	8002a80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003986:	e00c      	b.n	80039a2 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	0018      	movs	r0, r3
 800398c:	f7fc ff4e 	bl	800082c <HAL_UART_RxCpltCallback>
}
 8003990:	e007      	b.n	80039a2 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699a      	ldr	r2, [r3, #24]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2108      	movs	r1, #8
 800399e:	430a      	orrs	r2, r1
 80039a0:	619a      	str	r2, [r3, #24]
}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b014      	add	sp, #80	; 0x50
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	fffffedf 	.word	0xfffffedf
 80039b0:	fbffffff 	.word	0xfbffffff

080039b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80039bc:	46c0      	nop			; (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	b002      	add	sp, #8
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <__errno>:
 80039c4:	4b01      	ldr	r3, [pc, #4]	; (80039cc <__errno+0x8>)
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	4770      	bx	lr
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	20000010 	.word	0x20000010

080039d0 <__libc_init_array>:
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	2600      	movs	r6, #0
 80039d4:	4d0c      	ldr	r5, [pc, #48]	; (8003a08 <__libc_init_array+0x38>)
 80039d6:	4c0d      	ldr	r4, [pc, #52]	; (8003a0c <__libc_init_array+0x3c>)
 80039d8:	1b64      	subs	r4, r4, r5
 80039da:	10a4      	asrs	r4, r4, #2
 80039dc:	42a6      	cmp	r6, r4
 80039de:	d109      	bne.n	80039f4 <__libc_init_array+0x24>
 80039e0:	2600      	movs	r6, #0
 80039e2:	f000 fd6b 	bl	80044bc <_init>
 80039e6:	4d0a      	ldr	r5, [pc, #40]	; (8003a10 <__libc_init_array+0x40>)
 80039e8:	4c0a      	ldr	r4, [pc, #40]	; (8003a14 <__libc_init_array+0x44>)
 80039ea:	1b64      	subs	r4, r4, r5
 80039ec:	10a4      	asrs	r4, r4, #2
 80039ee:	42a6      	cmp	r6, r4
 80039f0:	d105      	bne.n	80039fe <__libc_init_array+0x2e>
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
 80039f4:	00b3      	lsls	r3, r6, #2
 80039f6:	58eb      	ldr	r3, [r5, r3]
 80039f8:	4798      	blx	r3
 80039fa:	3601      	adds	r6, #1
 80039fc:	e7ee      	b.n	80039dc <__libc_init_array+0xc>
 80039fe:	00b3      	lsls	r3, r6, #2
 8003a00:	58eb      	ldr	r3, [r5, r3]
 8003a02:	4798      	blx	r3
 8003a04:	3601      	adds	r6, #1
 8003a06:	e7f2      	b.n	80039ee <__libc_init_array+0x1e>
 8003a08:	0800459c 	.word	0x0800459c
 8003a0c:	0800459c 	.word	0x0800459c
 8003a10:	0800459c 	.word	0x0800459c
 8003a14:	080045a0 	.word	0x080045a0

08003a18 <memset>:
 8003a18:	0003      	movs	r3, r0
 8003a1a:	1882      	adds	r2, r0, r2
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d100      	bne.n	8003a22 <memset+0xa>
 8003a20:	4770      	bx	lr
 8003a22:	7019      	strb	r1, [r3, #0]
 8003a24:	3301      	adds	r3, #1
 8003a26:	e7f9      	b.n	8003a1c <memset+0x4>

08003a28 <_puts_r>:
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	0005      	movs	r5, r0
 8003a2c:	000e      	movs	r6, r1
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d004      	beq.n	8003a3c <_puts_r+0x14>
 8003a32:	6983      	ldr	r3, [r0, #24]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <_puts_r+0x14>
 8003a38:	f000 fa6e 	bl	8003f18 <__sinit>
 8003a3c:	69ab      	ldr	r3, [r5, #24]
 8003a3e:	68ac      	ldr	r4, [r5, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <_puts_r+0x22>
 8003a44:	0028      	movs	r0, r5
 8003a46:	f000 fa67 	bl	8003f18 <__sinit>
 8003a4a:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <_puts_r+0xd8>)
 8003a4c:	429c      	cmp	r4, r3
 8003a4e:	d122      	bne.n	8003a96 <_puts_r+0x6e>
 8003a50:	686c      	ldr	r4, [r5, #4]
 8003a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a54:	07db      	lsls	r3, r3, #31
 8003a56:	d405      	bmi.n	8003a64 <_puts_r+0x3c>
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	059b      	lsls	r3, r3, #22
 8003a5c:	d402      	bmi.n	8003a64 <_puts_r+0x3c>
 8003a5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a60:	f000 fafb 	bl	800405a <__retarget_lock_acquire_recursive>
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	071b      	lsls	r3, r3, #28
 8003a68:	d502      	bpl.n	8003a70 <_puts_r+0x48>
 8003a6a:	6923      	ldr	r3, [r4, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d129      	bne.n	8003ac4 <_puts_r+0x9c>
 8003a70:	0021      	movs	r1, r4
 8003a72:	0028      	movs	r0, r5
 8003a74:	f000 f8aa 	bl	8003bcc <__swsetup_r>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d023      	beq.n	8003ac4 <_puts_r+0x9c>
 8003a7c:	2501      	movs	r5, #1
 8003a7e:	426d      	negs	r5, r5
 8003a80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a82:	07db      	lsls	r3, r3, #31
 8003a84:	d405      	bmi.n	8003a92 <_puts_r+0x6a>
 8003a86:	89a3      	ldrh	r3, [r4, #12]
 8003a88:	059b      	lsls	r3, r3, #22
 8003a8a:	d402      	bmi.n	8003a92 <_puts_r+0x6a>
 8003a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a8e:	f000 fae5 	bl	800405c <__retarget_lock_release_recursive>
 8003a92:	0028      	movs	r0, r5
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
 8003a96:	4b1b      	ldr	r3, [pc, #108]	; (8003b04 <_puts_r+0xdc>)
 8003a98:	429c      	cmp	r4, r3
 8003a9a:	d101      	bne.n	8003aa0 <_puts_r+0x78>
 8003a9c:	68ac      	ldr	r4, [r5, #8]
 8003a9e:	e7d8      	b.n	8003a52 <_puts_r+0x2a>
 8003aa0:	4b19      	ldr	r3, [pc, #100]	; (8003b08 <_puts_r+0xe0>)
 8003aa2:	429c      	cmp	r4, r3
 8003aa4:	d1d5      	bne.n	8003a52 <_puts_r+0x2a>
 8003aa6:	68ec      	ldr	r4, [r5, #12]
 8003aa8:	e7d3      	b.n	8003a52 <_puts_r+0x2a>
 8003aaa:	3601      	adds	r6, #1
 8003aac:	60a3      	str	r3, [r4, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	da04      	bge.n	8003abc <_puts_r+0x94>
 8003ab2:	69a2      	ldr	r2, [r4, #24]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	dc16      	bgt.n	8003ae6 <_puts_r+0xbe>
 8003ab8:	290a      	cmp	r1, #10
 8003aba:	d014      	beq.n	8003ae6 <_puts_r+0xbe>
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	6022      	str	r2, [r4, #0]
 8003ac2:	7019      	strb	r1, [r3, #0]
 8003ac4:	68a3      	ldr	r3, [r4, #8]
 8003ac6:	7831      	ldrb	r1, [r6, #0]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	2900      	cmp	r1, #0
 8003acc:	d1ed      	bne.n	8003aaa <_puts_r+0x82>
 8003ace:	60a3      	str	r3, [r4, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	da0f      	bge.n	8003af4 <_puts_r+0xcc>
 8003ad4:	0028      	movs	r0, r5
 8003ad6:	0022      	movs	r2, r4
 8003ad8:	310a      	adds	r1, #10
 8003ada:	f000 f821 	bl	8003b20 <__swbuf_r>
 8003ade:	250a      	movs	r5, #10
 8003ae0:	1c43      	adds	r3, r0, #1
 8003ae2:	d1cd      	bne.n	8003a80 <_puts_r+0x58>
 8003ae4:	e7ca      	b.n	8003a7c <_puts_r+0x54>
 8003ae6:	0022      	movs	r2, r4
 8003ae8:	0028      	movs	r0, r5
 8003aea:	f000 f819 	bl	8003b20 <__swbuf_r>
 8003aee:	1c43      	adds	r3, r0, #1
 8003af0:	d1e8      	bne.n	8003ac4 <_puts_r+0x9c>
 8003af2:	e7c3      	b.n	8003a7c <_puts_r+0x54>
 8003af4:	250a      	movs	r5, #10
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	6022      	str	r2, [r4, #0]
 8003afc:	701d      	strb	r5, [r3, #0]
 8003afe:	e7bf      	b.n	8003a80 <_puts_r+0x58>
 8003b00:	0800455c 	.word	0x0800455c
 8003b04:	0800457c 	.word	0x0800457c
 8003b08:	0800453c 	.word	0x0800453c

08003b0c <puts>:
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <puts+0x10>)
 8003b10:	0001      	movs	r1, r0
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	f7ff ff88 	bl	8003a28 <_puts_r>
 8003b18:	bd10      	pop	{r4, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	20000010 	.word	0x20000010

08003b20 <__swbuf_r>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	0005      	movs	r5, r0
 8003b24:	000e      	movs	r6, r1
 8003b26:	0014      	movs	r4, r2
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	d004      	beq.n	8003b36 <__swbuf_r+0x16>
 8003b2c:	6983      	ldr	r3, [r0, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <__swbuf_r+0x16>
 8003b32:	f000 f9f1 	bl	8003f18 <__sinit>
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <__swbuf_r+0xa0>)
 8003b38:	429c      	cmp	r4, r3
 8003b3a:	d12e      	bne.n	8003b9a <__swbuf_r+0x7a>
 8003b3c:	686c      	ldr	r4, [r5, #4]
 8003b3e:	69a3      	ldr	r3, [r4, #24]
 8003b40:	60a3      	str	r3, [r4, #8]
 8003b42:	89a3      	ldrh	r3, [r4, #12]
 8003b44:	071b      	lsls	r3, r3, #28
 8003b46:	d532      	bpl.n	8003bae <__swbuf_r+0x8e>
 8003b48:	6923      	ldr	r3, [r4, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d02f      	beq.n	8003bae <__swbuf_r+0x8e>
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	6922      	ldr	r2, [r4, #16]
 8003b52:	b2f7      	uxtb	r7, r6
 8003b54:	1a98      	subs	r0, r3, r2
 8003b56:	6963      	ldr	r3, [r4, #20]
 8003b58:	b2f6      	uxtb	r6, r6
 8003b5a:	4283      	cmp	r3, r0
 8003b5c:	dc05      	bgt.n	8003b6a <__swbuf_r+0x4a>
 8003b5e:	0021      	movs	r1, r4
 8003b60:	0028      	movs	r0, r5
 8003b62:	f000 f937 	bl	8003dd4 <_fflush_r>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d127      	bne.n	8003bba <__swbuf_r+0x9a>
 8003b6a:	68a3      	ldr	r3, [r4, #8]
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	60a3      	str	r3, [r4, #8]
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	6022      	str	r2, [r4, #0]
 8003b78:	701f      	strb	r7, [r3, #0]
 8003b7a:	6963      	ldr	r3, [r4, #20]
 8003b7c:	4283      	cmp	r3, r0
 8003b7e:	d004      	beq.n	8003b8a <__swbuf_r+0x6a>
 8003b80:	89a3      	ldrh	r3, [r4, #12]
 8003b82:	07db      	lsls	r3, r3, #31
 8003b84:	d507      	bpl.n	8003b96 <__swbuf_r+0x76>
 8003b86:	2e0a      	cmp	r6, #10
 8003b88:	d105      	bne.n	8003b96 <__swbuf_r+0x76>
 8003b8a:	0021      	movs	r1, r4
 8003b8c:	0028      	movs	r0, r5
 8003b8e:	f000 f921 	bl	8003dd4 <_fflush_r>
 8003b92:	2800      	cmp	r0, #0
 8003b94:	d111      	bne.n	8003bba <__swbuf_r+0x9a>
 8003b96:	0030      	movs	r0, r6
 8003b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <__swbuf_r+0xa4>)
 8003b9c:	429c      	cmp	r4, r3
 8003b9e:	d101      	bne.n	8003ba4 <__swbuf_r+0x84>
 8003ba0:	68ac      	ldr	r4, [r5, #8]
 8003ba2:	e7cc      	b.n	8003b3e <__swbuf_r+0x1e>
 8003ba4:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <__swbuf_r+0xa8>)
 8003ba6:	429c      	cmp	r4, r3
 8003ba8:	d1c9      	bne.n	8003b3e <__swbuf_r+0x1e>
 8003baa:	68ec      	ldr	r4, [r5, #12]
 8003bac:	e7c7      	b.n	8003b3e <__swbuf_r+0x1e>
 8003bae:	0021      	movs	r1, r4
 8003bb0:	0028      	movs	r0, r5
 8003bb2:	f000 f80b 	bl	8003bcc <__swsetup_r>
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	d0c9      	beq.n	8003b4e <__swbuf_r+0x2e>
 8003bba:	2601      	movs	r6, #1
 8003bbc:	4276      	negs	r6, r6
 8003bbe:	e7ea      	b.n	8003b96 <__swbuf_r+0x76>
 8003bc0:	0800455c 	.word	0x0800455c
 8003bc4:	0800457c 	.word	0x0800457c
 8003bc8:	0800453c 	.word	0x0800453c

08003bcc <__swsetup_r>:
 8003bcc:	4b37      	ldr	r3, [pc, #220]	; (8003cac <__swsetup_r+0xe0>)
 8003bce:	b570      	push	{r4, r5, r6, lr}
 8003bd0:	681d      	ldr	r5, [r3, #0]
 8003bd2:	0006      	movs	r6, r0
 8003bd4:	000c      	movs	r4, r1
 8003bd6:	2d00      	cmp	r5, #0
 8003bd8:	d005      	beq.n	8003be6 <__swsetup_r+0x1a>
 8003bda:	69ab      	ldr	r3, [r5, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <__swsetup_r+0x1a>
 8003be0:	0028      	movs	r0, r5
 8003be2:	f000 f999 	bl	8003f18 <__sinit>
 8003be6:	4b32      	ldr	r3, [pc, #200]	; (8003cb0 <__swsetup_r+0xe4>)
 8003be8:	429c      	cmp	r4, r3
 8003bea:	d10f      	bne.n	8003c0c <__swsetup_r+0x40>
 8003bec:	686c      	ldr	r4, [r5, #4]
 8003bee:	230c      	movs	r3, #12
 8003bf0:	5ee2      	ldrsh	r2, [r4, r3]
 8003bf2:	b293      	uxth	r3, r2
 8003bf4:	0711      	lsls	r1, r2, #28
 8003bf6:	d42d      	bmi.n	8003c54 <__swsetup_r+0x88>
 8003bf8:	06d9      	lsls	r1, r3, #27
 8003bfa:	d411      	bmi.n	8003c20 <__swsetup_r+0x54>
 8003bfc:	2309      	movs	r3, #9
 8003bfe:	2001      	movs	r0, #1
 8003c00:	6033      	str	r3, [r6, #0]
 8003c02:	3337      	adds	r3, #55	; 0x37
 8003c04:	4313      	orrs	r3, r2
 8003c06:	81a3      	strh	r3, [r4, #12]
 8003c08:	4240      	negs	r0, r0
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
 8003c0c:	4b29      	ldr	r3, [pc, #164]	; (8003cb4 <__swsetup_r+0xe8>)
 8003c0e:	429c      	cmp	r4, r3
 8003c10:	d101      	bne.n	8003c16 <__swsetup_r+0x4a>
 8003c12:	68ac      	ldr	r4, [r5, #8]
 8003c14:	e7eb      	b.n	8003bee <__swsetup_r+0x22>
 8003c16:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <__swsetup_r+0xec>)
 8003c18:	429c      	cmp	r4, r3
 8003c1a:	d1e8      	bne.n	8003bee <__swsetup_r+0x22>
 8003c1c:	68ec      	ldr	r4, [r5, #12]
 8003c1e:	e7e6      	b.n	8003bee <__swsetup_r+0x22>
 8003c20:	075b      	lsls	r3, r3, #29
 8003c22:	d513      	bpl.n	8003c4c <__swsetup_r+0x80>
 8003c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c26:	2900      	cmp	r1, #0
 8003c28:	d008      	beq.n	8003c3c <__swsetup_r+0x70>
 8003c2a:	0023      	movs	r3, r4
 8003c2c:	3344      	adds	r3, #68	; 0x44
 8003c2e:	4299      	cmp	r1, r3
 8003c30:	d002      	beq.n	8003c38 <__swsetup_r+0x6c>
 8003c32:	0030      	movs	r0, r6
 8003c34:	f000 fa80 	bl	8004138 <_free_r>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	6363      	str	r3, [r4, #52]	; 0x34
 8003c3c:	2224      	movs	r2, #36	; 0x24
 8003c3e:	89a3      	ldrh	r3, [r4, #12]
 8003c40:	4393      	bics	r3, r2
 8003c42:	81a3      	strh	r3, [r4, #12]
 8003c44:	2300      	movs	r3, #0
 8003c46:	6063      	str	r3, [r4, #4]
 8003c48:	6923      	ldr	r3, [r4, #16]
 8003c4a:	6023      	str	r3, [r4, #0]
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	89a2      	ldrh	r2, [r4, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	81a3      	strh	r3, [r4, #12]
 8003c54:	6923      	ldr	r3, [r4, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10b      	bne.n	8003c72 <__swsetup_r+0xa6>
 8003c5a:	21a0      	movs	r1, #160	; 0xa0
 8003c5c:	2280      	movs	r2, #128	; 0x80
 8003c5e:	89a3      	ldrh	r3, [r4, #12]
 8003c60:	0089      	lsls	r1, r1, #2
 8003c62:	0092      	lsls	r2, r2, #2
 8003c64:	400b      	ands	r3, r1
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d003      	beq.n	8003c72 <__swsetup_r+0xa6>
 8003c6a:	0021      	movs	r1, r4
 8003c6c:	0030      	movs	r0, r6
 8003c6e:	f000 fa1f 	bl	80040b0 <__smakebuf_r>
 8003c72:	220c      	movs	r2, #12
 8003c74:	5ea3      	ldrsh	r3, [r4, r2]
 8003c76:	2001      	movs	r0, #1
 8003c78:	001a      	movs	r2, r3
 8003c7a:	b299      	uxth	r1, r3
 8003c7c:	4002      	ands	r2, r0
 8003c7e:	4203      	tst	r3, r0
 8003c80:	d00f      	beq.n	8003ca2 <__swsetup_r+0xd6>
 8003c82:	2200      	movs	r2, #0
 8003c84:	60a2      	str	r2, [r4, #8]
 8003c86:	6962      	ldr	r2, [r4, #20]
 8003c88:	4252      	negs	r2, r2
 8003c8a:	61a2      	str	r2, [r4, #24]
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	6922      	ldr	r2, [r4, #16]
 8003c90:	4282      	cmp	r2, r0
 8003c92:	d1ba      	bne.n	8003c0a <__swsetup_r+0x3e>
 8003c94:	060a      	lsls	r2, r1, #24
 8003c96:	d5b8      	bpl.n	8003c0a <__swsetup_r+0x3e>
 8003c98:	2240      	movs	r2, #64	; 0x40
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	81a3      	strh	r3, [r4, #12]
 8003c9e:	3801      	subs	r0, #1
 8003ca0:	e7b3      	b.n	8003c0a <__swsetup_r+0x3e>
 8003ca2:	0788      	lsls	r0, r1, #30
 8003ca4:	d400      	bmi.n	8003ca8 <__swsetup_r+0xdc>
 8003ca6:	6962      	ldr	r2, [r4, #20]
 8003ca8:	60a2      	str	r2, [r4, #8]
 8003caa:	e7ef      	b.n	8003c8c <__swsetup_r+0xc0>
 8003cac:	20000010 	.word	0x20000010
 8003cb0:	0800455c 	.word	0x0800455c
 8003cb4:	0800457c 	.word	0x0800457c
 8003cb8:	0800453c 	.word	0x0800453c

08003cbc <__sflush_r>:
 8003cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cbe:	898b      	ldrh	r3, [r1, #12]
 8003cc0:	0005      	movs	r5, r0
 8003cc2:	000c      	movs	r4, r1
 8003cc4:	071a      	lsls	r2, r3, #28
 8003cc6:	d45f      	bmi.n	8003d88 <__sflush_r+0xcc>
 8003cc8:	684a      	ldr	r2, [r1, #4]
 8003cca:	2a00      	cmp	r2, #0
 8003ccc:	dc04      	bgt.n	8003cd8 <__sflush_r+0x1c>
 8003cce:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003cd0:	2a00      	cmp	r2, #0
 8003cd2:	dc01      	bgt.n	8003cd8 <__sflush_r+0x1c>
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cd8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003cda:	2f00      	cmp	r7, #0
 8003cdc:	d0fa      	beq.n	8003cd4 <__sflush_r+0x18>
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2180      	movs	r1, #128	; 0x80
 8003ce2:	682e      	ldr	r6, [r5, #0]
 8003ce4:	602a      	str	r2, [r5, #0]
 8003ce6:	001a      	movs	r2, r3
 8003ce8:	0149      	lsls	r1, r1, #5
 8003cea:	400a      	ands	r2, r1
 8003cec:	420b      	tst	r3, r1
 8003cee:	d034      	beq.n	8003d5a <__sflush_r+0x9e>
 8003cf0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003cf2:	89a3      	ldrh	r3, [r4, #12]
 8003cf4:	075b      	lsls	r3, r3, #29
 8003cf6:	d506      	bpl.n	8003d06 <__sflush_r+0x4a>
 8003cf8:	6863      	ldr	r3, [r4, #4]
 8003cfa:	1ac0      	subs	r0, r0, r3
 8003cfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <__sflush_r+0x4a>
 8003d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d04:	1ac0      	subs	r0, r0, r3
 8003d06:	0002      	movs	r2, r0
 8003d08:	6a21      	ldr	r1, [r4, #32]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	0028      	movs	r0, r5
 8003d0e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003d10:	47b8      	blx	r7
 8003d12:	89a1      	ldrh	r1, [r4, #12]
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d106      	bne.n	8003d26 <__sflush_r+0x6a>
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	2b1d      	cmp	r3, #29
 8003d1c:	d831      	bhi.n	8003d82 <__sflush_r+0xc6>
 8003d1e:	4a2c      	ldr	r2, [pc, #176]	; (8003dd0 <__sflush_r+0x114>)
 8003d20:	40da      	lsrs	r2, r3
 8003d22:	07d3      	lsls	r3, r2, #31
 8003d24:	d52d      	bpl.n	8003d82 <__sflush_r+0xc6>
 8003d26:	2300      	movs	r3, #0
 8003d28:	6063      	str	r3, [r4, #4]
 8003d2a:	6923      	ldr	r3, [r4, #16]
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	04cb      	lsls	r3, r1, #19
 8003d30:	d505      	bpl.n	8003d3e <__sflush_r+0x82>
 8003d32:	1c43      	adds	r3, r0, #1
 8003d34:	d102      	bne.n	8003d3c <__sflush_r+0x80>
 8003d36:	682b      	ldr	r3, [r5, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d100      	bne.n	8003d3e <__sflush_r+0x82>
 8003d3c:	6560      	str	r0, [r4, #84]	; 0x54
 8003d3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d40:	602e      	str	r6, [r5, #0]
 8003d42:	2900      	cmp	r1, #0
 8003d44:	d0c6      	beq.n	8003cd4 <__sflush_r+0x18>
 8003d46:	0023      	movs	r3, r4
 8003d48:	3344      	adds	r3, #68	; 0x44
 8003d4a:	4299      	cmp	r1, r3
 8003d4c:	d002      	beq.n	8003d54 <__sflush_r+0x98>
 8003d4e:	0028      	movs	r0, r5
 8003d50:	f000 f9f2 	bl	8004138 <_free_r>
 8003d54:	2000      	movs	r0, #0
 8003d56:	6360      	str	r0, [r4, #52]	; 0x34
 8003d58:	e7bd      	b.n	8003cd6 <__sflush_r+0x1a>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	0028      	movs	r0, r5
 8003d5e:	6a21      	ldr	r1, [r4, #32]
 8003d60:	47b8      	blx	r7
 8003d62:	1c43      	adds	r3, r0, #1
 8003d64:	d1c5      	bne.n	8003cf2 <__sflush_r+0x36>
 8003d66:	682b      	ldr	r3, [r5, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0c2      	beq.n	8003cf2 <__sflush_r+0x36>
 8003d6c:	2b1d      	cmp	r3, #29
 8003d6e:	d001      	beq.n	8003d74 <__sflush_r+0xb8>
 8003d70:	2b16      	cmp	r3, #22
 8003d72:	d101      	bne.n	8003d78 <__sflush_r+0xbc>
 8003d74:	602e      	str	r6, [r5, #0]
 8003d76:	e7ad      	b.n	8003cd4 <__sflush_r+0x18>
 8003d78:	2340      	movs	r3, #64	; 0x40
 8003d7a:	89a2      	ldrh	r2, [r4, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	81a3      	strh	r3, [r4, #12]
 8003d80:	e7a9      	b.n	8003cd6 <__sflush_r+0x1a>
 8003d82:	2340      	movs	r3, #64	; 0x40
 8003d84:	430b      	orrs	r3, r1
 8003d86:	e7fa      	b.n	8003d7e <__sflush_r+0xc2>
 8003d88:	690f      	ldr	r7, [r1, #16]
 8003d8a:	2f00      	cmp	r7, #0
 8003d8c:	d0a2      	beq.n	8003cd4 <__sflush_r+0x18>
 8003d8e:	680a      	ldr	r2, [r1, #0]
 8003d90:	600f      	str	r7, [r1, #0]
 8003d92:	1bd2      	subs	r2, r2, r7
 8003d94:	9201      	str	r2, [sp, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	079b      	lsls	r3, r3, #30
 8003d9a:	d100      	bne.n	8003d9e <__sflush_r+0xe2>
 8003d9c:	694a      	ldr	r2, [r1, #20]
 8003d9e:	60a2      	str	r2, [r4, #8]
 8003da0:	9b01      	ldr	r3, [sp, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	dc00      	bgt.n	8003da8 <__sflush_r+0xec>
 8003da6:	e795      	b.n	8003cd4 <__sflush_r+0x18>
 8003da8:	003a      	movs	r2, r7
 8003daa:	0028      	movs	r0, r5
 8003dac:	9b01      	ldr	r3, [sp, #4]
 8003dae:	6a21      	ldr	r1, [r4, #32]
 8003db0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003db2:	47b0      	blx	r6
 8003db4:	2800      	cmp	r0, #0
 8003db6:	dc06      	bgt.n	8003dc6 <__sflush_r+0x10a>
 8003db8:	2340      	movs	r3, #64	; 0x40
 8003dba:	2001      	movs	r0, #1
 8003dbc:	89a2      	ldrh	r2, [r4, #12]
 8003dbe:	4240      	negs	r0, r0
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	81a3      	strh	r3, [r4, #12]
 8003dc4:	e787      	b.n	8003cd6 <__sflush_r+0x1a>
 8003dc6:	9b01      	ldr	r3, [sp, #4]
 8003dc8:	183f      	adds	r7, r7, r0
 8003dca:	1a1b      	subs	r3, r3, r0
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	e7e7      	b.n	8003da0 <__sflush_r+0xe4>
 8003dd0:	20400001 	.word	0x20400001

08003dd4 <_fflush_r>:
 8003dd4:	690b      	ldr	r3, [r1, #16]
 8003dd6:	b570      	push	{r4, r5, r6, lr}
 8003dd8:	0005      	movs	r5, r0
 8003dda:	000c      	movs	r4, r1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <_fflush_r+0x12>
 8003de0:	2500      	movs	r5, #0
 8003de2:	0028      	movs	r0, r5
 8003de4:	bd70      	pop	{r4, r5, r6, pc}
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d004      	beq.n	8003df4 <_fflush_r+0x20>
 8003dea:	6983      	ldr	r3, [r0, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <_fflush_r+0x20>
 8003df0:	f000 f892 	bl	8003f18 <__sinit>
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <_fflush_r+0x74>)
 8003df6:	429c      	cmp	r4, r3
 8003df8:	d11b      	bne.n	8003e32 <_fflush_r+0x5e>
 8003dfa:	686c      	ldr	r4, [r5, #4]
 8003dfc:	220c      	movs	r2, #12
 8003dfe:	5ea3      	ldrsh	r3, [r4, r2]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0ed      	beq.n	8003de0 <_fflush_r+0xc>
 8003e04:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e06:	07d2      	lsls	r2, r2, #31
 8003e08:	d404      	bmi.n	8003e14 <_fflush_r+0x40>
 8003e0a:	059b      	lsls	r3, r3, #22
 8003e0c:	d402      	bmi.n	8003e14 <_fflush_r+0x40>
 8003e0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e10:	f000 f923 	bl	800405a <__retarget_lock_acquire_recursive>
 8003e14:	0028      	movs	r0, r5
 8003e16:	0021      	movs	r1, r4
 8003e18:	f7ff ff50 	bl	8003cbc <__sflush_r>
 8003e1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e1e:	0005      	movs	r5, r0
 8003e20:	07db      	lsls	r3, r3, #31
 8003e22:	d4de      	bmi.n	8003de2 <_fflush_r+0xe>
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	059b      	lsls	r3, r3, #22
 8003e28:	d4db      	bmi.n	8003de2 <_fflush_r+0xe>
 8003e2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e2c:	f000 f916 	bl	800405c <__retarget_lock_release_recursive>
 8003e30:	e7d7      	b.n	8003de2 <_fflush_r+0xe>
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <_fflush_r+0x78>)
 8003e34:	429c      	cmp	r4, r3
 8003e36:	d101      	bne.n	8003e3c <_fflush_r+0x68>
 8003e38:	68ac      	ldr	r4, [r5, #8]
 8003e3a:	e7df      	b.n	8003dfc <_fflush_r+0x28>
 8003e3c:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <_fflush_r+0x7c>)
 8003e3e:	429c      	cmp	r4, r3
 8003e40:	d1dc      	bne.n	8003dfc <_fflush_r+0x28>
 8003e42:	68ec      	ldr	r4, [r5, #12]
 8003e44:	e7da      	b.n	8003dfc <_fflush_r+0x28>
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	0800455c 	.word	0x0800455c
 8003e4c:	0800457c 	.word	0x0800457c
 8003e50:	0800453c 	.word	0x0800453c

08003e54 <std>:
 8003e54:	2300      	movs	r3, #0
 8003e56:	b510      	push	{r4, lr}
 8003e58:	0004      	movs	r4, r0
 8003e5a:	6003      	str	r3, [r0, #0]
 8003e5c:	6043      	str	r3, [r0, #4]
 8003e5e:	6083      	str	r3, [r0, #8]
 8003e60:	8181      	strh	r1, [r0, #12]
 8003e62:	6643      	str	r3, [r0, #100]	; 0x64
 8003e64:	0019      	movs	r1, r3
 8003e66:	81c2      	strh	r2, [r0, #14]
 8003e68:	6103      	str	r3, [r0, #16]
 8003e6a:	6143      	str	r3, [r0, #20]
 8003e6c:	6183      	str	r3, [r0, #24]
 8003e6e:	2208      	movs	r2, #8
 8003e70:	305c      	adds	r0, #92	; 0x5c
 8003e72:	f7ff fdd1 	bl	8003a18 <memset>
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <std+0x38>)
 8003e78:	6224      	str	r4, [r4, #32]
 8003e7a:	6263      	str	r3, [r4, #36]	; 0x24
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <std+0x3c>)
 8003e7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e80:	4b04      	ldr	r3, [pc, #16]	; (8003e94 <std+0x40>)
 8003e82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <std+0x44>)
 8003e86:	6323      	str	r3, [r4, #48]	; 0x30
 8003e88:	bd10      	pop	{r4, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	08004321 	.word	0x08004321
 8003e90:	08004349 	.word	0x08004349
 8003e94:	08004381 	.word	0x08004381
 8003e98:	080043ad 	.word	0x080043ad

08003e9c <_cleanup_r>:
 8003e9c:	b510      	push	{r4, lr}
 8003e9e:	4902      	ldr	r1, [pc, #8]	; (8003ea8 <_cleanup_r+0xc>)
 8003ea0:	f000 f8ba 	bl	8004018 <_fwalk_reent>
 8003ea4:	bd10      	pop	{r4, pc}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	08003dd5 	.word	0x08003dd5

08003eac <__sfmoreglue>:
 8003eac:	b570      	push	{r4, r5, r6, lr}
 8003eae:	2568      	movs	r5, #104	; 0x68
 8003eb0:	1e4a      	subs	r2, r1, #1
 8003eb2:	4355      	muls	r5, r2
 8003eb4:	000e      	movs	r6, r1
 8003eb6:	0029      	movs	r1, r5
 8003eb8:	3174      	adds	r1, #116	; 0x74
 8003eba:	f000 f9a9 	bl	8004210 <_malloc_r>
 8003ebe:	1e04      	subs	r4, r0, #0
 8003ec0:	d008      	beq.n	8003ed4 <__sfmoreglue+0x28>
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	002a      	movs	r2, r5
 8003ec6:	6001      	str	r1, [r0, #0]
 8003ec8:	6046      	str	r6, [r0, #4]
 8003eca:	300c      	adds	r0, #12
 8003ecc:	60a0      	str	r0, [r4, #8]
 8003ece:	3268      	adds	r2, #104	; 0x68
 8003ed0:	f7ff fda2 	bl	8003a18 <memset>
 8003ed4:	0020      	movs	r0, r4
 8003ed6:	bd70      	pop	{r4, r5, r6, pc}

08003ed8 <__sfp_lock_acquire>:
 8003ed8:	b510      	push	{r4, lr}
 8003eda:	4802      	ldr	r0, [pc, #8]	; (8003ee4 <__sfp_lock_acquire+0xc>)
 8003edc:	f000 f8bd 	bl	800405a <__retarget_lock_acquire_recursive>
 8003ee0:	bd10      	pop	{r4, pc}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	2000018d 	.word	0x2000018d

08003ee8 <__sfp_lock_release>:
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	4802      	ldr	r0, [pc, #8]	; (8003ef4 <__sfp_lock_release+0xc>)
 8003eec:	f000 f8b6 	bl	800405c <__retarget_lock_release_recursive>
 8003ef0:	bd10      	pop	{r4, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	2000018d 	.word	0x2000018d

08003ef8 <__sinit_lock_acquire>:
 8003ef8:	b510      	push	{r4, lr}
 8003efa:	4802      	ldr	r0, [pc, #8]	; (8003f04 <__sinit_lock_acquire+0xc>)
 8003efc:	f000 f8ad 	bl	800405a <__retarget_lock_acquire_recursive>
 8003f00:	bd10      	pop	{r4, pc}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	2000018e 	.word	0x2000018e

08003f08 <__sinit_lock_release>:
 8003f08:	b510      	push	{r4, lr}
 8003f0a:	4802      	ldr	r0, [pc, #8]	; (8003f14 <__sinit_lock_release+0xc>)
 8003f0c:	f000 f8a6 	bl	800405c <__retarget_lock_release_recursive>
 8003f10:	bd10      	pop	{r4, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	2000018e 	.word	0x2000018e

08003f18 <__sinit>:
 8003f18:	b513      	push	{r0, r1, r4, lr}
 8003f1a:	0004      	movs	r4, r0
 8003f1c:	f7ff ffec 	bl	8003ef8 <__sinit_lock_acquire>
 8003f20:	69a3      	ldr	r3, [r4, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <__sinit+0x14>
 8003f26:	f7ff ffef 	bl	8003f08 <__sinit_lock_release>
 8003f2a:	bd13      	pop	{r0, r1, r4, pc}
 8003f2c:	64a3      	str	r3, [r4, #72]	; 0x48
 8003f2e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003f30:	6523      	str	r3, [r4, #80]	; 0x50
 8003f32:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <__sinit+0x68>)
 8003f34:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <__sinit+0x6c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	42a3      	cmp	r3, r4
 8003f3e:	d101      	bne.n	8003f44 <__sinit+0x2c>
 8003f40:	2301      	movs	r3, #1
 8003f42:	61a3      	str	r3, [r4, #24]
 8003f44:	0020      	movs	r0, r4
 8003f46:	f000 f81f 	bl	8003f88 <__sfp>
 8003f4a:	6060      	str	r0, [r4, #4]
 8003f4c:	0020      	movs	r0, r4
 8003f4e:	f000 f81b 	bl	8003f88 <__sfp>
 8003f52:	60a0      	str	r0, [r4, #8]
 8003f54:	0020      	movs	r0, r4
 8003f56:	f000 f817 	bl	8003f88 <__sfp>
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2104      	movs	r1, #4
 8003f5e:	60e0      	str	r0, [r4, #12]
 8003f60:	6860      	ldr	r0, [r4, #4]
 8003f62:	f7ff ff77 	bl	8003e54 <std>
 8003f66:	2201      	movs	r2, #1
 8003f68:	2109      	movs	r1, #9
 8003f6a:	68a0      	ldr	r0, [r4, #8]
 8003f6c:	f7ff ff72 	bl	8003e54 <std>
 8003f70:	2202      	movs	r2, #2
 8003f72:	2112      	movs	r1, #18
 8003f74:	68e0      	ldr	r0, [r4, #12]
 8003f76:	f7ff ff6d 	bl	8003e54 <std>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	61a3      	str	r3, [r4, #24]
 8003f7e:	e7d2      	b.n	8003f26 <__sinit+0xe>
 8003f80:	08004538 	.word	0x08004538
 8003f84:	08003e9d 	.word	0x08003e9d

08003f88 <__sfp>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	0007      	movs	r7, r0
 8003f8c:	f7ff ffa4 	bl	8003ed8 <__sfp_lock_acquire>
 8003f90:	4b1f      	ldr	r3, [pc, #124]	; (8004010 <__sfp+0x88>)
 8003f92:	681e      	ldr	r6, [r3, #0]
 8003f94:	69b3      	ldr	r3, [r6, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d102      	bne.n	8003fa0 <__sfp+0x18>
 8003f9a:	0030      	movs	r0, r6
 8003f9c:	f7ff ffbc 	bl	8003f18 <__sinit>
 8003fa0:	3648      	adds	r6, #72	; 0x48
 8003fa2:	68b4      	ldr	r4, [r6, #8]
 8003fa4:	6873      	ldr	r3, [r6, #4]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	d504      	bpl.n	8003fb4 <__sfp+0x2c>
 8003faa:	6833      	ldr	r3, [r6, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d022      	beq.n	8003ff6 <__sfp+0x6e>
 8003fb0:	6836      	ldr	r6, [r6, #0]
 8003fb2:	e7f6      	b.n	8003fa2 <__sfp+0x1a>
 8003fb4:	220c      	movs	r2, #12
 8003fb6:	5ea5      	ldrsh	r5, [r4, r2]
 8003fb8:	2d00      	cmp	r5, #0
 8003fba:	d11a      	bne.n	8003ff2 <__sfp+0x6a>
 8003fbc:	0020      	movs	r0, r4
 8003fbe:	4b15      	ldr	r3, [pc, #84]	; (8004014 <__sfp+0x8c>)
 8003fc0:	3058      	adds	r0, #88	; 0x58
 8003fc2:	60e3      	str	r3, [r4, #12]
 8003fc4:	6665      	str	r5, [r4, #100]	; 0x64
 8003fc6:	f000 f847 	bl	8004058 <__retarget_lock_init_recursive>
 8003fca:	f7ff ff8d 	bl	8003ee8 <__sfp_lock_release>
 8003fce:	0020      	movs	r0, r4
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	0029      	movs	r1, r5
 8003fd4:	6025      	str	r5, [r4, #0]
 8003fd6:	60a5      	str	r5, [r4, #8]
 8003fd8:	6065      	str	r5, [r4, #4]
 8003fda:	6125      	str	r5, [r4, #16]
 8003fdc:	6165      	str	r5, [r4, #20]
 8003fde:	61a5      	str	r5, [r4, #24]
 8003fe0:	305c      	adds	r0, #92	; 0x5c
 8003fe2:	f7ff fd19 	bl	8003a18 <memset>
 8003fe6:	6365      	str	r5, [r4, #52]	; 0x34
 8003fe8:	63a5      	str	r5, [r4, #56]	; 0x38
 8003fea:	64a5      	str	r5, [r4, #72]	; 0x48
 8003fec:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003fee:	0020      	movs	r0, r4
 8003ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ff2:	3468      	adds	r4, #104	; 0x68
 8003ff4:	e7d7      	b.n	8003fa6 <__sfp+0x1e>
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	0038      	movs	r0, r7
 8003ffa:	f7ff ff57 	bl	8003eac <__sfmoreglue>
 8003ffe:	1e04      	subs	r4, r0, #0
 8004000:	6030      	str	r0, [r6, #0]
 8004002:	d1d5      	bne.n	8003fb0 <__sfp+0x28>
 8004004:	f7ff ff70 	bl	8003ee8 <__sfp_lock_release>
 8004008:	230c      	movs	r3, #12
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	e7ef      	b.n	8003fee <__sfp+0x66>
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	08004538 	.word	0x08004538
 8004014:	ffff0001 	.word	0xffff0001

08004018 <_fwalk_reent>:
 8004018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800401a:	0004      	movs	r4, r0
 800401c:	0006      	movs	r6, r0
 800401e:	2700      	movs	r7, #0
 8004020:	9101      	str	r1, [sp, #4]
 8004022:	3448      	adds	r4, #72	; 0x48
 8004024:	6863      	ldr	r3, [r4, #4]
 8004026:	68a5      	ldr	r5, [r4, #8]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	9b00      	ldr	r3, [sp, #0]
 800402c:	3b01      	subs	r3, #1
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	d504      	bpl.n	800403c <_fwalk_reent+0x24>
 8004032:	6824      	ldr	r4, [r4, #0]
 8004034:	2c00      	cmp	r4, #0
 8004036:	d1f5      	bne.n	8004024 <_fwalk_reent+0xc>
 8004038:	0038      	movs	r0, r7
 800403a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800403c:	89ab      	ldrh	r3, [r5, #12]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d908      	bls.n	8004054 <_fwalk_reent+0x3c>
 8004042:	220e      	movs	r2, #14
 8004044:	5eab      	ldrsh	r3, [r5, r2]
 8004046:	3301      	adds	r3, #1
 8004048:	d004      	beq.n	8004054 <_fwalk_reent+0x3c>
 800404a:	0029      	movs	r1, r5
 800404c:	0030      	movs	r0, r6
 800404e:	9b01      	ldr	r3, [sp, #4]
 8004050:	4798      	blx	r3
 8004052:	4307      	orrs	r7, r0
 8004054:	3568      	adds	r5, #104	; 0x68
 8004056:	e7e8      	b.n	800402a <_fwalk_reent+0x12>

08004058 <__retarget_lock_init_recursive>:
 8004058:	4770      	bx	lr

0800405a <__retarget_lock_acquire_recursive>:
 800405a:	4770      	bx	lr

0800405c <__retarget_lock_release_recursive>:
 800405c:	4770      	bx	lr
	...

08004060 <__swhatbuf_r>:
 8004060:	b570      	push	{r4, r5, r6, lr}
 8004062:	000e      	movs	r6, r1
 8004064:	001d      	movs	r5, r3
 8004066:	230e      	movs	r3, #14
 8004068:	5ec9      	ldrsh	r1, [r1, r3]
 800406a:	0014      	movs	r4, r2
 800406c:	b096      	sub	sp, #88	; 0x58
 800406e:	2900      	cmp	r1, #0
 8004070:	da08      	bge.n	8004084 <__swhatbuf_r+0x24>
 8004072:	220c      	movs	r2, #12
 8004074:	5eb3      	ldrsh	r3, [r6, r2]
 8004076:	2200      	movs	r2, #0
 8004078:	602a      	str	r2, [r5, #0]
 800407a:	061b      	lsls	r3, r3, #24
 800407c:	d411      	bmi.n	80040a2 <__swhatbuf_r+0x42>
 800407e:	2380      	movs	r3, #128	; 0x80
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	e00f      	b.n	80040a4 <__swhatbuf_r+0x44>
 8004084:	466a      	mov	r2, sp
 8004086:	f000 f9bd 	bl	8004404 <_fstat_r>
 800408a:	2800      	cmp	r0, #0
 800408c:	dbf1      	blt.n	8004072 <__swhatbuf_r+0x12>
 800408e:	23f0      	movs	r3, #240	; 0xf0
 8004090:	9901      	ldr	r1, [sp, #4]
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	4019      	ands	r1, r3
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <__swhatbuf_r+0x4c>)
 8004098:	18c9      	adds	r1, r1, r3
 800409a:	424b      	negs	r3, r1
 800409c:	4159      	adcs	r1, r3
 800409e:	6029      	str	r1, [r5, #0]
 80040a0:	e7ed      	b.n	800407e <__swhatbuf_r+0x1e>
 80040a2:	2340      	movs	r3, #64	; 0x40
 80040a4:	2000      	movs	r0, #0
 80040a6:	6023      	str	r3, [r4, #0]
 80040a8:	b016      	add	sp, #88	; 0x58
 80040aa:	bd70      	pop	{r4, r5, r6, pc}
 80040ac:	ffffe000 	.word	0xffffe000

080040b0 <__smakebuf_r>:
 80040b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040b2:	2602      	movs	r6, #2
 80040b4:	898b      	ldrh	r3, [r1, #12]
 80040b6:	0005      	movs	r5, r0
 80040b8:	000c      	movs	r4, r1
 80040ba:	4233      	tst	r3, r6
 80040bc:	d006      	beq.n	80040cc <__smakebuf_r+0x1c>
 80040be:	0023      	movs	r3, r4
 80040c0:	3347      	adds	r3, #71	; 0x47
 80040c2:	6023      	str	r3, [r4, #0]
 80040c4:	6123      	str	r3, [r4, #16]
 80040c6:	2301      	movs	r3, #1
 80040c8:	6163      	str	r3, [r4, #20]
 80040ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80040cc:	466a      	mov	r2, sp
 80040ce:	ab01      	add	r3, sp, #4
 80040d0:	f7ff ffc6 	bl	8004060 <__swhatbuf_r>
 80040d4:	9900      	ldr	r1, [sp, #0]
 80040d6:	0007      	movs	r7, r0
 80040d8:	0028      	movs	r0, r5
 80040da:	f000 f899 	bl	8004210 <_malloc_r>
 80040de:	2800      	cmp	r0, #0
 80040e0:	d108      	bne.n	80040f4 <__smakebuf_r+0x44>
 80040e2:	220c      	movs	r2, #12
 80040e4:	5ea3      	ldrsh	r3, [r4, r2]
 80040e6:	059a      	lsls	r2, r3, #22
 80040e8:	d4ef      	bmi.n	80040ca <__smakebuf_r+0x1a>
 80040ea:	2203      	movs	r2, #3
 80040ec:	4393      	bics	r3, r2
 80040ee:	431e      	orrs	r6, r3
 80040f0:	81a6      	strh	r6, [r4, #12]
 80040f2:	e7e4      	b.n	80040be <__smakebuf_r+0xe>
 80040f4:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <__smakebuf_r+0x84>)
 80040f6:	62ab      	str	r3, [r5, #40]	; 0x28
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	89a2      	ldrh	r2, [r4, #12]
 80040fc:	6020      	str	r0, [r4, #0]
 80040fe:	4313      	orrs	r3, r2
 8004100:	81a3      	strh	r3, [r4, #12]
 8004102:	9b00      	ldr	r3, [sp, #0]
 8004104:	6120      	str	r0, [r4, #16]
 8004106:	6163      	str	r3, [r4, #20]
 8004108:	9b01      	ldr	r3, [sp, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <__smakebuf_r+0x7a>
 800410e:	0028      	movs	r0, r5
 8004110:	230e      	movs	r3, #14
 8004112:	5ee1      	ldrsh	r1, [r4, r3]
 8004114:	f000 f988 	bl	8004428 <_isatty_r>
 8004118:	2800      	cmp	r0, #0
 800411a:	d006      	beq.n	800412a <__smakebuf_r+0x7a>
 800411c:	2203      	movs	r2, #3
 800411e:	89a3      	ldrh	r3, [r4, #12]
 8004120:	4393      	bics	r3, r2
 8004122:	001a      	movs	r2, r3
 8004124:	2301      	movs	r3, #1
 8004126:	4313      	orrs	r3, r2
 8004128:	81a3      	strh	r3, [r4, #12]
 800412a:	89a0      	ldrh	r0, [r4, #12]
 800412c:	4307      	orrs	r7, r0
 800412e:	81a7      	strh	r7, [r4, #12]
 8004130:	e7cb      	b.n	80040ca <__smakebuf_r+0x1a>
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	08003e9d 	.word	0x08003e9d

08004138 <_free_r>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	0005      	movs	r5, r0
 800413c:	2900      	cmp	r1, #0
 800413e:	d010      	beq.n	8004162 <_free_r+0x2a>
 8004140:	1f0c      	subs	r4, r1, #4
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	da00      	bge.n	800414a <_free_r+0x12>
 8004148:	18e4      	adds	r4, r4, r3
 800414a:	0028      	movs	r0, r5
 800414c:	f000 f992 	bl	8004474 <__malloc_lock>
 8004150:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <_free_r+0x90>)
 8004152:	6813      	ldr	r3, [r2, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d105      	bne.n	8004164 <_free_r+0x2c>
 8004158:	6063      	str	r3, [r4, #4]
 800415a:	6014      	str	r4, [r2, #0]
 800415c:	0028      	movs	r0, r5
 800415e:	f000 f991 	bl	8004484 <__malloc_unlock>
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	42a3      	cmp	r3, r4
 8004166:	d908      	bls.n	800417a <_free_r+0x42>
 8004168:	6821      	ldr	r1, [r4, #0]
 800416a:	1860      	adds	r0, r4, r1
 800416c:	4283      	cmp	r3, r0
 800416e:	d1f3      	bne.n	8004158 <_free_r+0x20>
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	1841      	adds	r1, r0, r1
 8004176:	6021      	str	r1, [r4, #0]
 8004178:	e7ee      	b.n	8004158 <_free_r+0x20>
 800417a:	001a      	movs	r2, r3
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <_free_r+0x4e>
 8004182:	42a3      	cmp	r3, r4
 8004184:	d9f9      	bls.n	800417a <_free_r+0x42>
 8004186:	6811      	ldr	r1, [r2, #0]
 8004188:	1850      	adds	r0, r2, r1
 800418a:	42a0      	cmp	r0, r4
 800418c:	d10b      	bne.n	80041a6 <_free_r+0x6e>
 800418e:	6820      	ldr	r0, [r4, #0]
 8004190:	1809      	adds	r1, r1, r0
 8004192:	1850      	adds	r0, r2, r1
 8004194:	6011      	str	r1, [r2, #0]
 8004196:	4283      	cmp	r3, r0
 8004198:	d1e0      	bne.n	800415c <_free_r+0x24>
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	1841      	adds	r1, r0, r1
 80041a0:	6011      	str	r1, [r2, #0]
 80041a2:	6053      	str	r3, [r2, #4]
 80041a4:	e7da      	b.n	800415c <_free_r+0x24>
 80041a6:	42a0      	cmp	r0, r4
 80041a8:	d902      	bls.n	80041b0 <_free_r+0x78>
 80041aa:	230c      	movs	r3, #12
 80041ac:	602b      	str	r3, [r5, #0]
 80041ae:	e7d5      	b.n	800415c <_free_r+0x24>
 80041b0:	6821      	ldr	r1, [r4, #0]
 80041b2:	1860      	adds	r0, r4, r1
 80041b4:	4283      	cmp	r3, r0
 80041b6:	d103      	bne.n	80041c0 <_free_r+0x88>
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	1841      	adds	r1, r0, r1
 80041be:	6021      	str	r1, [r4, #0]
 80041c0:	6063      	str	r3, [r4, #4]
 80041c2:	6054      	str	r4, [r2, #4]
 80041c4:	e7ca      	b.n	800415c <_free_r+0x24>
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	20000190 	.word	0x20000190

080041cc <sbrk_aligned>:
 80041cc:	b570      	push	{r4, r5, r6, lr}
 80041ce:	4e0f      	ldr	r6, [pc, #60]	; (800420c <sbrk_aligned+0x40>)
 80041d0:	000d      	movs	r5, r1
 80041d2:	6831      	ldr	r1, [r6, #0]
 80041d4:	0004      	movs	r4, r0
 80041d6:	2900      	cmp	r1, #0
 80041d8:	d102      	bne.n	80041e0 <sbrk_aligned+0x14>
 80041da:	f000 f88f 	bl	80042fc <_sbrk_r>
 80041de:	6030      	str	r0, [r6, #0]
 80041e0:	0029      	movs	r1, r5
 80041e2:	0020      	movs	r0, r4
 80041e4:	f000 f88a 	bl	80042fc <_sbrk_r>
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	d00a      	beq.n	8004202 <sbrk_aligned+0x36>
 80041ec:	2303      	movs	r3, #3
 80041ee:	1cc5      	adds	r5, r0, #3
 80041f0:	439d      	bics	r5, r3
 80041f2:	42a8      	cmp	r0, r5
 80041f4:	d007      	beq.n	8004206 <sbrk_aligned+0x3a>
 80041f6:	1a29      	subs	r1, r5, r0
 80041f8:	0020      	movs	r0, r4
 80041fa:	f000 f87f 	bl	80042fc <_sbrk_r>
 80041fe:	1c43      	adds	r3, r0, #1
 8004200:	d101      	bne.n	8004206 <sbrk_aligned+0x3a>
 8004202:	2501      	movs	r5, #1
 8004204:	426d      	negs	r5, r5
 8004206:	0028      	movs	r0, r5
 8004208:	bd70      	pop	{r4, r5, r6, pc}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	20000194 	.word	0x20000194

08004210 <_malloc_r>:
 8004210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004212:	2203      	movs	r2, #3
 8004214:	1ccb      	adds	r3, r1, #3
 8004216:	4393      	bics	r3, r2
 8004218:	3308      	adds	r3, #8
 800421a:	0006      	movs	r6, r0
 800421c:	001f      	movs	r7, r3
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d232      	bcs.n	8004288 <_malloc_r+0x78>
 8004222:	270c      	movs	r7, #12
 8004224:	42b9      	cmp	r1, r7
 8004226:	d831      	bhi.n	800428c <_malloc_r+0x7c>
 8004228:	0030      	movs	r0, r6
 800422a:	f000 f923 	bl	8004474 <__malloc_lock>
 800422e:	4d32      	ldr	r5, [pc, #200]	; (80042f8 <_malloc_r+0xe8>)
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	001c      	movs	r4, r3
 8004234:	2c00      	cmp	r4, #0
 8004236:	d12e      	bne.n	8004296 <_malloc_r+0x86>
 8004238:	0039      	movs	r1, r7
 800423a:	0030      	movs	r0, r6
 800423c:	f7ff ffc6 	bl	80041cc <sbrk_aligned>
 8004240:	0004      	movs	r4, r0
 8004242:	1c43      	adds	r3, r0, #1
 8004244:	d11e      	bne.n	8004284 <_malloc_r+0x74>
 8004246:	682c      	ldr	r4, [r5, #0]
 8004248:	0025      	movs	r5, r4
 800424a:	2d00      	cmp	r5, #0
 800424c:	d14a      	bne.n	80042e4 <_malloc_r+0xd4>
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	0029      	movs	r1, r5
 8004252:	18e3      	adds	r3, r4, r3
 8004254:	0030      	movs	r0, r6
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	f000 f850 	bl	80042fc <_sbrk_r>
 800425c:	9b01      	ldr	r3, [sp, #4]
 800425e:	4283      	cmp	r3, r0
 8004260:	d143      	bne.n	80042ea <_malloc_r+0xda>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	3703      	adds	r7, #3
 8004266:	1aff      	subs	r7, r7, r3
 8004268:	2303      	movs	r3, #3
 800426a:	439f      	bics	r7, r3
 800426c:	3708      	adds	r7, #8
 800426e:	2f0c      	cmp	r7, #12
 8004270:	d200      	bcs.n	8004274 <_malloc_r+0x64>
 8004272:	270c      	movs	r7, #12
 8004274:	0039      	movs	r1, r7
 8004276:	0030      	movs	r0, r6
 8004278:	f7ff ffa8 	bl	80041cc <sbrk_aligned>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d034      	beq.n	80042ea <_malloc_r+0xda>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	19df      	adds	r7, r3, r7
 8004284:	6027      	str	r7, [r4, #0]
 8004286:	e013      	b.n	80042b0 <_malloc_r+0xa0>
 8004288:	2b00      	cmp	r3, #0
 800428a:	dacb      	bge.n	8004224 <_malloc_r+0x14>
 800428c:	230c      	movs	r3, #12
 800428e:	2500      	movs	r5, #0
 8004290:	6033      	str	r3, [r6, #0]
 8004292:	0028      	movs	r0, r5
 8004294:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004296:	6822      	ldr	r2, [r4, #0]
 8004298:	1bd1      	subs	r1, r2, r7
 800429a:	d420      	bmi.n	80042de <_malloc_r+0xce>
 800429c:	290b      	cmp	r1, #11
 800429e:	d917      	bls.n	80042d0 <_malloc_r+0xc0>
 80042a0:	19e2      	adds	r2, r4, r7
 80042a2:	6027      	str	r7, [r4, #0]
 80042a4:	42a3      	cmp	r3, r4
 80042a6:	d111      	bne.n	80042cc <_malloc_r+0xbc>
 80042a8:	602a      	str	r2, [r5, #0]
 80042aa:	6863      	ldr	r3, [r4, #4]
 80042ac:	6011      	str	r1, [r2, #0]
 80042ae:	6053      	str	r3, [r2, #4]
 80042b0:	0030      	movs	r0, r6
 80042b2:	0025      	movs	r5, r4
 80042b4:	f000 f8e6 	bl	8004484 <__malloc_unlock>
 80042b8:	2207      	movs	r2, #7
 80042ba:	350b      	adds	r5, #11
 80042bc:	1d23      	adds	r3, r4, #4
 80042be:	4395      	bics	r5, r2
 80042c0:	1aea      	subs	r2, r5, r3
 80042c2:	429d      	cmp	r5, r3
 80042c4:	d0e5      	beq.n	8004292 <_malloc_r+0x82>
 80042c6:	1b5b      	subs	r3, r3, r5
 80042c8:	50a3      	str	r3, [r4, r2]
 80042ca:	e7e2      	b.n	8004292 <_malloc_r+0x82>
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	e7ec      	b.n	80042aa <_malloc_r+0x9a>
 80042d0:	6862      	ldr	r2, [r4, #4]
 80042d2:	42a3      	cmp	r3, r4
 80042d4:	d101      	bne.n	80042da <_malloc_r+0xca>
 80042d6:	602a      	str	r2, [r5, #0]
 80042d8:	e7ea      	b.n	80042b0 <_malloc_r+0xa0>
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	e7e8      	b.n	80042b0 <_malloc_r+0xa0>
 80042de:	0023      	movs	r3, r4
 80042e0:	6864      	ldr	r4, [r4, #4]
 80042e2:	e7a7      	b.n	8004234 <_malloc_r+0x24>
 80042e4:	002c      	movs	r4, r5
 80042e6:	686d      	ldr	r5, [r5, #4]
 80042e8:	e7af      	b.n	800424a <_malloc_r+0x3a>
 80042ea:	230c      	movs	r3, #12
 80042ec:	0030      	movs	r0, r6
 80042ee:	6033      	str	r3, [r6, #0]
 80042f0:	f000 f8c8 	bl	8004484 <__malloc_unlock>
 80042f4:	e7cd      	b.n	8004292 <_malloc_r+0x82>
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	20000190 	.word	0x20000190

080042fc <_sbrk_r>:
 80042fc:	2300      	movs	r3, #0
 80042fe:	b570      	push	{r4, r5, r6, lr}
 8004300:	4d06      	ldr	r5, [pc, #24]	; (800431c <_sbrk_r+0x20>)
 8004302:	0004      	movs	r4, r0
 8004304:	0008      	movs	r0, r1
 8004306:	602b      	str	r3, [r5, #0]
 8004308:	f7fc f92a 	bl	8000560 <_sbrk>
 800430c:	1c43      	adds	r3, r0, #1
 800430e:	d103      	bne.n	8004318 <_sbrk_r+0x1c>
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d000      	beq.n	8004318 <_sbrk_r+0x1c>
 8004316:	6023      	str	r3, [r4, #0]
 8004318:	bd70      	pop	{r4, r5, r6, pc}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	20000198 	.word	0x20000198

08004320 <__sread>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	000c      	movs	r4, r1
 8004324:	250e      	movs	r5, #14
 8004326:	5f49      	ldrsh	r1, [r1, r5]
 8004328:	f000 f8b4 	bl	8004494 <_read_r>
 800432c:	2800      	cmp	r0, #0
 800432e:	db03      	blt.n	8004338 <__sread+0x18>
 8004330:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004332:	181b      	adds	r3, r3, r0
 8004334:	6563      	str	r3, [r4, #84]	; 0x54
 8004336:	bd70      	pop	{r4, r5, r6, pc}
 8004338:	89a3      	ldrh	r3, [r4, #12]
 800433a:	4a02      	ldr	r2, [pc, #8]	; (8004344 <__sread+0x24>)
 800433c:	4013      	ands	r3, r2
 800433e:	81a3      	strh	r3, [r4, #12]
 8004340:	e7f9      	b.n	8004336 <__sread+0x16>
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	ffffefff 	.word	0xffffefff

08004348 <__swrite>:
 8004348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434a:	001f      	movs	r7, r3
 800434c:	898b      	ldrh	r3, [r1, #12]
 800434e:	0005      	movs	r5, r0
 8004350:	000c      	movs	r4, r1
 8004352:	0016      	movs	r6, r2
 8004354:	05db      	lsls	r3, r3, #23
 8004356:	d505      	bpl.n	8004364 <__swrite+0x1c>
 8004358:	230e      	movs	r3, #14
 800435a:	5ec9      	ldrsh	r1, [r1, r3]
 800435c:	2200      	movs	r2, #0
 800435e:	2302      	movs	r3, #2
 8004360:	f000 f874 	bl	800444c <_lseek_r>
 8004364:	89a3      	ldrh	r3, [r4, #12]
 8004366:	4a05      	ldr	r2, [pc, #20]	; (800437c <__swrite+0x34>)
 8004368:	0028      	movs	r0, r5
 800436a:	4013      	ands	r3, r2
 800436c:	81a3      	strh	r3, [r4, #12]
 800436e:	0032      	movs	r2, r6
 8004370:	230e      	movs	r3, #14
 8004372:	5ee1      	ldrsh	r1, [r4, r3]
 8004374:	003b      	movs	r3, r7
 8004376:	f000 f81f 	bl	80043b8 <_write_r>
 800437a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800437c:	ffffefff 	.word	0xffffefff

08004380 <__sseek>:
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	000c      	movs	r4, r1
 8004384:	250e      	movs	r5, #14
 8004386:	5f49      	ldrsh	r1, [r1, r5]
 8004388:	f000 f860 	bl	800444c <_lseek_r>
 800438c:	89a3      	ldrh	r3, [r4, #12]
 800438e:	1c42      	adds	r2, r0, #1
 8004390:	d103      	bne.n	800439a <__sseek+0x1a>
 8004392:	4a05      	ldr	r2, [pc, #20]	; (80043a8 <__sseek+0x28>)
 8004394:	4013      	ands	r3, r2
 8004396:	81a3      	strh	r3, [r4, #12]
 8004398:	bd70      	pop	{r4, r5, r6, pc}
 800439a:	2280      	movs	r2, #128	; 0x80
 800439c:	0152      	lsls	r2, r2, #5
 800439e:	4313      	orrs	r3, r2
 80043a0:	81a3      	strh	r3, [r4, #12]
 80043a2:	6560      	str	r0, [r4, #84]	; 0x54
 80043a4:	e7f8      	b.n	8004398 <__sseek+0x18>
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	ffffefff 	.word	0xffffefff

080043ac <__sclose>:
 80043ac:	b510      	push	{r4, lr}
 80043ae:	230e      	movs	r3, #14
 80043b0:	5ec9      	ldrsh	r1, [r1, r3]
 80043b2:	f000 f815 	bl	80043e0 <_close_r>
 80043b6:	bd10      	pop	{r4, pc}

080043b8 <_write_r>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	0004      	movs	r4, r0
 80043bc:	0008      	movs	r0, r1
 80043be:	0011      	movs	r1, r2
 80043c0:	001a      	movs	r2, r3
 80043c2:	2300      	movs	r3, #0
 80043c4:	4d05      	ldr	r5, [pc, #20]	; (80043dc <_write_r+0x24>)
 80043c6:	602b      	str	r3, [r5, #0]
 80043c8:	f7fc f881 	bl	80004ce <_write>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d103      	bne.n	80043d8 <_write_r+0x20>
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d000      	beq.n	80043d8 <_write_r+0x20>
 80043d6:	6023      	str	r3, [r4, #0]
 80043d8:	bd70      	pop	{r4, r5, r6, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	20000198 	.word	0x20000198

080043e0 <_close_r>:
 80043e0:	2300      	movs	r3, #0
 80043e2:	b570      	push	{r4, r5, r6, lr}
 80043e4:	4d06      	ldr	r5, [pc, #24]	; (8004400 <_close_r+0x20>)
 80043e6:	0004      	movs	r4, r0
 80043e8:	0008      	movs	r0, r1
 80043ea:	602b      	str	r3, [r5, #0]
 80043ec:	f7fc f88b 	bl	8000506 <_close>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d103      	bne.n	80043fc <_close_r+0x1c>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d000      	beq.n	80043fc <_close_r+0x1c>
 80043fa:	6023      	str	r3, [r4, #0]
 80043fc:	bd70      	pop	{r4, r5, r6, pc}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	20000198 	.word	0x20000198

08004404 <_fstat_r>:
 8004404:	2300      	movs	r3, #0
 8004406:	b570      	push	{r4, r5, r6, lr}
 8004408:	4d06      	ldr	r5, [pc, #24]	; (8004424 <_fstat_r+0x20>)
 800440a:	0004      	movs	r4, r0
 800440c:	0008      	movs	r0, r1
 800440e:	0011      	movs	r1, r2
 8004410:	602b      	str	r3, [r5, #0]
 8004412:	f7fc f882 	bl	800051a <_fstat>
 8004416:	1c43      	adds	r3, r0, #1
 8004418:	d103      	bne.n	8004422 <_fstat_r+0x1e>
 800441a:	682b      	ldr	r3, [r5, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d000      	beq.n	8004422 <_fstat_r+0x1e>
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	20000198 	.word	0x20000198

08004428 <_isatty_r>:
 8004428:	2300      	movs	r3, #0
 800442a:	b570      	push	{r4, r5, r6, lr}
 800442c:	4d06      	ldr	r5, [pc, #24]	; (8004448 <_isatty_r+0x20>)
 800442e:	0004      	movs	r4, r0
 8004430:	0008      	movs	r0, r1
 8004432:	602b      	str	r3, [r5, #0]
 8004434:	f7fc f87f 	bl	8000536 <_isatty>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d103      	bne.n	8004444 <_isatty_r+0x1c>
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d000      	beq.n	8004444 <_isatty_r+0x1c>
 8004442:	6023      	str	r3, [r4, #0]
 8004444:	bd70      	pop	{r4, r5, r6, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	20000198 	.word	0x20000198

0800444c <_lseek_r>:
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	0004      	movs	r4, r0
 8004450:	0008      	movs	r0, r1
 8004452:	0011      	movs	r1, r2
 8004454:	001a      	movs	r2, r3
 8004456:	2300      	movs	r3, #0
 8004458:	4d05      	ldr	r5, [pc, #20]	; (8004470 <_lseek_r+0x24>)
 800445a:	602b      	str	r3, [r5, #0]
 800445c:	f7fc f874 	bl	8000548 <_lseek>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	d103      	bne.n	800446c <_lseek_r+0x20>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d000      	beq.n	800446c <_lseek_r+0x20>
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	bd70      	pop	{r4, r5, r6, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	20000198 	.word	0x20000198

08004474 <__malloc_lock>:
 8004474:	b510      	push	{r4, lr}
 8004476:	4802      	ldr	r0, [pc, #8]	; (8004480 <__malloc_lock+0xc>)
 8004478:	f7ff fdef 	bl	800405a <__retarget_lock_acquire_recursive>
 800447c:	bd10      	pop	{r4, pc}
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	2000018c 	.word	0x2000018c

08004484 <__malloc_unlock>:
 8004484:	b510      	push	{r4, lr}
 8004486:	4802      	ldr	r0, [pc, #8]	; (8004490 <__malloc_unlock+0xc>)
 8004488:	f7ff fde8 	bl	800405c <__retarget_lock_release_recursive>
 800448c:	bd10      	pop	{r4, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	2000018c 	.word	0x2000018c

08004494 <_read_r>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	0004      	movs	r4, r0
 8004498:	0008      	movs	r0, r1
 800449a:	0011      	movs	r1, r2
 800449c:	001a      	movs	r2, r3
 800449e:	2300      	movs	r3, #0
 80044a0:	4d05      	ldr	r5, [pc, #20]	; (80044b8 <_read_r+0x24>)
 80044a2:	602b      	str	r3, [r5, #0]
 80044a4:	f7fb fff6 	bl	8000494 <_read>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d103      	bne.n	80044b4 <_read_r+0x20>
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d000      	beq.n	80044b4 <_read_r+0x20>
 80044b2:	6023      	str	r3, [r4, #0]
 80044b4:	bd70      	pop	{r4, r5, r6, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	20000198 	.word	0x20000198

080044bc <_init>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr

080044c8 <_fini>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr
